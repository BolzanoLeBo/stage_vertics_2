
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b4  080034b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080034b4  080034b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b4  080034b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .ccmramdata   00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 11 .bss          00000044  20000010  20000010  00020010  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000054  20000054  00020010  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000792c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001aec  00000000  00000000  000279af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000710  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000530  00000000  00000000  00029bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d20b  00000000  00000000  0002a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00009bc5  00000000  00000000  000472eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ae07b  00000000  00000000  00050eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001bac  00000000  00000000  000fef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00100ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003438 	.word	0x08003438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003438 	.word	0x08003438

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <Error>:

#include "freq_manage.h"
static int pll_on = 1;
static int current_frequency = 0;
void Error(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error+0x8>
	...

080007e0 <enable_hse>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void enable_hse()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b092      	sub	sp, #72	; 0x48
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 f96d 	bl	8002ac8 <HAL_RCC_GetOscConfig>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ff36 	bl	8001668 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <enable_hse+0x26>
  {
    /* Initialization Error */
    Error();
 8000802:	f7ff ffe7 	bl	80007d4 <Error>
  }
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000806:	bf00      	nop
 8000808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000810:	fa93 f3a3 	rbit	r3, r3
 8000814:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000818:	fab3 f383 	clz	r3, r3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b01      	cmp	r3, #1
 800082a:	d102      	bne.n	8000832 <enable_hse+0x52>
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <enable_hse+0xa8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	e00f      	b.n	8000852 <enable_hse+0x72>
 8000832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083a:	fa93 f3a3 	rbit	r3, r3
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
 8000846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000848:	fa93 f3a3 	rbit	r3, r3
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <enable_hse+0xa8>)
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085a:	fa92 f2a2 	rbit	r2, r2
 800085e:	62ba      	str	r2, [r7, #40]	; 0x28
  return result;
 8000860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000862:	fab2 f282 	clz	r2, r2
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	f042 0220 	orr.w	r2, r2, #32
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	f002 021f 	and.w	r2, r2, #31
 8000872:	2101      	movs	r1, #1
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	4013      	ands	r3, r2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0c4      	beq.n	8000808 <enable_hse+0x28>
  {
    ;
  }

}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3748      	adds	r7, #72	; 0x48
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <disable_pll>:

void disable_pll()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	; 0x40
 8000890:	af00      	add	r7, sp, #0
  pll_on = 0;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <disable_pll+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  enable_hse();
 8000898:	f7ff ffa2 	bl	80007e0 <enable_hse>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ff12 	bl	80026e4 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <disable_pll+0x3e>
  {
    /* Initialization Error */
    Error();
 80008c6:	f7ff ff85 	bl	80007d4 <Error>
  }
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f8fb 	bl	8002ac8 <HAL_RCC_GetOscConfig>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fec5 	bl	8001668 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <disable_pll+0x5c>
  {
    /* Initialization Error */
    Error();
 80008e4:	f7ff ff76 	bl	80007d4 <Error>
  }

}
 80008e8:	bf00      	nop
 80008ea:	3740      	adds	r7, #64	; 0x40
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000

080008f4 <Sleep>:




void Sleep(int time, RTC_HandleTypeDef* hrtc_addr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  current_frequency = HAL_RCC_GetHCLKFreq()/1000000;
 80008fe:	f002 f8d7 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8000902:	4603      	mov	r3, r0
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <Sleep+0x8c>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9b      	lsrs	r3, r3, #18
 800090c:	461a      	mov	r2, r3
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <Sleep+0x90>)
 8000910:	601a      	str	r2, [r3, #0]
  uint32_t counter = (uint32_t) ((float) time*2.5);/*divide by (16/40)*/
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091c:	ee17 0a90 	vmov	r0, s15
 8000920:	f7ff fee0 	bl	80006e4 <__aeabi_f2d>
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <Sleep+0x94>)
 800092a:	f7ff fc4d 	bl	80001c8 <__aeabi_dmul>
 800092e:	4602      	mov	r2, r0
 8000930:	460b      	mov	r3, r1
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	f7ff ff2d 	bl	8000794 <__aeabi_d2uiz>
 800093a:	4603      	mov	r3, r0
 800093c:	60fb      	str	r3, [r7, #12]
  HAL_SuspendTick();
 800093e:	f000 fbb3 	bl	80010a8 <HAL_SuspendTick>

  HAL_RTCEx_SetWakeUpTimer_IT(hrtc_addr , counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000942:	2200      	movs	r2, #0
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f002 fc02 	bl	8003150 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800094c:	2101      	movs	r1, #1
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fe56 	bl	8001600 <HAL_PWR_EnterSTOPMode>
  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* Wake up*/
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc_addr);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f002 fcbd 	bl	80032d4 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 800095a:	f000 fbb5 	bl	80010c8 <HAL_ResumeTick>
  //When wake up from STOP Sysclk source is HSI

  if (pll_on)
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <Sleep+0x98>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d005      	beq.n	8000972 <Sleep+0x7e>
    {
      change_freq(current_frequency);
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <Sleep+0x90>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f810 	bl	8000990 <change_freq>
    {
      disable_pll();
    }
  /*int r = __HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK;
  int f = HAL_RCC_GetSysClockFreq();*/
}
 8000970:	e001      	b.n	8000976 <Sleep+0x82>
      disable_pll();
 8000972:	f7ff ff8b 	bl	800088c <disable_pll>
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	431bde83 	.word	0x431bde83
 8000984:	2000002c 	.word	0x2000002c
 8000988:	40040000 	.word	0x40040000
 800098c:	20000000 	.word	0x20000000

08000990 <change_freq>:

void change_freq(int f)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b09c      	sub	sp, #112	; 0x70
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  int tab_mul[8] = {RCC_PLL_MUL2, RCC_PLL_MUL3, RCC_PLL_MUL4, RCC_PLL_MUL5,
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <change_freq+0x11c>)
 800099a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800099e:	461d      	mov	r5, r3
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                 RCC_PLL_MUL6, RCC_PLL_MUL7, RCC_PLL_MUL8, RCC_PLL_MUL9};
  pll_on = 1;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <change_freq+0x120>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
  current_frequency = f;
 80009b2:	4a40      	ldr	r2, [pc, #256]	; (8000ab4 <change_freq+0x124>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6013      	str	r3, [r2, #0]
  int latency, mul;
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2228      	movs	r2, #40	; 0x28
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fd05 	bl	80033e0 <memset>

  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  enable_hse();
 80009d6:	f7ff ff03 	bl	80007e0 <enable_hse>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80009da:	2301      	movs	r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fe7b 	bl	80026e4 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <change_freq+0x68>
  {
    /* Initialization Error */
    Error();
 80009f4:	f7ff feee 	bl	80007d4 <Error>
  }
  if (f <= 24)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b18      	cmp	r3, #24
 80009fc:	dc02      	bgt.n	8000a04 <change_freq+0x74>
  {
    latency = FLASH_LATENCY_0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000a02:	e013      	b.n	8000a2c <change_freq+0x9c>
  }
  else if (f > 24 && f<= 48)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b18      	cmp	r3, #24
 8000a08:	dd05      	ble.n	8000a16 <change_freq+0x86>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b30      	cmp	r3, #48	; 0x30
 8000a0e:	dc02      	bgt.n	8000a16 <change_freq+0x86>
  {
    latency = FLASH_LATENCY_1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000a14:	e00a      	b.n	8000a2c <change_freq+0x9c>
  }
  else if (f <= 72 && f > 48)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b48      	cmp	r3, #72	; 0x48
 8000a1a:	dc05      	bgt.n	8000a28 <change_freq+0x98>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b30      	cmp	r3, #48	; 0x30
 8000a20:	dd02      	ble.n	8000a28 <change_freq+0x98>
  {
    latency = FLASH_LATENCY_2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000a26:	e001      	b.n	8000a2c <change_freq+0x9c>
  }
  else
  {
    Error();
 8000a28:	f7ff fed4 	bl	80007d4 <Error>
  }
  mul = tab_mul[(f/8)-2];
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da00      	bge.n	8000a34 <change_freq+0xa4>
 8000a32:	3307      	adds	r3, #7
 8000a34:	10db      	asrs	r3, r3, #3
 8000a36:	3b02      	subs	r3, #2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	3370      	adds	r3, #112	; 0x70
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000a42:	66bb      	str	r3, [r7, #104]	; 0x68

  /* -2- Enable HSE  Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState        = RCC_HSE_ON;
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL      = mul;
 8000a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fdff 	bl	8001668 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <change_freq+0xe4>
  {
    /* Initialization Error */
    Error();
 8000a70:	f7ff feb0 	bl	80007d4 <Error>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType       = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a74:	230f      	movs	r3, #15
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_HCLK_DIV2;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider  = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 8000a8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fe26 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <change_freq+0x112>
  {
    /* Initialization Error */
    Error();
 8000a9e:	f7ff fe99 	bl	80007d4 <Error>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3770      	adds	r7, #112	; 0x70
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08003450 	.word	0x08003450
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	2000002c 	.word	0x2000002c

08000ab8 <tested_code>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tested_code()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  int nb_ex = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]

  //CODE FLASH
  for (int i = 0; i<nb_ex; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e006      	b.n	8000ad6 <tested_code+0x1e>
  {

    Sleep(10, &hrtc);
 8000ac8:	4915      	ldr	r1, [pc, #84]	; (8000b20 <tested_code+0x68>)
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff ff12 	bl	80008f4 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbf4      	blt.n	8000ac8 <tested_code+0x10>
  }


  //CODE CCM
  for (int i = 0; i<nb_ex; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	e006      	b.n	8000af2 <tested_code+0x3a>
  {

    Sleep(10, &hrtc);
 8000ae4:	490e      	ldr	r1, [pc, #56]	; (8000b20 <tested_code+0x68>)
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f7ff ff04 	bl	80008f4 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbf4      	blt.n	8000ae4 <tested_code+0x2c>
  }


  // CODE SRAM;
  for (int i = 0; i<nb_ex; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e006      	b.n	8000b0e <tested_code+0x56>
  {

    Sleep(10, &hrtc);
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <tested_code+0x68>)
 8000b02:	200a      	movs	r0, #10
 8000b04:	f7ff fef6 	bl	80008f4 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbf4      	blt.n	8000b00 <tested_code+0x48>
  }


}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000030 	.word	0x20000030

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f000 fa57 	bl	8000fdc <HAL_Init>

  /* USER CODE BEGIN Init */

  int f_table[NF] = {0,16,24,48,72};
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <main+0x80>)
 8000b30:	1d3c      	adds	r4, r7, #4
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	6023      	str	r3, [r4, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3c:	f000 f836 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b40:	f000 f8c2 	bl	8000cc8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b44:	f000 f890 	bl	8000c68 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int f;

  for (int i =0; i < NF; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	e01c      	b.n	8000b88 <main+0x64>
  {
    f = f_table[i];
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	3320      	adds	r3, #32
 8000b54:	443b      	add	r3, r7
 8000b56:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b5a:	61bb      	str	r3, [r7, #24]
    if (f == 0)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <main+0x44>
    {
      disable_pll();
 8000b62:	f7ff fe93 	bl	800088c <disable_pll>
 8000b66:	e002      	b.n	8000b6e <main+0x4a>
    }
    else
    {
      change_freq(f);
 8000b68:	69b8      	ldr	r0, [r7, #24]
 8000b6a:	f7ff ff11 	bl	8000990 <change_freq>
    }
    Sleep(20, &hrtc);
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <main+0x84>)
 8000b70:	2014      	movs	r0, #20
 8000b72:	f7ff febf 	bl	80008f4 <Sleep>
    tested_code();
 8000b76:	f7ff ff9f 	bl	8000ab8 <tested_code>
    Sleep(20, &hrtc);
 8000b7a:	490b      	ldr	r1, [pc, #44]	; (8000ba8 <main+0x84>)
 8000b7c:	2014      	movs	r0, #20
 8000b7e:	f7ff feb9 	bl	80008f4 <Sleep>
  for (int i =0; i < NF; i++)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	dddf      	ble.n	8000b4e <main+0x2a>
  }
  HAL_SuspendTick();
 8000b8e:	f000 fa8b 	bl	80010a8 <HAL_SuspendTick>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000b92:	2101      	movs	r1, #1
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fd33 	bl	8001600 <HAL_PWR_EnterSTOPMode>
 8000b9a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba4:	08003470 	.word	0x08003470
 8000ba8:	20000030 	.word	0x20000030

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09e      	sub	sp, #120	; 0x78
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fc10 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	223c      	movs	r2, #60	; 0x3c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fc02 	bl	80033e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c00:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fd2e 	bl	8001668 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c12:	f000 f90b 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fd56 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c3e:	f000 f8f5 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c46:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 ffc7 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c5c:	f000 f8e6 	bl	8000e2c <Error_Handler>
  }
}
 8000c60:	bf00      	nop
 8000c62:	3778      	adds	r7, #120	; 0x78
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_RTC_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c7a:	227f      	movs	r2, #127	; 0x7f
 8000c7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000c98:	f002 f954 	bl	8002f44 <HAL_RTC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ca2:	f000 f8c3 	bl	8000e2c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_RTC_Init+0x58>)
 8000cac:	f002 fa50 	bl	8003150 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f8b9 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000030 	.word	0x20000030
 8000cc4:	40002800 	.word	0x40002800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce8:	6153      	str	r3, [r2, #20]
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a46      	ldr	r2, [pc, #280]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a3a      	ldr	r2, [pc, #232]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <MX_GPIO_Init+0x14c>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d72:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4825      	ldr	r0, [pc, #148]	; (8000e18 <MX_GPIO_Init+0x150>)
 8000d84:	f000 fac2 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481f      	ldr	r0, [pc, #124]	; (8000e1c <MX_GPIO_Init+0x154>)
 8000d9e:	f000 fab5 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 PF4
                           PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2|GPIO_PIN_4
 8000da2:	f240 6354 	movw	r3, #1620	; 0x654
 8000da6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	481a      	ldr	r0, [pc, #104]	; (8000e20 <MX_GPIO_Init+0x158>)
 8000db8:	f000 faa8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000dbc:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 8000dc0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 fa9a 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ddc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_GPIO_Init+0x15c>)
 8000dee:	f000 fa8d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_GPIO_Init+0x160>)
 8000e08:	f000 fa80 	bl	800130c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3730      	adds	r7, #48	; 0x30
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48001000 	.word	0x48001000
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48001400 	.word	0x48001400
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000c00 	.word	0x48000c00

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x44>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x44>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_MspInit+0x44>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x44>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_RTC_MspInit+0x50>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d119      	bne.n	8000ec6 <HAL_RTC_MspInit+0x46>
 8000e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	60bb      	str	r3, [r7, #8]
  return result;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ea2:	fab3 f383 	clz	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_RTC_MspInit+0x54>)
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 f9ef 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fa08 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40002800 	.word	0x40002800
 8000ed4:	10908100 	.word	0x10908100

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8a0 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <RTC_WKUP_IRQHandler+0x10>)
 8000f32:	f002 fa27 	bl	8003384 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000030 	.word	0x20000030

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f64:	f8df d04c 	ldr.w	sp, [pc, #76]	; 8000fb4 <LoopForever+0x4>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff ffea 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <LoopForever+0x8>)
  ldr r1, =_edata
 8000f6e:	4913      	ldr	r1, [pc, #76]	; (8000fbc <LoopForever+0xc>)
  ldr r2, =_sidata
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <LoopForever+0x10>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  

  /* Copy from flash to CCMRAM */
 ldr r0, =_sccmram
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <LoopForever+0x14>)
 ldr r1, =_eccmram
 8000f84:	4910      	ldr	r1, [pc, #64]	; (8000fc8 <LoopForever+0x18>)
 ldr r2, =_siccmram
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <LoopForever+0x1c>)
 movs r3, #0
 8000f88:	2300      	movs	r3, #0
 b LoopCopyCcmInit
 8000f8a:	e002      	b.n	8000f92 <LoopCopyCcmInit>

08000f8c <CopyCcmInit>:
CopyCcmInit:
 ldr r4, [r2, r3]
 8000f8c:	58d4      	ldr	r4, [r2, r3]
 str r4, [r0, r3]
 8000f8e:	50c4      	str	r4, [r0, r3]
 adds r3, r3, #4
 8000f90:	3304      	adds	r3, #4

08000f92 <LoopCopyCcmInit>:
LoopCopyCcmInit:
 adds r4, r0, r3
 8000f92:	18c4      	adds	r4, r0, r3
 cmp r4, r1
 8000f94:	428c      	cmp	r4, r1
 bcc CopyCcmInit
 8000f96:	d3f9      	bcc.n	8000f8c <CopyCcmInit>
/* End of copy to CCMRAM */

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopForever+0x20>)
  ldr r4, =_ebss
 8000f9a:	4c0e      	ldr	r4, [pc, #56]	; (8000fd4 <LoopForever+0x24>)
  movs r3, #0
 8000f9c:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9e:	e001      	b.n	8000fa4 <LoopFillZerobss>

08000fa0 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa2:	3204      	adds	r2, #4

08000fa4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa4:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa6:	d3fb      	bcc.n	8000fa0 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa8:	f002 fa22 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fac:	f7ff fdba 	bl	8000b24 <main>

08000fb0 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb0:	e7fe      	b.n	8000fb0 <LoopForever>
 8000fb2:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fc0:	080034bc 	.word	0x080034bc
 ldr r0, =_sccmram
 8000fc4:	10000000 	.word	0x10000000
 ldr r1, =_eccmram
 8000fc8:	10000000 	.word	0x10000000
 ldr r2, =_siccmram
 8000fcc:	10000000 	.word	0x10000000
  ldr r2, =_sbss
 8000fd0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fd4:	20000054 	.word	0x20000054

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f94b 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff ff1e 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f963 	bl	80012f2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f92b 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004
 8001060:	2000000c 	.word	0x2000000c
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000050 	.word	0x20000050

08001090 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;  
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000050 	.word	0x20000050

080010a8 <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_SuspendTick+0x1c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_SuspendTick+0x1c>)
 80010b2:	f023 0302 	bic.w	r3, r3, #2
 80010b6:	6013      	str	r3, [r2, #0]
                                                   
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_ResumeTick+0x1c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_ResumeTick+0x1c>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	6013      	str	r3, [r2, #0]
  
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff3e 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff31 	bl	800114c <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e154      	b.n	80015c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8146 	beq.w	80015c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80a0 	beq.w	80015c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_GPIO_Init+0x2d8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x2d8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x2d8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001498:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c2:	d019      	beq.n	80014f8 <HAL_GPIO_Init+0x1ec>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a49      	ldr	r2, [pc, #292]	; (80015ec <HAL_GPIO_Init+0x2e0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d013      	beq.n	80014f4 <HAL_GPIO_Init+0x1e8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_GPIO_Init+0x2e4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <HAL_GPIO_Init+0x2e8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1e0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_GPIO_Init+0x2ec>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1dc>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014e8:	2305      	movs	r3, #5
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153c:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001566:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aea3 	bne.w	800131c <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48001000 	.word	0x48001000
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_PWR_EnterSTOPMode+0x60>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f023 0303 	bic.w	r3, r3, #3
 800161c:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_PWR_EnterSTOPMode+0x60>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_PWR_EnterSTOPMode+0x64>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_PWR_EnterSTOPMode+0x64>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6113      	str	r3, [r2, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_PWR_EnterSTOPMode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800163e:	bf30      	wfi
 8001640:	e002      	b.n	8001648 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001642:	bf40      	sev
    __WFE();
 8001644:	bf20      	wfe
    __WFE();
 8001646:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_PWR_EnterSTOPMode+0x64>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_PWR_EnterSTOPMode+0x64>)
 800164e:	f023 0304 	bic.w	r3, r3, #4
 8001652:	6113      	str	r3, [r2, #16]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40007000 	.word	0x40007000
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800166e:	af00      	add	r7, sp, #0
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001678:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	f001 b823 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 817d 	beq.w	800199e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016a4:	4bbc      	ldr	r3, [pc, #752]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4bb9      	ldr	r3, [pc, #740]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d15c      	bne.n	8001776 <HAL_RCC_OscConfig+0x10e>
 80016bc:	4bb6      	ldr	r3, [pc, #728]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d155      	bne.n	8001776 <HAL_RCC_OscConfig+0x10e>
 80016ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80016de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x94>
 80016f6:	4ba8      	ldr	r3, [pc, #672]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e015      	b.n	8001728 <HAL_RCC_OscConfig+0xc0>
 80016fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001700:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001718:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001724:	4b9c      	ldr	r3, [pc, #624]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001730:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800173c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 811f 	beq.w	800199c <HAL_RCC_OscConfig+0x334>
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8116 	bne.w	800199c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	f000 bfaf 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x12e>
 8001788:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e036      	b.n	8001804 <HAL_RCC_OscConfig+0x19c>
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x158>
 80017a6:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7b      	ldr	r2, [pc, #492]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b79      	ldr	r3, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a78      	ldr	r2, [pc, #480]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e021      	b.n	8001804 <HAL_RCC_OscConfig+0x19c>
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x184>
 80017d2:	4b71      	ldr	r3, [pc, #452]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a70      	ldr	r2, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6d      	ldr	r2, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x19c>
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a69      	ldr	r2, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001804:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f023 020f 	bic.w	r2, r3, #15
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	495f      	ldr	r1, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800181a:	4313      	orrs	r3, r2
 800181c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d059      	beq.n	80018e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fc2f 	bl	8001090 <HAL_GetTick>
 8001832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fc2a 	bl	8001090 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d902      	bls.n	800184e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	f000 bf43 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 800184e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001852:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001862:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0x218>
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x244>
 8001880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001884:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001898:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800189c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018b8:	fa92 f2a2 	rbit	r2, r2
 80018bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ab      	beq.n	8001838 <HAL_RCC_OscConfig+0x1d0>
 80018e0:	e05d      	b.n	800199e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fbd5 	bl	8001090 <HAL_GetTick>
 80018e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fbd0 	bl	8001090 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	; 0x64
 80018fa:	d902      	bls.n	8001902 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f000 bee9 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 8001902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001906:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001916:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0x2cc>
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e015      	b.n	8001960 <HAL_RCC_OscConfig+0x2f8>
 8001934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001938:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001950:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001964:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001968:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800196c:	fa92 f2a2 	rbit	r2, r2
 8001970:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001974:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ab      	bne.n	80018ec <HAL_RCC_OscConfig+0x284>
 8001994:	e003      	b.n	800199e <HAL_RCC_OscConfig+0x336>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 817d 	beq.w	8001cae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019b4:	4ba6      	ldr	r3, [pc, #664]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019c0:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d172      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x44a>
 80019cc:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d16c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x44a>
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3a0>
 8001a02:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c8>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2202      	movs	r2, #2
 8001a32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a3a:	fa92 f2a2 	rbit	r2, r2
 8001a3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a46:	fab2 f282 	clz	r2, r2
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f042 0220 	orr.w	r2, r2, #32
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f002 021f 	and.w	r2, r2, #31
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x410>
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 be2e 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	21f8      	movs	r1, #248	; 0xf8
 8001a8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a96:	fa91 f1a1 	rbit	r1, r1
 8001a9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001aa2:	fab1 f181 	clz	r1, r1
 8001aa6:	b2c9      	uxtb	r1, r1
 8001aa8:	408b      	lsls	r3, r1
 8001aaa:	4969      	ldr	r1, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab0:	e0fd      	b.n	8001cae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8088 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x56c>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ad6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	461a      	mov	r2, r3
 8001aec:	2301      	movs	r3, #1
 8001aee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff face 	bl	8001090 <HAL_GetTick>
 8001af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fac9 	bl	8001090 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d902      	bls.n	8001b10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	f000 bde2 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4d8>
 8001b3a:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e013      	b.n	8001b68 <HAL_RCC_OscConfig+0x500>
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b72:	fa92 f2a2 	rbit	r2, r2
 8001b76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f002 021f 	and.w	r2, r2, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0af      	beq.n	8001afa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	21f8      	movs	r1, #248	; 0xf8
 8001bb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bb8:	fa91 f1a1 	rbit	r1, r1
 8001bbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bc4:	fab1 f181 	clz	r1, r1
 8001bc8:	b2c9      	uxtb	r1, r1
 8001bca:	408b      	lsls	r3, r1
 8001bcc:	4920      	ldr	r1, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
 8001bd2:	e06c      	b.n	8001cae <HAL_RCC_OscConfig+0x646>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fa46 	bl	8001090 <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fa41 	bl	8001090 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d902      	bls.n	8001c20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	f000 bd5a 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d104      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5ec>
 8001c4a:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <HAL_RCC_OscConfig+0x5e8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e015      	b.n	8001c7c <HAL_RCC_OscConfig+0x614>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c78:	4bc8      	ldr	r3, [pc, #800]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c86:	fa92 f2a2 	rbit	r2, r2
 8001c8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ad      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8110 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d079      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x760>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <HAL_RCC_OscConfig+0x938>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f9c7 	bl	8001090 <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff f9c2 	bl	8001090 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d902      	bls.n	8001d1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f000 bcdb 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d38:	2202      	movs	r2, #2
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d84:	2102      	movs	r1, #2
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f1a3 	rbit	r1, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d9e:	6019      	str	r1, [r3, #0]
  return result;
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0a0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x6a0>
 8001dc6:	e08d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x87c>
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dea:	601a      	str	r2, [r3, #0]
  return result;
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001df4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x938>)
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f941 	bl	8001090 <HAL_GetTick>
 8001e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff f93c 	bl	8001090 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f000 bc55 	b.w	80026d4 <HAL_RCC_OscConfig+0x106c>
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e32:	2202      	movs	r2, #2
 8001e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e56:	2202      	movs	r2, #2
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	6019      	str	r1, [r3, #0]
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f1a3 	rbit	r1, r3
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ebc:	6019      	str	r1, [r3, #0]
  return result;
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d197      	bne.n	8001e14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 81a1 	beq.w	800223c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	61d3      	str	r3, [r2, #28]
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_OscConfig+0x93c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_RCC_OscConfig+0x93c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_RCC_OscConfig+0x93c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f89d 	bl	8001090 <HAL_GetTick>
 8001f56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7ff f898 	bl	8001090 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e3b1      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x93c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x940>
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a02      	ldr	r2, [pc, #8]	; (8001f9c <HAL_RCC_OscConfig+0x934>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e03c      	b.n	8002014 <HAL_RCC_OscConfig+0x9ac>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	10908120 	.word	0x10908120
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x96a>
 8001fb8:	4bc1      	ldr	r3, [pc, #772]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4ac0      	ldr	r2, [pc, #768]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4bbe      	ldr	r3, [pc, #760]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4abd      	ldr	r2, [pc, #756]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fca:	f023 0304 	bic.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e020      	b.n	8002014 <HAL_RCC_OscConfig+0x9ac>
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x994>
 8001fe2:	4bb7      	ldr	r3, [pc, #732]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4ab6      	ldr	r2, [pc, #728]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4bb4      	ldr	r3, [pc, #720]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4ab3      	ldr	r2, [pc, #716]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x9ac>
 8001ffc:	4bb0      	ldr	r3, [pc, #704]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4aaf      	ldr	r2, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	4bad      	ldr	r3, [pc, #692]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4aac      	ldr	r2, [pc, #688]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8081 	beq.w	8002128 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff f833 	bl	8001090 <HAL_GetTick>
 800202a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f82e 	bl	8001090 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e345      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002050:	2202      	movs	r2, #2
 8002052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002066:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002074:	2202      	movs	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800208e:	601a      	str	r2, [r3, #0]
  return result;
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002098:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0xa4c>
 80020ae:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	e013      	b.n	80020dc <HAL_RCC_OscConfig+0xa74>
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020e4:	2102      	movs	r1, #2
 80020e6:	6011      	str	r1, [r2, #0]
 80020e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	fa92 f1a2 	rbit	r1, r2
 80020f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020fe:	6011      	str	r1, [r2, #0]
  return result;
 8002100:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002104:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	fab2 f282 	clz	r2, r2
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f002 021f 	and.w	r2, r2, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d084      	beq.n	8002030 <HAL_RCC_OscConfig+0x9c8>
 8002126:	e07f      	b.n	8002228 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe ffb2 	bl	8001090 <HAL_GetTick>
 800212c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe ffad 	bl	8001090 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e2c4      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002152:	2202      	movs	r2, #2
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002190:	601a      	str	r2, [r3, #0]
  return result;
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800219a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0xb4e>
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	e013      	b.n	80021de <HAL_RCC_OscConfig+0xb76>
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021e6:	2102      	movs	r1, #2
 80021e8:	6011      	str	r1, [r2, #0]
 80021ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	fa92 f1a2 	rbit	r1, r2
 80021f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002200:	6011      	str	r1, [r2, #0]
  return result;
 8002202:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002206:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d184      	bne.n	8002132 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002228:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8242 	beq.w	80026d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCC_OscConfig+0xc58>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	f000 8213 	beq.w	8002682 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 8162 	bne.w	8002532 <HAL_RCC_OscConfig+0xeca>
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002292:	601a      	str	r2, [r3, #0]
  return result;
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800229c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	461a      	mov	r2, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe feec 	bl	8001090 <HAL_GetTick>
 80022b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	e00c      	b.n	80022d8 <HAL_RCC_OscConfig+0xc70>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fee4 	bl	8001090 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1fd      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022fc:	601a      	str	r2, [r3, #0]
  return result;
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002306:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_OscConfig+0xcba>
 800231c:	4bb0      	ldr	r3, [pc, #704]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e027      	b.n	8002372 <HAL_RCC_OscConfig+0xd0a>
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800232a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002376:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800237a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237e:	6011      	str	r1, [r2, #0]
 8002380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002384:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	fa92 f1a2 	rbit	r1, r2
 800238e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002392:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002396:	6011      	str	r1, [r2, #0]
  return result;
 8002398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	fab2 f282 	clz	r2, r2
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f042 0220 	orr.w	r2, r2, #32
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f002 021f 	and.w	r2, r2, #31
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d182      	bne.n	80022c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	430b      	orrs	r3, r1
 80023e0:	497f      	ldr	r1, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002414:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	461a      	mov	r2, r3
 8002428:	2301      	movs	r3, #1
 800242a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fe30 	bl	8001090 <HAL_GetTick>
 8002430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002434:	e009      	b.n	800244a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7fe fe2b 	bl	8001090 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e144      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800246e:	601a      	str	r2, [r3, #0]
  return result;
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0xe2c>
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e027      	b.n	80024e4 <HAL_RCC_OscConfig+0xe7c>
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800249c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f0:	6011      	str	r1, [r2, #0]
 80024f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	fa92 f1a2 	rbit	r1, r2
 8002500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002504:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002508:	6011      	str	r1, [r2, #0]
  return result;
 800250a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d082      	beq.n	8002436 <HAL_RCC_OscConfig+0xdce>
 8002530:	e0cf      	b.n	80026d2 <HAL_RCC_OscConfig+0x106a>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800253a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002556:	601a      	str	r2, [r3, #0]
  return result;
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002560:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd8a 	bl	8001090 <HAL_GetTick>
 800257c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e009      	b.n	8002596 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fd85 	bl	8001090 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e09e      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800259e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fa93 f2a3 	rbit	r2, r3
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025ba:	601a      	str	r2, [r3, #0]
  return result;
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d104      	bne.n	80025e4 <HAL_RCC_OscConfig+0xf7c>
 80025da:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <HAL_RCC_OscConfig+0xf78>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e029      	b.n	8002634 <HAL_RCC_OscConfig+0xfcc>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x1078>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002638:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800263c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002640:	6011      	str	r1, [r2, #0]
 8002642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002646:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002654:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d180      	bne.n	8002582 <HAL_RCC_OscConfig+0xf1a>
 8002680:	e027      	b.n	80026d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e01e      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_OscConfig+0x1078>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800269e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09e      	sub	sp, #120	; 0x78
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e162      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b90      	ldr	r3, [pc, #576]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b8d      	ldr	r3, [pc, #564]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	498b      	ldr	r1, [pc, #556]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e14a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	497f      	ldr	r1, [pc, #508]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80dc 	beq.w	8002910 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d13c      	bne.n	80027da <HAL_RCC_ClockConfig+0xf6>
 8002760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002764:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_ClockConfig+0xa6>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e00f      	b.n	80027aa <HAL_RCC_ClockConfig+0xc6>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	663b      	str	r3, [r7, #96]	; 0x60
 800279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80027b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b2:	fa92 f2a2 	rbit	r2, r2
 80027b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d17b      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0f3      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d13c      	bne.n	800285c <HAL_RCC_ClockConfig+0x178>
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_ClockConfig+0x128>
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_RCC_ClockConfig+0x148>
 800280c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002830:	63ba      	str	r2, [r7, #56]	; 0x38
 8002832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b2      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 800285c:	2302      	movs	r3, #2
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_ClockConfig+0x1a0>
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e00d      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1bc>
 8002884:	2302      	movs	r3, #2
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	61ba      	str	r2, [r7, #24]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	617a      	str	r2, [r7, #20]
  return result;
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	fab2 f282 	clz	r2, r2
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f002 021f 	and.w	r2, r2, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e079      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fbd6 	bl	8001090 <HAL_GetTick>
 80028e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fbd2 	bl	8001090 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e061      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d214      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e040      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	491a      	ldr	r1, [pc, #104]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002986:	f000 f829 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002994:	22f0      	movs	r2, #240	; 0xf0
 8002996:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	60fa      	str	r2, [r7, #12]
  return result;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	40d3      	lsrs	r3, r2
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x2ec>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	fa21 f303 	lsr.w	r3, r1, r3
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x2f0>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_ClockConfig+0x2f4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fb24 	bl	8001008 <HAL_InitTick>
  
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3778      	adds	r7, #120	; 0x78
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08003484 	.word	0x08003484
 80029d4:	20000004 	.word	0x20000004
 80029d8:	20000008 	.word	0x20000008

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x30>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0a:	e03c      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0e:	623b      	str	r3, [r7, #32]
      break;
 8002a10:	e03c      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	607a      	str	r2, [r7, #4]
  return result;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	220f      	movs	r2, #15
 8002a40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	60fa      	str	r2, [r7, #12]
  return result;
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	40d3      	lsrs	r3, r2
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	e004      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a88:	623b      	str	r3, [r7, #32]
      break;
 8002a8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	372c      	adds	r7, #44	; 0x2c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	08003494 	.word	0x08003494
 8002aa8:	080034a4 	.word	0x080034a4
 8002aac:	003d0900 	.word	0x003d0900

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8002ad6:	4b42      	ldr	r3, [pc, #264]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ae2:	d104      	bne.n	8002aee <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	e00e      	b.n	8002b0c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8002aee:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afa:	d104      	bne.n	8002b06 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e002      	b.n	8002b0c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  }
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
#endif

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d103      	bne.n	8002b2c <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8002b32:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002b3a:	22f8      	movs	r2, #248	; 0xf8
 8002b3c:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	60ba      	str	r2, [r7, #8]
  return result;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	fa23 f202 	lsr.w	r2, r3, r2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	615a      	str	r2, [r3, #20]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d103      	bne.n	8002b6a <HAL_RCC_GetOscConfig+0xa2>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2205      	movs	r2, #5
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	e00c      	b.n	8002b84 <HAL_RCC_GetOscConfig+0xbc>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d103      	bne.n	8002b7e <HAL_RCC_GetOscConfig+0xb6>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e002      	b.n	8002b84 <HAL_RCC_GetOscConfig+0xbc>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d103      	bne.n	8002b98 <HAL_RCC_GetOscConfig+0xd0>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetOscConfig+0xd6>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002baa:	d103      	bne.n	8002bb4 <HAL_RCC_GetOscConfig+0xec>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	61da      	str	r2, [r3, #28]
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetOscConfig+0xf2>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetOscConfig+0x118>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b092      	sub	sp, #72	; 0x48
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d4 	beq.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fa21 	bl	8001090 <HAL_GetTick>
 8002c4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe fa1d 	bl	8001090 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e169      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8084 	beq.w	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d07c      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f9cd 	bl	8001090 <HAL_GetTick>
 8002cf6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f9c9 	bl	8001090 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e113      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
  return result;
 8002d28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d3e:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	e00d      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	10908100 	.word	0x10908100
 8002d50:	2302      	movs	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2202      	movs	r2, #2
 8002d62:	613a      	str	r2, [r7, #16]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0b7      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	496a      	ldr	r1, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dbc:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f023 0203 	bic.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	495d      	ldr	r1, [pc, #372]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4956      	ldr	r1, [pc, #344]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	494e      	ldr	r1, [pc, #312]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4947      	ldr	r1, [pc, #284]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	493f      	ldr	r1, [pc, #252]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f023 0220 	bic.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4938      	ldr	r1, [pc, #224]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4930      	ldr	r1, [pc, #192]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4929      	ldr	r1, [pc, #164]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4921      	ldr	r1, [pc, #132]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	490b      	ldr	r1, [pc, #44]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3748      	adds	r7, #72	; 0x48
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e073      	b.n	8003042 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7f5b      	ldrb	r3, [r3, #29]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd ff88 	bl	8000e80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d055      	beq.n	8003030 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	22ca      	movs	r2, #202	; 0xca
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2253      	movs	r2, #83	; 0x53
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f87f 	bl	8003098 <RTC_EnterInitMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d12c      	bne.n	8002ffe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f886 	bl	8003106 <RTC_ExitInitMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d110      	bne.n	8003026 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
 800302e:	e001      	b.n	8003034 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RTC_WaitForSynchro+0x48>)
 800305e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003060:	f7fe f816 	bl	8001090 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003066:	e009      	b.n	800307c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003068:	f7fe f812 	bl	8001090 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003076:	d901      	bls.n	800307c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e007      	b.n	800308c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ee      	beq.n	8003068 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0001ff5f 	.word	0x0001ff5f

08003098 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d122      	bne.n	80030fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030c6:	f7fd ffe3 	bl	8001090 <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030cc:	e00c      	b.n	80030e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030ce:	f7fd ffdf 	bl	8001090 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030dc:	d904      	bls.n	80030e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <RTC_EnterInitMode+0x64>
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d1e8      	bne.n	80030ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff8b 	bl	800304c <HAL_RTC_WaitForSynchro>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800315c:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0adb      	lsrs	r3, r3, #11
 8003168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	7f1b      	ldrb	r3, [r3, #28]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800317a:	2302      	movs	r3, #2
 800317c:	e09d      	b.n	80032ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2202      	movs	r2, #2
 8003188:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	22ca      	movs	r2, #202	; 0xca
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2253      	movs	r2, #83	; 0x53
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d018      	beq.n	80031da <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2203      	movs	r2, #3
 80031c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e076      	b.n	80032ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e6      	bne.n	80031a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031fa:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a32      	ldr	r2, [pc, #200]	; (80032cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3b01      	subs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e041      	b.n	80032ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0e6      	beq.n	8003212 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0207 	bic.w	r2, r2, #7
 8003252:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003276:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800327e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003282:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003292:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000004 	.word	0x20000004
 80032cc:	10624dd3 	.word	0x10624dd3
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7f1b      	ldrb	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e047      	b.n	800337c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	22ca      	movs	r2, #202	; 0xca
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2253      	movs	r2, #83	; 0x53
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003316:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003326:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003328:	f7fd feb2 	bl	8001090 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800332e:	e013      	b.n	8003358 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003330:	f7fd feae 	bl	8001090 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333e:	d90b      	bls.n	8003358 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2203      	movs	r2, #3
 800334c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e011      	b.n	800337c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0e4      	beq.n	8003330 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800338e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003392:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033b2:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f809 	bl	80033cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	775a      	strb	r2, [r3, #29]
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <memset>:
 80033e0:	4402      	add	r2, r0
 80033e2:	4603      	mov	r3, r0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	f803 1b01 	strb.w	r1, [r3], #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4d0d      	ldr	r5, [pc, #52]	; (8003428 <__libc_init_array+0x38>)
 80033f4:	4c0d      	ldr	r4, [pc, #52]	; (800342c <__libc_init_array+0x3c>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	2600      	movs	r6, #0
 80033fc:	42a6      	cmp	r6, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	4d0b      	ldr	r5, [pc, #44]	; (8003430 <__libc_init_array+0x40>)
 8003402:	4c0c      	ldr	r4, [pc, #48]	; (8003434 <__libc_init_array+0x44>)
 8003404:	f000 f818 	bl	8003438 <_init>
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	2600      	movs	r6, #0
 800340e:	42a6      	cmp	r6, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f855 3b04 	ldr.w	r3, [r5], #4
 8003418:	4798      	blx	r3
 800341a:	3601      	adds	r6, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003422:	4798      	blx	r3
 8003424:	3601      	adds	r6, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	080034b4 	.word	0x080034b4
 800342c:	080034b4 	.word	0x080034b4
 8003430:	080034b4 	.word	0x080034b4
 8003434:	080034b8 	.word	0x080034b8

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
