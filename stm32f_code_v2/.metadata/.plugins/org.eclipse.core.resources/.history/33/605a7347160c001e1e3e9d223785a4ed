
pointer_chase_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002038  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  00030fe0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff8  08006ff8  00030fe0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff8  08006ff8  00030fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000040  10000000  10000000  00030000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .ccmramdata   00000fa0  10000040  10000040  00030040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000134  20000070  20000070  00040070  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200001a4  200001a4  00040070  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010c3e  00000000  00000000  00031010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000210e  00000000  00000000  00041c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb0  00000000  00000000  00043d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000dd8  00000000  00000000  00044c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e19b  00000000  00000000  000459e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011f7c  00000000  00000000  00063b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb45f  00000000  00000000  00075aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00130f5e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004314  00000000  00000000  00130fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fa0 	.word	0x08004fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004fa0 	.word	0x08004fa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <pointer_chase_flash>:
volatile uint32_t overflow_cnt;
volatile double execution_time;
volatile uint32_t tim_cnt;


void pointer_chase_flash( void ** p0){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

    void **this_pp = p0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
    for(int i = 0;i<1000;i++){
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	e00a      	b.n	8000a84 <pointer_chase_flash+0x28>
	  while(this_pp){
      this_pp = *this_pp;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
	  while(this_pp){
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f9      	bne.n	8000a6e <pointer_chase_flash+0x12>
	  }
    this_pp = p0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]
    for(int i = 0;i<1000;i++){
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a8a:	dbf3      	blt.n	8000a74 <pointer_chase_flash+0x18>
  };

}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <Sleep>:
  &pointers[980], &pointers[981], &pointers[982], &pointers[983], &pointers[984],
  &pointers[985], &pointers[986], &pointers[987], &pointers[988], &pointers[989],
  &pointers[990], &pointers[991], &pointers[992], &pointers[993], &pointers[994],
  &pointers[995], &pointers[996], &pointers[997], &pointers[998], &pointers[999], NULL};
void Sleep(int time)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_SuspendTick();
 8000aa4:	f000 fc7a 	bl	800139c <HAL_SuspendTick>
  uint32_t counter = time*2;/*divide by (16/32)*/
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	68f9      	ldr	r1, [r7, #12]
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <Sleep+0x38>)
 8000ab4:	f002 fc9c 	bl	80033f0 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* Enter sleep mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 ff1a 	bl	80018f4 <HAL_PWR_EnterSLEEPMode>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <Sleep+0x38>)
 8000ac2:	f002 fd57 	bl	8003574 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 8000ac6:	f000 fc79 	bl	80013bc <HAL_ResumeTick>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000008c 	.word	0x2000008c

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int time1 = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  int time2 = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fbf3 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f95d 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 fa6b 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000af2:	f000 fa39 	bl	8000f68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000af6:	f000 f9e9 	bl	8000ecc <MX_TIM2_Init>
  MX_RTC_Init();
 8000afa:	f000 f9b7 	bl	8000e6c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  TIM2->CR1&=~TIM_CR1_DIR;

  HAL_TIM_Base_Start(&htim2);
 8000afe:	489e      	ldr	r0, [pc, #632]	; (8000d78 <main+0x2a0>)
 8000b00:	f002 fe16 	bl	8003730 <HAL_TIM_Base_Start>
////////////////////////////////////////////////////////////////////start counting time
  uint8_t msg[60] = {"\0"};
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2238      	movs	r2, #56	; 0x38
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fdd0 	bl	80046b4 <memset>
  uint32_t Clk = HAL_RCC_GetHCLKFreq();
 8000b14:	f002 f94a 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8000b18:	6438      	str	r0, [r7, #64]	; 0x40
  int cpu_frequency = Clk/1000000;
 8000b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b1c:	4a97      	ldr	r2, [pc, #604]	; (8000d7c <main+0x2a4>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sprintf(msg, "clk : %d\n\r",Clk);
 8000b26:	463b      	mov	r3, r7
 8000b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b2a:	4995      	ldr	r1, [pc, #596]	; (8000d80 <main+0x2a8>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fdc9 	bl	80046c4 <siprintf>
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xFFFF);
 8000b32:	4639      	mov	r1, r7
 8000b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b38:	223c      	movs	r2, #60	; 0x3c
 8000b3a:	4892      	ldr	r0, [pc, #584]	; (8000d84 <main+0x2ac>)
 8000b3c:	f003 f91c 	bl	8003d78 <HAL_UART_Transmit>
  Sleep(200);
 8000b40:	20c8      	movs	r0, #200	; 0xc8
 8000b42:	f7ff ffab 	bl	8000a9c <Sleep>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pointer_chase_flash(&(pointers[0]));
 8000b46:	4890      	ldr	r0, [pc, #576]	; (8000d88 <main+0x2b0>)
 8000b48:	f7ff ff88 	bl	8000a5c <pointer_chase_flash>
  pointer_chase_flash(&(pointers_ccm[0]));
 8000b4c:	488f      	ldr	r0, [pc, #572]	; (8000d8c <main+0x2b4>)
 8000b4e:	f7ff ff85 	bl	8000a5c <pointer_chase_flash>
  Sleep(200);
 8000b52:	20c8      	movs	r0, #200	; 0xc8
 8000b54:	f7ff ffa2 	bl	8000a9c <Sleep>
  int  i = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (i<2)
 8000b5c:	e102      	b.n	8000d64 <main+0x28c>
  {
	  //code flash data flash
	  time1 = TIM2->CNT;
 8000b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
	  pointer_chase_flash(&(pointers[0]));
 8000b66:	4888      	ldr	r0, [pc, #544]	; (8000d88 <main+0x2b0>)
 8000b68:	f7ff ff78 	bl	8000a5c <pointer_chase_flash>
	  time2 = TIM2->CNT;
 8000b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44

	  tim_cnt = time2 -time1;
 8000b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b84      	ldr	r3, [pc, #528]	; (8000d90 <main+0x2b8>)
 8000b7e:	601a      	str	r2, [r3, #0]
	  execution_time =(double)tim_cnt;
 8000b80:	4b83      	ldr	r3, [pc, #524]	; (8000d90 <main+0x2b8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fcb5 	bl	80004f4 <__aeabi_ui2d>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	4981      	ldr	r1, [pc, #516]	; (8000d94 <main+0x2bc>)
 8000b90:	e9c1 2300 	strd	r2, r3, [r1]
	  Sleep(200);
 8000b94:	20c8      	movs	r0, #200	; 0xc8
 8000b96:	f7ff ff81 	bl	8000a9c <Sleep>
	  sprintf(msg,"\n\r%dth: PointerChase cf df:\n\r%d", i,(int)(execution_time/cpu_frequency));
 8000b9a:	4b7e      	ldr	r3, [pc, #504]	; (8000d94 <main+0x2bc>)
 8000b9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ba0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ba2:	f7ff fcb7 	bl	8000514 <__aeabi_i2d>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4620      	mov	r0, r4
 8000bac:	4629      	mov	r1, r5
 8000bae:	f7ff fe45 	bl	800083c <__aeabi_ddiv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff ff27 	bl	8000a0c <__aeabi_d2iz>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bc4:	4974      	ldr	r1, [pc, #464]	; (8000d98 <main+0x2c0>)
 8000bc6:	f003 fd7d 	bl	80046c4 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8000bca:	4639      	mov	r1, r7
 8000bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd0:	223c      	movs	r2, #60	; 0x3c
 8000bd2:	486c      	ldr	r0, [pc, #432]	; (8000d84 <main+0x2ac>)
 8000bd4:	f003 f8d0 	bl	8003d78 <HAL_UART_Transmit>
	  Sleep(200);
 8000bd8:	20c8      	movs	r0, #200	; 0xc8
 8000bda:	f7ff ff5f 	bl	8000a9c <Sleep>
	  ////////////////////////////////////////////////////////////////////
	  //code ccm data flash
	  time1 = TIM2->CNT;
 8000bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
	  pointer_chase_ccm(&(pointers[0]));
 8000be6:	4868      	ldr	r0, [pc, #416]	; (8000d88 <main+0x2b0>)
 8000be8:	f004 f9e6 	bl	8004fb8 <__pointer_chase_ccm_veneer>
	  time2 = TIM2->CNT;
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44

	  tim_cnt = time2 -time1;
 8000bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b64      	ldr	r3, [pc, #400]	; (8000d90 <main+0x2b8>)
 8000bfe:	601a      	str	r2, [r3, #0]
	  execution_time =(double)tim_cnt;
 8000c00:	4b63      	ldr	r3, [pc, #396]	; (8000d90 <main+0x2b8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fc75 	bl	80004f4 <__aeabi_ui2d>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4961      	ldr	r1, [pc, #388]	; (8000d94 <main+0x2bc>)
 8000c10:	e9c1 2300 	strd	r2, r3, [r1]
	  Sleep(200);
 8000c14:	20c8      	movs	r0, #200	; 0xc8
 8000c16:	f7ff ff41 	bl	8000a9c <Sleep>
	  sprintf(msg,"\n\r%dth: PointerChase cc df:\n\r%d", i,(int)(execution_time/cpu_frequency));
 8000c1a:	4b5e      	ldr	r3, [pc, #376]	; (8000d94 <main+0x2bc>)
 8000c1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c22:	f7ff fc77 	bl	8000514 <__aeabi_i2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	f7ff fe05 	bl	800083c <__aeabi_ddiv>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fee7 	bl	8000a0c <__aeabi_d2iz>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4638      	mov	r0, r7
 8000c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c44:	4955      	ldr	r1, [pc, #340]	; (8000d9c <main+0x2c4>)
 8000c46:	f003 fd3d 	bl	80046c4 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c50:	223c      	movs	r2, #60	; 0x3c
 8000c52:	484c      	ldr	r0, [pc, #304]	; (8000d84 <main+0x2ac>)
 8000c54:	f003 f890 	bl	8003d78 <HAL_UART_Transmit>
	  Sleep(200);
 8000c58:	20c8      	movs	r0, #200	; 0xc8
 8000c5a:	f7ff ff1f 	bl	8000a9c <Sleep>
	  ////////////////////////////////////////////////////////////////////
	  //code flash data ccm
	  time1 = TIM2->CNT;
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  pointer_chase_flash(&(pointers_ccm[0]));
 8000c66:	4849      	ldr	r0, [pc, #292]	; (8000d8c <main+0x2b4>)
 8000c68:	f7ff fef8 	bl	8000a5c <pointer_chase_flash>
	  time2 = TIM2->CNT;
 8000c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44

	  tim_cnt = time2 -time1;
 8000c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <main+0x2b8>)
 8000c7e:	601a      	str	r2, [r3, #0]
	  execution_time =(double)tim_cnt;
 8000c80:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <main+0x2b8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fc35 	bl	80004f4 <__aeabi_ui2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4941      	ldr	r1, [pc, #260]	; (8000d94 <main+0x2bc>)
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
	  Sleep(200);
 8000c94:	20c8      	movs	r0, #200	; 0xc8
 8000c96:	f7ff ff01 	bl	8000a9c <Sleep>
	  sprintf(msg,"\n\r%dth: PointerChase cf dc:\n\r%d", i,(int)(execution_time/cpu_frequency));
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <main+0x2bc>)
 8000c9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ca0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ca2:	f7ff fc37 	bl	8000514 <__aeabi_i2d>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4620      	mov	r0, r4
 8000cac:	4629      	mov	r1, r5
 8000cae:	f7ff fdc5 	bl	800083c <__aeabi_ddiv>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f7ff fea7 	bl	8000a0c <__aeabi_d2iz>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cc4:	4936      	ldr	r1, [pc, #216]	; (8000da0 <main+0x2c8>)
 8000cc6:	f003 fcfd 	bl	80046c4 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd0:	223c      	movs	r2, #60	; 0x3c
 8000cd2:	482c      	ldr	r0, [pc, #176]	; (8000d84 <main+0x2ac>)
 8000cd4:	f003 f850 	bl	8003d78 <HAL_UART_Transmit>
	  Sleep(200);
 8000cd8:	20c8      	movs	r0, #200	; 0xc8
 8000cda:	f7ff fedf 	bl	8000a9c <Sleep>
	  ////////////////////////////////////////////////////////////////////

	  time1 = TIM2->CNT;
 8000cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
	  pointer_chase_ccm(&(pointers_ccm[0]));
 8000ce6:	4829      	ldr	r0, [pc, #164]	; (8000d8c <main+0x2b4>)
 8000ce8:	f004 f966 	bl	8004fb8 <__pointer_chase_ccm_veneer>
	  time2 = TIM2->CNT;
 8000cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44

	  tim_cnt = time2 -time1;
 8000cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <main+0x2b8>)
 8000cfe:	601a      	str	r2, [r3, #0]
	  execution_time =(double)tim_cnt;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <main+0x2b8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fbf5 	bl	80004f4 <__aeabi_ui2d>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4921      	ldr	r1, [pc, #132]	; (8000d94 <main+0x2bc>)
 8000d10:	e9c1 2300 	strd	r2, r3, [r1]
	  Sleep(200);
 8000d14:	20c8      	movs	r0, #200	; 0xc8
 8000d16:	f7ff fec1 	bl	8000a9c <Sleep>
	  sprintf(msg,"\n\r%dth: PointerChase cc dc:\n\r%d", i,(int)(execution_time/cpu_frequency));
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <main+0x2bc>)
 8000d1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d22:	f7ff fbf7 	bl	8000514 <__aeabi_i2d>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	f7ff fd85 	bl	800083c <__aeabi_ddiv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fe67 	bl	8000a0c <__aeabi_d2iz>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4638      	mov	r0, r7
 8000d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d44:	4917      	ldr	r1, [pc, #92]	; (8000da4 <main+0x2cc>)
 8000d46:	f003 fcbd 	bl	80046c4 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d50:	223c      	movs	r2, #60	; 0x3c
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <main+0x2ac>)
 8000d54:	f003 f810 	bl	8003d78 <HAL_UART_Transmit>
	  Sleep(200);
 8000d58:	20c8      	movs	r0, #200	; 0xc8
 8000d5a:	f7ff fe9f 	bl	8000a9c <Sleep>
	  i++;
 8000d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d60:	3301      	adds	r3, #1
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (i<2)
 8000d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	f77f aef9 	ble.w	8000b5e <main+0x86>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  return 0;
 8000d6c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3750      	adds	r7, #80	; 0x50
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bdb0      	pop	{r4, r5, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	08004fc0 	.word	0x08004fc0
 8000d84:	200000f8 	.word	0x200000f8
 8000d88:	0800504c 	.word	0x0800504c
 8000d8c:	10000040 	.word	0x10000040
 8000d90:	20000188 	.word	0x20000188
 8000d94:	20000180 	.word	0x20000180
 8000d98:	08004fcc 	.word	0x08004fcc
 8000d9c:	08004fec 	.word	0x08004fec
 8000da0:	0800500c 	.word	0x0800500c
 8000da4:	0800502c 	.word	0x0800502c

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09e      	sub	sp, #120	; 0x78
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000db2:	2228      	movs	r2, #40	; 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fc7c 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	223c      	movs	r2, #60	; 0x3c
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fc6e 	bl	80046b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dfc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fd92 	bl	800192c <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e0e:	f000 f8ff 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fdba 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f8e9 	bl	8001010 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000e3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000e42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 f817 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000e5c:	f000 f8d8 	bl	8001010 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e60:	f001 ff1e 	bl	8002ca0 <HAL_RCC_EnableCSS>
}
 8000e64:	bf00      	nop
 8000e66:	3778      	adds	r7, #120	; 0x78
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_RTC_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e7e:	227f      	movs	r2, #127	; 0x7f
 8000e80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000e9c:	f002 f9a2 	bl	80031e4 <HAL_RTC_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ea6:	f000 f8b3 	bl	8001010 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_RTC_Init+0x58>)
 8000eb0:	f002 fa9e 	bl	80033f0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000eba:	f000 f8a9 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	40002800 	.word	0x40002800

08000ecc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f14:	f002 fbb4 	bl	8003680 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f1e:	f000 f877 	bl	8001010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f30:	f002 fc60 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f3a:	f000 f869 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f4c:	f002 fe46 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f56:	f000 f85b 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000ac 	.word	0x200000ac

08000f68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <MX_USART1_UART_Init+0x5c>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f74:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fac:	f002 fe96 	bl	8003cdc <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f000 f82b 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000f8 	.word	0x200000f8
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_GPIO_Init+0x44>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <MX_GPIO_Init+0x44>)
 8000fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_GPIO_Init+0x44>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_GPIO_Init+0x44>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <MX_GPIO_Init+0x44>)
 8000fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_GPIO_Init+0x44>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	e7fe      	b.n	8001018 <Error_Handler+0x8>
	...

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_RTC_MspInit+0x50>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d119      	bne.n	80010aa <HAL_RTC_MspInit+0x46>
 8001076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800107a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001084:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_RTC_MspInit+0x54>)
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	461a      	mov	r2, r3
 8001096:	2301      	movs	r3, #1
 8001098:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 fa77 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 fa90 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40002800 	.word	0x40002800
 80010b8:	10908100 	.word	0x10908100

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_TIM_Base_MspInit+0x38>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_TIM_Base_MspInit+0x38>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_TIM_Base_MspInit+0x38>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_UART_MspInit+0x7c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d127      	bne.n	800116a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x80>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0x80>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800114a:	2330      	movs	r3, #48	; 0x30
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800115a:	2307      	movs	r3, #7
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x84>)
 8001166:	f000 fa4b 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40013800 	.word	0x40013800
 8001178:	40021000 	.word	0x40021000
 800117c:	48000800 	.word	0x48000800

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001184:	f001 fe62 	bl	8002e4c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x8>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f8c4 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <RTC_WKUP_IRQHandler+0x10>)
 80011de:	f002 fa21 	bl	8003624 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000008c 	.word	0x2000008c

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f003 fa20 	bl	8004660 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000a000 	.word	0x2000a000
 800124c:	00000400 	.word	0x00000400
 8001250:	2000018c 	.word	0x2000018c
 8001254:	200001a8 	.word	0x200001a8

08001258 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001280:	f7ff ffea 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopForever+0xe>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopForever+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012aa:	f003 f9df 	bl	800466c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ae:	f7ff fc13 	bl	8000ad8 <main>

080012b2 <LoopForever>:

LoopForever:
    b LoopForever
 80012b2:	e7fe      	b.n	80012b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012c0:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 80012c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012c8:	200001a4 	.word	0x200001a4

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f94b 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fe96 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f963 	bl	80015e6 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f92b 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	20000190 	.word	0x20000190

08001384 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;  
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000190 	.word	0x20000190

0800139c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_SuspendTick+0x1c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_SuspendTick+0x1c>)
 80013a6:	f023 0302 	bic.w	r3, r3, #2
 80013aa:	6013      	str	r3, [r2, #0]
                                                   
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_ResumeTick+0x1c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_ResumeTick+0x1c>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6013      	str	r3, [r2, #0]
  
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff3e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff31 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e154      	b.n	80018ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8146 	beq.w	80018b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x40>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80a0 	beq.w	80018b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <HAL_GPIO_Init+0x2d8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_GPIO_Init+0x2d8>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_GPIO_Init+0x2d8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017b6:	d019      	beq.n	80017ec <HAL_GPIO_Init+0x1ec>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_GPIO_Init+0x2e0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1e8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a47      	ldr	r2, [pc, #284]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a46      	ldr	r2, [pc, #280]	; (80018ec <HAL_GPIO_Init+0x2ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1dc>
 80017d8:	2304      	movs	r3, #4
 80017da:	e008      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017dc:	2305      	movs	r3, #5
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017fe:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180c:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001830:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001884:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aea3 	bne.w	8001610 <HAL_GPIO_Init+0x10>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000800 	.word	0x48000800
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	48001000 	.word	0x48001000
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001912:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001914:	e002      	b.n	800191c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001916:	bf40      	sev
    __WFE();
 8001918:	bf20      	wfe
    __WFE();
 800191a:	bf20      	wfe
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001932:	af00      	add	r7, sp, #0
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f001 b823 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 817d 	beq.w	8001c62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001968:	4bbc      	ldr	r3, [pc, #752]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b04      	cmp	r3, #4
 8001972:	d00c      	beq.n	800198e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001974:	4bb9      	ldr	r3, [pc, #740]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d15c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x10e>
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d155      	bne.n	8001a3a <HAL_RCC_OscConfig+0x10e>
 800198e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001992:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80019a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0x94>
 80019ba:	4ba8      	ldr	r3, [pc, #672]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0xc0>
 80019c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019e8:	4b9c      	ldr	r3, [pc, #624]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019f8:	fa92 f2a2 	rbit	r2, r2
 80019fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a00:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 811f 	beq.w	8001c60 <HAL_RCC_OscConfig+0x334>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8116 	bne.w	8001c60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f000 bfaf 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12e>
 8001a4c:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e036      	b.n	8001ac8 <HAL_RCC_OscConfig+0x19c>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x158>
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a78      	ldr	r2, [pc, #480]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e021      	b.n	8001ac8 <HAL_RCC_OscConfig+0x19c>
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x184>
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a70      	ldr	r2, [pc, #448]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6d      	ldr	r2, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x19c>
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac8:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f023 020f 	bic.w	r2, r3, #15
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	495f      	ldr	r1, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d059      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fc47 	bl	8001384 <HAL_GetTick>
 8001af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc42 	bl	8001384 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	d902      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f000 bf43 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 8001b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b16:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0x218>
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e015      	b.n	8001b70 <HAL_RCC_OscConfig+0x244>
 8001b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b48:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b74:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b78:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b7c:	fa92 f2a2 	rbit	r2, r2
 8001b80:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f042 0220 	orr.w	r2, r2, #32
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f002 021f 	and.w	r2, r2, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ab      	beq.n	8001afc <HAL_RCC_OscConfig+0x1d0>
 8001ba4:	e05d      	b.n	8001c62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fbed 	bl	8001384 <HAL_GetTick>
 8001baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fbe8 	bl	8001384 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d902      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f000 bee9 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2cc>
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f8>
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c10:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_RCC_OscConfig+0x330>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c28:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c30:	fa92 f2a2 	rbit	r2, r2
 8001c34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ab      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x284>
 8001c58:	e003      	b.n	8001c62 <HAL_RCC_OscConfig+0x336>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 817d 	beq.w	8001f72 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c78:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c84:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d172      	bne.n	8001d76 <HAL_RCC_OscConfig+0x44a>
 8001c90:	4ba0      	ldr	r3, [pc, #640]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d16c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x44a>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0x3a0>
 8001cc6:	4b93      	ldr	r3, [pc, #588]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3c8>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cfe:	fa92 f2a2 	rbit	r2, r2
 8001d02:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d06:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x410>
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f000 be2e 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	21f8      	movs	r1, #248	; 0xf8
 8001d52:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d5a:	fa91 f1a1 	rbit	r1, r1
 8001d5e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d62:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d66:	fab1 f181 	clz	r1, r1
 8001d6a:	b2c9      	uxtb	r1, r1
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	4969      	ldr	r1, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d74:	e0fd      	b.n	8001f72 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8088 	beq.w	8001e98 <HAL_RCC_OscConfig+0x56c>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fae6 	bl	8001384 <HAL_GetTick>
 8001db8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fae1 	bl	8001384 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	f000 bde2 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001de6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4d8>
 8001dfe:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e013      	b.n	8001e2c <HAL_RCC_OscConfig+0x500>
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0af      	beq.n	8001dbe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	21f8      	movs	r1, #248	; 0xf8
 8001e74:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e7c:	fa91 f1a1 	rbit	r1, r1
 8001e80:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e84:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e88:	fab1 f181 	clz	r1, r1
 8001e8c:	b2c9      	uxtb	r1, r1
 8001e8e:	408b      	lsls	r3, r1
 8001e90:	4920      	ldr	r1, [pc, #128]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
 8001e96:	e06c      	b.n	8001f72 <HAL_RCC_OscConfig+0x646>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa5e 	bl	8001384 <HAL_GetTick>
 8001ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fa59 	bl	8001384 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d902      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	f000 bd5a 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d104      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5ec>
 8001f0e:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <HAL_RCC_OscConfig+0x5e8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x614>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f3c:	4bc8      	ldr	r3, [pc, #800]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2202      	movs	r2, #2
 8001f42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ad      	bne.n	8001ece <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8110 	beq.w	80021a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d079      	beq.n	800208c <HAL_RCC_OscConfig+0x760>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4bab      	ldr	r3, [pc, #684]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f9df 	bl	8001384 <HAL_GetTick>
 8001fc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f9da 	bl	8001384 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d902      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f000 bcdb 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800203a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 800203e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002048:	2102      	movs	r1, #2
 800204a:	6019      	str	r1, [r3, #0]
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f1a3 	rbit	r1, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002062:	6019      	str	r1, [r3, #0]
  return result;
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0a0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x6a0>
 800208a:	e08d      	b.n	80021a8 <HAL_RCC_OscConfig+0x87c>
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020ae:	601a      	str	r2, [r3, #0]
  return result;
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f959 	bl	8001384 <HAL_GetTick>
 80020d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff f954 	bl	8001384 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d902      	bls.n	80020ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f000 bc55 	b.w	8002998 <HAL_RCC_OscConfig+0x106c>
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002158:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 800215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002166:	2102      	movs	r1, #2
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f1a3 	rbit	r1, r3
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002180:	6019      	str	r1, [r3, #0]
  return result;
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d197      	bne.n	80020d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 81a1 	beq.w	8002500 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x93c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCC_OscConfig+0x93c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_RCC_OscConfig+0x93c>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff f8b5 	bl	8001384 <HAL_GetTick>
 800221a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002220:	f7ff f8b0 	bl	8001384 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e3b1      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_OscConfig+0x93c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10d      	bne.n	800226c <HAL_RCC_OscConfig+0x940>
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	e03c      	b.n	80022d8 <HAL_RCC_OscConfig+0x9ac>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	10908120 	.word	0x10908120
 8002268:	40007000 	.word	0x40007000
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x96a>
 800227c:	4bc1      	ldr	r3, [pc, #772]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4ac0      	ldr	r2, [pc, #768]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	4bbe      	ldr	r3, [pc, #760]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4abd      	ldr	r2, [pc, #756]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e020      	b.n	80022d8 <HAL_RCC_OscConfig+0x9ac>
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x994>
 80022a6:	4bb7      	ldr	r3, [pc, #732]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4ab6      	ldr	r2, [pc, #728]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4bb4      	ldr	r3, [pc, #720]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4ab3      	ldr	r2, [pc, #716]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0x9ac>
 80022c0:	4bb0      	ldr	r3, [pc, #704]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4aaf      	ldr	r2, [pc, #700]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4bad      	ldr	r3, [pc, #692]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4aac      	ldr	r2, [pc, #688]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80022d2:	f023 0304 	bic.w	r3, r3, #4
 80022d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8081 	beq.w	80023ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f84b 	bl	8001384 <HAL_GetTick>
 80022ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff f846 	bl	8001384 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e345      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800235c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0xa4c>
 8002372:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	e013      	b.n	80023a0 <HAL_RCC_OscConfig+0xa74>
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	4b79      	ldr	r3, [pc, #484]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023a8:	2102      	movs	r1, #2
 80023aa:	6011      	str	r1, [r2, #0]
 80023ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fa92 f1a2 	rbit	r1, r2
 80023ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023c2:	6011      	str	r1, [r2, #0]
  return result;
 80023c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d084      	beq.n	80022f4 <HAL_RCC_OscConfig+0x9c8>
 80023ea:	e07f      	b.n	80024ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7fe ffca 	bl	8001384 <HAL_GetTick>
 80023f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe ffc5 	bl	8001384 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e2c4      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002454:	601a      	str	r2, [r3, #0]
  return result;
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800245e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0xb4e>
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	e013      	b.n	80024a2 <HAL_RCC_OscConfig+0xb76>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024aa:	2102      	movs	r1, #2
 80024ac:	6011      	str	r1, [r2, #0]
 80024ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fa92 f1a2 	rbit	r1, r2
 80024bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024c4:	6011      	str	r1, [r2, #0]
  return result;
 80024c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f002 021f 	and.w	r2, r2, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d184      	bne.n	80023f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8242 	beq.w	8002996 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCC_OscConfig+0xc58>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	f000 8213 	beq.w	8002946 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	f040 8162 	bne.w	80027f6 <HAL_RCC_OscConfig+0xeca>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800253a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002556:	601a      	str	r2, [r3, #0]
  return result;
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002560:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe ff04 	bl	8001384 <HAL_GetTick>
 800257c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e00c      	b.n	800259c <HAL_RCC_OscConfig+0xc70>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fefc 	bl	8001384 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1fd      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025c0:	601a      	str	r2, [r3, #0]
  return result;
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0xcba>
 80025e0:	4bb0      	ldr	r3, [pc, #704]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e027      	b.n	8002636 <HAL_RCC_OscConfig+0xd0a>
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4b9c      	ldr	r3, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800263e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002642:	6011      	str	r1, [r2, #0]
 8002644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002648:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	fa92 f1a2 	rbit	r1, r2
 8002652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002656:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800265a:	6011      	str	r1, [r2, #0]
  return result;
 800265c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002660:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d182      	bne.n	8002588 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002682:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	430b      	orrs	r3, r1
 80026a4:	497f      	ldr	r1, [pc, #508]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026ce:	601a      	str	r2, [r3, #0]
  return result;
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	2301      	movs	r3, #1
 80026ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe48 	bl	8001384 <HAL_GetTick>
 80026f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	e009      	b.n	800270e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fe43 	bl	8001384 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e144      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002732:	601a      	str	r2, [r3, #0]
  return result;
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800273c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0xe2c>
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e027      	b.n	80027a8 <HAL_RCC_OscConfig+0xe7c>
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027b4:	6011      	str	r1, [r2, #0]
 80027b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	fa92 f1a2 	rbit	r1, r2
 80027c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027cc:	6011      	str	r1, [r2, #0]
  return result;
 80027ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d082      	beq.n	80026fa <HAL_RCC_OscConfig+0xdce>
 80027f4:	e0cf      	b.n	8002996 <HAL_RCC_OscConfig+0x106a>
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800281a:	601a      	str	r2, [r3, #0]
  return result;
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002824:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fda2 	bl	8001384 <HAL_GetTick>
 8002840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	e009      	b.n	800285a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fd9d 	bl	8001384 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e09e      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800287e:	601a      	str	r2, [r3, #0]
  return result;
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002888:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d104      	bne.n	80028a8 <HAL_RCC_OscConfig+0xf7c>
 800289e:	4b01      	ldr	r3, [pc, #4]	; (80028a4 <HAL_RCC_OscConfig+0xf78>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	e029      	b.n	80028f8 <HAL_RCC_OscConfig+0xfcc>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x1078>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fa92 f1a2 	rbit	r1, r2
 8002914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002918:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800291c:	6011      	str	r1, [r2, #0]
  return result;
 800291e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002922:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d180      	bne.n	8002846 <HAL_RCC_OscConfig+0xf1a>
 8002944:	e027      	b.n	8002996 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e01e      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_OscConfig+0x1078>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002966:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	429a      	cmp	r2, r3
 8002978:	d10b      	bne.n	8002992 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800297a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800297e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b09e      	sub	sp, #120	; 0x78
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e162      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b90      	ldr	r3, [pc, #576]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	498b      	ldr	r1, [pc, #556]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e14a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b82      	ldr	r3, [pc, #520]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	497f      	ldr	r1, [pc, #508]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80dc 	beq.w	8002bd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d13c      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xf6>
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xa6>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e00f      	b.n	8002a6e <HAL_RCC_ClockConfig+0xc6>
 8002a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a72:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d17b      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0f3      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d13c      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x178>
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x128>
 8002aca:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_ClockConfig+0x148>
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d13a      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b2      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002b20:	2302      	movs	r3, #2
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1a0>
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e00d      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1bc>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2202      	movs	r2, #2
 8002b66:	61ba      	str	r2, [r7, #24]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	617a      	str	r2, [r7, #20]
  return result;
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e079      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	491a      	ldr	r1, [pc, #104]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fbee 	bl	8001384 <HAL_GetTick>
 8002ba8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe fbea 	bl	8001384 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e061      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d214      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e040      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	491a      	ldr	r1, [pc, #104]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4912      	ldr	r1, [pc, #72]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c4a:	f000 f845 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	22f0      	movs	r2, #240	; 0xf0
 8002c5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	60fa      	str	r2, [r7, #12]
  return result;
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	40d3      	lsrs	r3, r2
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x2ec>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f0>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_RCC_ClockConfig+0x2f4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fb3c 	bl	80012fc <HAL_InitTick>
  
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3778      	adds	r7, #120	; 0x78
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08006f8c 	.word	0x08006f8c
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002caa:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	603b      	str	r3, [r7, #0]
  return result;
 8002cb4:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x30>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x36>
 8002d06:	e03c      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d0a:	623b      	str	r3, [r7, #32]
      break;
 8002d0c:	e03c      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	607a      	str	r2, [r7, #4]
  return result;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	40d3      	lsrs	r3, r2
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	60fa      	str	r2, [r7, #12]
  return result;
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	40d3      	lsrs	r3, r2
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e004      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	623b      	str	r3, [r7, #32]
      break;
 8002d80:	e002      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d84:	623b      	str	r3, [r7, #32]
      break;
 8002d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	372c      	adds	r7, #44	; 0x2c
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	007a1200 	.word	0x007a1200
 8002da0:	08006fa4 	.word	0x08006fa4
 8002da4:	08006fb4 	.word	0x08006fb4
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dca:	f7ff ffef 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	603a      	str	r2, [r7, #0]
  return result;
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	40d3      	lsrs	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006f9c 	.word	0x08006f9c

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e0e:	f7ff ffcd 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002e12:	4601      	mov	r1, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa92 f2a2 	rbit	r2, r2
 8002e28:	603a      	str	r2, [r7, #0]
  return result;
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	40d3      	lsrs	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08006f9c 	.word	0x08006f9c

08002e4c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d104      	bne.n	8002e66 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002e5c:	f000 f80a 	bl	8002e74 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	701a      	strb	r2, [r3, #0]
  }
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	4002100a 	.word	0x4002100a

08002e74 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b092      	sub	sp, #72	; 0x48
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80d4 	beq.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	61d3      	str	r3, [r2, #28]
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fa4b 	bl	8001384 <HAL_GetTick>
 8002eee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fa47 	bl	8001384 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e169      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8084 	beq.w	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d07c      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04b      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe f9f7 	bl	8001384 <HAL_GetTick>
 8002f96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe f9f3 	bl	8001384 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e113      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002fde:	4b01      	ldr	r3, [pc, #4]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	e00d      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	10908100 	.word	0x10908100
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	4b78      	ldr	r3, [pc, #480]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2202      	movs	r2, #2
 8003002:	613a      	str	r2, [r7, #16]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	fa92 f2a2 	rbit	r2, r2
 800300a:	60fa      	str	r2, [r7, #12]
  return result;
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	fab2 f282 	clz	r2, r2
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f002 021f 	and.w	r2, r2, #31
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0b7      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	496a      	ldr	r1, [pc, #424]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	f023 0203 	bic.w	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	495d      	ldr	r1, [pc, #372]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4956      	ldr	r1, [pc, #344]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003098:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	494e      	ldr	r1, [pc, #312]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4947      	ldr	r1, [pc, #284]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	493f      	ldr	r1, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f023 0220 	bic.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4938      	ldr	r1, [pc, #224]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003100:	4313      	orrs	r3, r2
 8003102:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	4930      	ldr	r1, [pc, #192]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312e:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4929      	ldr	r1, [pc, #164]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4921      	ldr	r1, [pc, #132]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	491a      	ldr	r1, [pc, #104]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	4912      	ldr	r1, [pc, #72]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	490b      	ldr	r1, [pc, #44]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3748      	adds	r7, #72	; 0x48
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e073      	b.n	80032e2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7f5b      	ldrb	r3, [r3, #29]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd ff2a 	bl	8001064 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d055      	beq.n	80032d0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	22ca      	movs	r2, #202	; 0xca
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2253      	movs	r2, #83	; 0x53
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f87f 	bl	8003338 <RTC_EnterInitMode>
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12c      	bne.n	800329e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003256:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	041a      	lsls	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f886 	bl	80033a6 <RTC_ExitInitMode>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d110      	bne.n	80032c6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	22ff      	movs	r2, #255	; 0xff
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
 80032ce:	e001      	b.n	80032d4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_RTC_WaitForSynchro+0x48>)
 80032fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003300:	f7fe f840 	bl	8001384 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003306:	e009      	b.n	800331c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003308:	f7fe f83c 	bl	8001384 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003316:	d901      	bls.n	800331c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e007      	b.n	800332c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0001ff5f 	.word	0x0001ff5f

08003338 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d122      	bne.n	800339c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003364:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003366:	f7fe f80d 	bl	8001384 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800336c:	e00c      	b.n	8003388 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800336e:	f7fe f809 	bl	8001384 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337c:	d904      	bls.n	8003388 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2204      	movs	r2, #4
 8003382:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <RTC_EnterInitMode+0x64>
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d1e8      	bne.n	800336e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff8b 	bl	80032ec <HAL_RTC_WaitForSynchro>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5a      	ldr	r2, [pc, #360]	; (800356c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0adb      	lsrs	r3, r3, #11
 8003408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7f1b      	ldrb	r3, [r3, #28]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800341a:	2302      	movs	r3, #2
 800341c:	e09d      	b.n	800355a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2202      	movs	r2, #2
 8003428:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	22ca      	movs	r2, #202	; 0xca
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2253      	movs	r2, #83	; 0x53
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3b01      	subs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ff      	movs	r2, #255	; 0xff
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2203      	movs	r2, #3
 8003460:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e076      	b.n	800355a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e6      	bne.n	8003448 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003488:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800349a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	; (800356c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	22ff      	movs	r2, #255	; 0xff
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2203      	movs	r2, #3
 80034ca:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e041      	b.n	800355a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0e6      	beq.n	80034b2 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0207 	bic.w	r2, r2, #7
 80034f2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003522:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003532:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003542:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000000 	.word	0x20000000
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7f1b      	ldrb	r3, [r3, #28]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003588:	2302      	movs	r3, #2
 800358a:	e047      	b.n	800361c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	22ca      	movs	r2, #202	; 0xca
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2253      	movs	r2, #83	; 0x53
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035c6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c8:	f7fd fedc 	bl	8001384 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80035ce:	e013      	b.n	80035f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035d0:	f7fd fed8 	bl	8001384 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035de:	d90b      	bls.n	80035f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	22ff      	movs	r2, #255	; 0xff
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e011      	b.n	800361c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0e4      	beq.n	80035d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800362e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003632:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003652:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f809 	bl	800366c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	775a      	strb	r2, [r3, #29]
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40010400 	.word	0x40010400

0800366c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fd08 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f962 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e042      	b.n	80037ce <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_TIM_Base_Start+0xac>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_TIM_Base_Start+0x5c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d013      	beq.n	800378c <HAL_TIM_Base_Start+0x5c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_TIM_Base_Start+0xb0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_TIM_Base_Start+0x5c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_TIM_Base_Start+0xb4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_TIM_Base_Start+0x5c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_TIM_Base_Start+0xb8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIM_Base_Start+0x5c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_TIM_Base_Start+0xbc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d115      	bne.n	80037b8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <HAL_TIM_Base_Start+0xc0>)
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b06      	cmp	r3, #6
 800379c:	d015      	beq.n	80037ca <HAL_TIM_Base_Start+0x9a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d011      	beq.n	80037ca <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	e008      	b.n	80037ca <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e000      	b.n	80037cc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40013400 	.word	0x40013400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	00010007 	.word	0x00010007

080037f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIM_ConfigClockSource+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e0b6      	b.n	800397e <HAL_TIM_ConfigClockSource+0x18a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384c:	d03e      	beq.n	80038cc <HAL_TIM_ConfigClockSource+0xd8>
 800384e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003852:	f200 8087 	bhi.w	8003964 <HAL_TIM_ConfigClockSource+0x170>
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	f000 8086 	beq.w	800396a <HAL_TIM_ConfigClockSource+0x176>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d87f      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d01a      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xaa>
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d87b      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d050      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x11e>
 8003870:	2b60      	cmp	r3, #96	; 0x60
 8003872:	d877      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 8003874:	2b50      	cmp	r3, #80	; 0x50
 8003876:	d03c      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xfe>
 8003878:	2b50      	cmp	r3, #80	; 0x50
 800387a:	d873      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d058      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x13e>
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d86f      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d064      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x15e>
 8003888:	2b30      	cmp	r3, #48	; 0x30
 800388a:	d86b      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d060      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x15e>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d867      	bhi.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05c      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x15e>
 8003898:	2b10      	cmp	r3, #16
 800389a:	d05a      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x15e>
 800389c:	e062      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6899      	ldr	r1, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f000 f975 	bl	8003b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	609a      	str	r2, [r3, #8]
      break;
 80038ca:	e04f      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6899      	ldr	r1, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f000 f95e 	bl	8003b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ee:	609a      	str	r2, [r3, #8]
      break;
 80038f0:	e03c      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 f8d2 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2150      	movs	r1, #80	; 0x50
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f92b 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003910:	e02c      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f000 f8f1 	bl	8003b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2160      	movs	r1, #96	; 0x60
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f91b 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003930:	e01c      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f000 f8b2 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f90b 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003950:	e00c      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f000 f902 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003962:	e003      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e000      	b.n	800396c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800396a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3c      	ldr	r2, [pc, #240]	; (8003a8c <TIM_Base_SetConfig+0x104>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a39      	ldr	r2, [pc, #228]	; (8003a90 <TIM_Base_SetConfig+0x108>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a38      	ldr	r2, [pc, #224]	; (8003a94 <TIM_Base_SetConfig+0x10c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a37      	ldr	r2, [pc, #220]	; (8003a98 <TIM_Base_SetConfig+0x110>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <TIM_Base_SetConfig+0x104>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <TIM_Base_SetConfig+0x108>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <TIM_Base_SetConfig+0x10c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <TIM_Base_SetConfig+0x110>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <TIM_Base_SetConfig+0x114>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <TIM_Base_SetConfig+0x118>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <TIM_Base_SetConfig+0x11c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <TIM_Base_SetConfig+0x104>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00f      	beq.n	8003a70 <TIM_Base_SetConfig+0xe8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <TIM_Base_SetConfig+0x110>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <TIM_Base_SetConfig+0xe8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <TIM_Base_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <TIM_Base_SetConfig+0xe8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <TIM_Base_SetConfig+0x118>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_Base_SetConfig+0xe8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <TIM_Base_SetConfig+0x11c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 030a 	bic.w	r3, r3, #10
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0210 	bic.w	r2, r3, #16
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f043 0307 	orr.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e063      	b.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d013      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10c      	bne.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40014000 	.word	0x40014000

08003cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e040      	b.n	8003d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd f9fa 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8b6 	bl	8003e8c <UART_SetConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa7e 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb05 	bl	8004378 <UART_CheckIdleState>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d178      	bne.n	8003e82 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Transmit+0x24>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e071      	b.n	8003e84 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fae9 	bl	8001384 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x68>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003de8:	e030      	b.n	8003e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb67 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03c      	b.n	8003e84 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	3302      	adds	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e008      	b.n	8003e3a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	b292      	uxth	r2, r2
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1c8      	bne.n	8003dea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fb30 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e005      	b.n	8003e84 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eba:	f023 030c 	bic.w	r3, r3, #12
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4aa7      	ldr	r2, [pc, #668]	; (80041a4 <UART_SetConfig+0x318>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d120      	bne.n	8003f4e <UART_SetConfig+0xc2>
 8003f0c:	4ba6      	ldr	r3, [pc, #664]	; (80041a8 <UART_SetConfig+0x31c>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d817      	bhi.n	8003f48 <UART_SetConfig+0xbc>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0x94>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08003f3d 	.word	0x08003f3d
 8003f28:	08003f43 	.word	0x08003f43
 8003f2c:	08003f37 	.word	0x08003f37
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e0b5      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f36:	2302      	movs	r3, #2
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e0b2      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e0af      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f42:	2308      	movs	r3, #8
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e0ac      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e0a9      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a96      	ldr	r2, [pc, #600]	; (80041ac <UART_SetConfig+0x320>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d124      	bne.n	8003fa2 <UART_SetConfig+0x116>
 8003f58:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <UART_SetConfig+0x31c>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f64:	d011      	beq.n	8003f8a <UART_SetConfig+0xfe>
 8003f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f6a:	d817      	bhi.n	8003f9c <UART_SetConfig+0x110>
 8003f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f70:	d011      	beq.n	8003f96 <UART_SetConfig+0x10a>
 8003f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f76:	d811      	bhi.n	8003f9c <UART_SetConfig+0x110>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <UART_SetConfig+0xf8>
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d006      	beq.n	8003f90 <UART_SetConfig+0x104>
 8003f82:	e00b      	b.n	8003f9c <UART_SetConfig+0x110>
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e08b      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e088      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f90:	2304      	movs	r3, #4
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e085      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f96:	2308      	movs	r3, #8
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e082      	b.n	80040a2 <UART_SetConfig+0x216>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e07f      	b.n	80040a2 <UART_SetConfig+0x216>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a82      	ldr	r2, [pc, #520]	; (80041b0 <UART_SetConfig+0x324>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d124      	bne.n	8003ff6 <UART_SetConfig+0x16a>
 8003fac:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <UART_SetConfig+0x31c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fb8:	d011      	beq.n	8003fde <UART_SetConfig+0x152>
 8003fba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fbe:	d817      	bhi.n	8003ff0 <UART_SetConfig+0x164>
 8003fc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fc4:	d011      	beq.n	8003fea <UART_SetConfig+0x15e>
 8003fc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fca:	d811      	bhi.n	8003ff0 <UART_SetConfig+0x164>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <UART_SetConfig+0x14c>
 8003fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fd4:	d006      	beq.n	8003fe4 <UART_SetConfig+0x158>
 8003fd6:	e00b      	b.n	8003ff0 <UART_SetConfig+0x164>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e061      	b.n	80040a2 <UART_SetConfig+0x216>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e05e      	b.n	80040a2 <UART_SetConfig+0x216>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e05b      	b.n	80040a2 <UART_SetConfig+0x216>
 8003fea:	2308      	movs	r3, #8
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e058      	b.n	80040a2 <UART_SetConfig+0x216>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e055      	b.n	80040a2 <UART_SetConfig+0x216>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <UART_SetConfig+0x328>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d124      	bne.n	800404a <UART_SetConfig+0x1be>
 8004000:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <UART_SetConfig+0x31c>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800400c:	d011      	beq.n	8004032 <UART_SetConfig+0x1a6>
 800400e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004012:	d817      	bhi.n	8004044 <UART_SetConfig+0x1b8>
 8004014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004018:	d011      	beq.n	800403e <UART_SetConfig+0x1b2>
 800401a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800401e:	d811      	bhi.n	8004044 <UART_SetConfig+0x1b8>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <UART_SetConfig+0x1a0>
 8004024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004028:	d006      	beq.n	8004038 <UART_SetConfig+0x1ac>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x1b8>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e037      	b.n	80040a2 <UART_SetConfig+0x216>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e034      	b.n	80040a2 <UART_SetConfig+0x216>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e031      	b.n	80040a2 <UART_SetConfig+0x216>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e02e      	b.n	80040a2 <UART_SetConfig+0x216>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e02b      	b.n	80040a2 <UART_SetConfig+0x216>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a5a      	ldr	r2, [pc, #360]	; (80041b8 <UART_SetConfig+0x32c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d124      	bne.n	800409e <UART_SetConfig+0x212>
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <UART_SetConfig+0x31c>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800405c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004060:	d011      	beq.n	8004086 <UART_SetConfig+0x1fa>
 8004062:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004066:	d817      	bhi.n	8004098 <UART_SetConfig+0x20c>
 8004068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800406c:	d011      	beq.n	8004092 <UART_SetConfig+0x206>
 800406e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004072:	d811      	bhi.n	8004098 <UART_SetConfig+0x20c>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <UART_SetConfig+0x1f4>
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d006      	beq.n	800408c <UART_SetConfig+0x200>
 800407e:	e00b      	b.n	8004098 <UART_SetConfig+0x20c>
 8004080:	2300      	movs	r3, #0
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e00d      	b.n	80040a2 <UART_SetConfig+0x216>
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e00a      	b.n	80040a2 <UART_SetConfig+0x216>
 800408c:	2304      	movs	r3, #4
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e007      	b.n	80040a2 <UART_SetConfig+0x216>
 8004092:	2308      	movs	r3, #8
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e004      	b.n	80040a2 <UART_SetConfig+0x216>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e001      	b.n	80040a2 <UART_SetConfig+0x216>
 800409e:	2310      	movs	r3, #16
 80040a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040aa:	d15b      	bne.n	8004164 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d827      	bhi.n	8004102 <UART_SetConfig+0x276>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x22c>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	08004103 	.word	0x08004103
 80040d0:	08004103 	.word	0x08004103
 80040d4:	08004103 	.word	0x08004103
 80040d8:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7fe fe72 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e013      	b.n	800410c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7fe fe90 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e00f      	b.n	800410c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b33      	ldr	r3, [pc, #204]	; (80041bc <UART_SetConfig+0x330>)
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e00c      	b.n	800410c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fe fdf1 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 80040f6:	61b8      	str	r0, [r7, #24]
        break;
 80040f8:	e008      	b.n	800410c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	77bb      	strb	r3, [r7, #30]
        break;
 800410a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8082 	beq.w	8004218 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	005a      	lsls	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	441a      	add	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d916      	bls.n	800415e <UART_SetConfig+0x2d2>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004136:	d212      	bcs.n	800415e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f023 030f 	bic.w	r3, r3, #15
 8004140:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	b29a      	uxth	r2, r3
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	4313      	orrs	r3, r2
 8004152:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	89fa      	ldrh	r2, [r7, #14]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	e05c      	b.n	8004218 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	77bb      	strb	r3, [r7, #30]
 8004162:	e059      	b.n	8004218 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004164:	7ffb      	ldrb	r3, [r7, #31]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d835      	bhi.n	80041d6 <UART_SetConfig+0x34a>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0x2e4>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004195 	.word	0x08004195
 8004174:	0800419d 	.word	0x0800419d
 8004178:	080041c1 	.word	0x080041c1
 800417c:	080041d7 	.word	0x080041d7
 8004180:	080041c7 	.word	0x080041c7
 8004184:	080041d7 	.word	0x080041d7
 8004188:	080041d7 	.word	0x080041d7
 800418c:	080041d7 	.word	0x080041d7
 8004190:	080041cf 	.word	0x080041cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004194:	f7fe fe16 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8004198:	61b8      	str	r0, [r7, #24]
        break;
 800419a:	e021      	b.n	80041e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800419c:	f7fe fe34 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e01d      	b.n	80041e0 <UART_SetConfig+0x354>
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40004800 	.word	0x40004800
 80041b4:	40004c00 	.word	0x40004c00
 80041b8:	40005000 	.word	0x40005000
 80041bc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <UART_SetConfig+0x3a4>)
 80041c2:	61bb      	str	r3, [r7, #24]
        break;
 80041c4:	e00c      	b.n	80041e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fe fd87 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 80041ca:	61b8      	str	r0, [r7, #24]
        break;
 80041cc:	e008      	b.n	80041e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	61bb      	str	r3, [r7, #24]
        break;
 80041d4:	e004      	b.n	80041e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	77bb      	strb	r3, [r7, #30]
        break;
 80041de:	bf00      	nop
    }

    if (pclk != 0U)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	085a      	lsrs	r2, r3, #1
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	441a      	add	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d909      	bls.n	8004214 <UART_SetConfig+0x388>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004206:	d205      	bcs.n	8004214 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	e001      	b.n	8004218 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004224:	7fbb      	ldrb	r3, [r7, #30]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	007a1200 	.word	0x007a1200

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d10a      	bne.n	800434a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b098      	sub	sp, #96	; 0x60
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004388:	f7fc fffc 	bl	8001384 <HAL_GetTick>
 800438c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d12e      	bne.n	80043fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f88c 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d021      	beq.n	80043fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
 80043d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e062      	b.n	80044c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b04      	cmp	r3, #4
 8004406:	d149      	bne.n	800449c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f856 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03c      	beq.n	800449c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	623b      	str	r3, [r7, #32]
   return(result);
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	60fb      	str	r3, [r7, #12]
   return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e011      	b.n	80044c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3758      	adds	r7, #88	; 0x58
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d8:	e049      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d045      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fc ff4f 	bl	8001384 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e048      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d031      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d110      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2208      	movs	r2, #8
 800451e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f838 	bl	8004596 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2208      	movs	r2, #8
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e029      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d111      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f81e 	bl	8004596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00f      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0a6      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004596:	b480      	push	{r7}
 8004598:	b095      	sub	sp, #84	; 0x54
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3308      	adds	r3, #8
 80045ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	2b01      	cmp	r3, #1
 800460a:	d118      	bne.n	800463e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	60bb      	str	r3, [r7, #8]
   return(result);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	613b      	str	r3, [r7, #16]
   return(result);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004652:	bf00      	nop
 8004654:	3754      	adds	r7, #84	; 0x54
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <__errno>:
 8004660:	4b01      	ldr	r3, [pc, #4]	; (8004668 <__errno+0x8>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c

0800466c <__libc_init_array>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4d0d      	ldr	r5, [pc, #52]	; (80046a4 <__libc_init_array+0x38>)
 8004670:	4c0d      	ldr	r4, [pc, #52]	; (80046a8 <__libc_init_array+0x3c>)
 8004672:	1b64      	subs	r4, r4, r5
 8004674:	10a4      	asrs	r4, r4, #2
 8004676:	2600      	movs	r6, #0
 8004678:	42a6      	cmp	r6, r4
 800467a:	d109      	bne.n	8004690 <__libc_init_array+0x24>
 800467c:	4d0b      	ldr	r5, [pc, #44]	; (80046ac <__libc_init_array+0x40>)
 800467e:	4c0c      	ldr	r4, [pc, #48]	; (80046b0 <__libc_init_array+0x44>)
 8004680:	f000 fc8e 	bl	8004fa0 <_init>
 8004684:	1b64      	subs	r4, r4, r5
 8004686:	10a4      	asrs	r4, r4, #2
 8004688:	2600      	movs	r6, #0
 800468a:	42a6      	cmp	r6, r4
 800468c:	d105      	bne.n	800469a <__libc_init_array+0x2e>
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	f855 3b04 	ldr.w	r3, [r5], #4
 8004694:	4798      	blx	r3
 8004696:	3601      	adds	r6, #1
 8004698:	e7ee      	b.n	8004678 <__libc_init_array+0xc>
 800469a:	f855 3b04 	ldr.w	r3, [r5], #4
 800469e:	4798      	blx	r3
 80046a0:	3601      	adds	r6, #1
 80046a2:	e7f2      	b.n	800468a <__libc_init_array+0x1e>
 80046a4:	08006ff8 	.word	0x08006ff8
 80046a8:	08006ff8 	.word	0x08006ff8
 80046ac:	08006ff8 	.word	0x08006ff8
 80046b0:	08006ffc 	.word	0x08006ffc

080046b4 <memset>:
 80046b4:	4402      	add	r2, r0
 80046b6:	4603      	mov	r3, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <siprintf>:
 80046c4:	b40e      	push	{r1, r2, r3}
 80046c6:	b500      	push	{lr}
 80046c8:	b09c      	sub	sp, #112	; 0x70
 80046ca:	ab1d      	add	r3, sp, #116	; 0x74
 80046cc:	9002      	str	r0, [sp, #8]
 80046ce:	9006      	str	r0, [sp, #24]
 80046d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046d4:	4809      	ldr	r0, [pc, #36]	; (80046fc <siprintf+0x38>)
 80046d6:	9107      	str	r1, [sp, #28]
 80046d8:	9104      	str	r1, [sp, #16]
 80046da:	4909      	ldr	r1, [pc, #36]	; (8004700 <siprintf+0x3c>)
 80046dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e0:	9105      	str	r1, [sp, #20]
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	a902      	add	r1, sp, #8
 80046e8:	f000 f868 	bl	80047bc <_svfiprintf_r>
 80046ec:	9b02      	ldr	r3, [sp, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	b01c      	add	sp, #112	; 0x70
 80046f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f8:	b003      	add	sp, #12
 80046fa:	4770      	bx	lr
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	ffff0208 	.word	0xffff0208

08004704 <__ssputs_r>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	688e      	ldr	r6, [r1, #8]
 800470a:	429e      	cmp	r6, r3
 800470c:	4682      	mov	sl, r0
 800470e:	460c      	mov	r4, r1
 8004710:	4690      	mov	r8, r2
 8004712:	461f      	mov	r7, r3
 8004714:	d838      	bhi.n	8004788 <__ssputs_r+0x84>
 8004716:	898a      	ldrh	r2, [r1, #12]
 8004718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800471c:	d032      	beq.n	8004784 <__ssputs_r+0x80>
 800471e:	6825      	ldr	r5, [r4, #0]
 8004720:	6909      	ldr	r1, [r1, #16]
 8004722:	eba5 0901 	sub.w	r9, r5, r1
 8004726:	6965      	ldr	r5, [r4, #20]
 8004728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800472c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004730:	3301      	adds	r3, #1
 8004732:	444b      	add	r3, r9
 8004734:	106d      	asrs	r5, r5, #1
 8004736:	429d      	cmp	r5, r3
 8004738:	bf38      	it	cc
 800473a:	461d      	movcc	r5, r3
 800473c:	0553      	lsls	r3, r2, #21
 800473e:	d531      	bpl.n	80047a4 <__ssputs_r+0xa0>
 8004740:	4629      	mov	r1, r5
 8004742:	f000 fb63 	bl	8004e0c <_malloc_r>
 8004746:	4606      	mov	r6, r0
 8004748:	b950      	cbnz	r0, 8004760 <__ssputs_r+0x5c>
 800474a:	230c      	movs	r3, #12
 800474c:	f8ca 3000 	str.w	r3, [sl]
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004760:	6921      	ldr	r1, [r4, #16]
 8004762:	464a      	mov	r2, r9
 8004764:	f000 fabe 	bl	8004ce4 <memcpy>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	6126      	str	r6, [r4, #16]
 8004776:	6165      	str	r5, [r4, #20]
 8004778:	444e      	add	r6, r9
 800477a:	eba5 0509 	sub.w	r5, r5, r9
 800477e:	6026      	str	r6, [r4, #0]
 8004780:	60a5      	str	r5, [r4, #8]
 8004782:	463e      	mov	r6, r7
 8004784:	42be      	cmp	r6, r7
 8004786:	d900      	bls.n	800478a <__ssputs_r+0x86>
 8004788:	463e      	mov	r6, r7
 800478a:	6820      	ldr	r0, [r4, #0]
 800478c:	4632      	mov	r2, r6
 800478e:	4641      	mov	r1, r8
 8004790:	f000 fab6 	bl	8004d00 <memmove>
 8004794:	68a3      	ldr	r3, [r4, #8]
 8004796:	1b9b      	subs	r3, r3, r6
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	4433      	add	r3, r6
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	2000      	movs	r0, #0
 80047a2:	e7db      	b.n	800475c <__ssputs_r+0x58>
 80047a4:	462a      	mov	r2, r5
 80047a6:	f000 fba5 	bl	8004ef4 <_realloc_r>
 80047aa:	4606      	mov	r6, r0
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d1e1      	bne.n	8004774 <__ssputs_r+0x70>
 80047b0:	6921      	ldr	r1, [r4, #16]
 80047b2:	4650      	mov	r0, sl
 80047b4:	f000 fabe 	bl	8004d34 <_free_r>
 80047b8:	e7c7      	b.n	800474a <__ssputs_r+0x46>
	...

080047bc <_svfiprintf_r>:
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	4698      	mov	r8, r3
 80047c2:	898b      	ldrh	r3, [r1, #12]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	b09d      	sub	sp, #116	; 0x74
 80047c8:	4607      	mov	r7, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	4614      	mov	r4, r2
 80047ce:	d50e      	bpl.n	80047ee <_svfiprintf_r+0x32>
 80047d0:	690b      	ldr	r3, [r1, #16]
 80047d2:	b963      	cbnz	r3, 80047ee <_svfiprintf_r+0x32>
 80047d4:	2140      	movs	r1, #64	; 0x40
 80047d6:	f000 fb19 	bl	8004e0c <_malloc_r>
 80047da:	6028      	str	r0, [r5, #0]
 80047dc:	6128      	str	r0, [r5, #16]
 80047de:	b920      	cbnz	r0, 80047ea <_svfiprintf_r+0x2e>
 80047e0:	230c      	movs	r3, #12
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	e0d1      	b.n	800498e <_svfiprintf_r+0x1d2>
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	616b      	str	r3, [r5, #20]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9309      	str	r3, [sp, #36]	; 0x24
 80047f2:	2320      	movs	r3, #32
 80047f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047fc:	2330      	movs	r3, #48	; 0x30
 80047fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049a8 <_svfiprintf_r+0x1ec>
 8004802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004806:	f04f 0901 	mov.w	r9, #1
 800480a:	4623      	mov	r3, r4
 800480c:	469a      	mov	sl, r3
 800480e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004812:	b10a      	cbz	r2, 8004818 <_svfiprintf_r+0x5c>
 8004814:	2a25      	cmp	r2, #37	; 0x25
 8004816:	d1f9      	bne.n	800480c <_svfiprintf_r+0x50>
 8004818:	ebba 0b04 	subs.w	fp, sl, r4
 800481c:	d00b      	beq.n	8004836 <_svfiprintf_r+0x7a>
 800481e:	465b      	mov	r3, fp
 8004820:	4622      	mov	r2, r4
 8004822:	4629      	mov	r1, r5
 8004824:	4638      	mov	r0, r7
 8004826:	f7ff ff6d 	bl	8004704 <__ssputs_r>
 800482a:	3001      	adds	r0, #1
 800482c:	f000 80aa 	beq.w	8004984 <_svfiprintf_r+0x1c8>
 8004830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004832:	445a      	add	r2, fp
 8004834:	9209      	str	r2, [sp, #36]	; 0x24
 8004836:	f89a 3000 	ldrb.w	r3, [sl]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80a2 	beq.w	8004984 <_svfiprintf_r+0x1c8>
 8004840:	2300      	movs	r3, #0
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484a:	f10a 0a01 	add.w	sl, sl, #1
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	9307      	str	r3, [sp, #28]
 8004852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004856:	931a      	str	r3, [sp, #104]	; 0x68
 8004858:	4654      	mov	r4, sl
 800485a:	2205      	movs	r2, #5
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	4851      	ldr	r0, [pc, #324]	; (80049a8 <_svfiprintf_r+0x1ec>)
 8004862:	f7fb fcb5 	bl	80001d0 <memchr>
 8004866:	9a04      	ldr	r2, [sp, #16]
 8004868:	b9d8      	cbnz	r0, 80048a2 <_svfiprintf_r+0xe6>
 800486a:	06d0      	lsls	r0, r2, #27
 800486c:	bf44      	itt	mi
 800486e:	2320      	movmi	r3, #32
 8004870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004874:	0711      	lsls	r1, r2, #28
 8004876:	bf44      	itt	mi
 8004878:	232b      	movmi	r3, #43	; 0x2b
 800487a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800487e:	f89a 3000 	ldrb.w	r3, [sl]
 8004882:	2b2a      	cmp	r3, #42	; 0x2a
 8004884:	d015      	beq.n	80048b2 <_svfiprintf_r+0xf6>
 8004886:	9a07      	ldr	r2, [sp, #28]
 8004888:	4654      	mov	r4, sl
 800488a:	2000      	movs	r0, #0
 800488c:	f04f 0c0a 	mov.w	ip, #10
 8004890:	4621      	mov	r1, r4
 8004892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004896:	3b30      	subs	r3, #48	; 0x30
 8004898:	2b09      	cmp	r3, #9
 800489a:	d94e      	bls.n	800493a <_svfiprintf_r+0x17e>
 800489c:	b1b0      	cbz	r0, 80048cc <_svfiprintf_r+0x110>
 800489e:	9207      	str	r2, [sp, #28]
 80048a0:	e014      	b.n	80048cc <_svfiprintf_r+0x110>
 80048a2:	eba0 0308 	sub.w	r3, r0, r8
 80048a6:	fa09 f303 	lsl.w	r3, r9, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	46a2      	mov	sl, r4
 80048b0:	e7d2      	b.n	8004858 <_svfiprintf_r+0x9c>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	1d19      	adds	r1, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	9103      	str	r1, [sp, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfbb      	ittet	lt
 80048be:	425b      	neglt	r3, r3
 80048c0:	f042 0202 	orrlt.w	r2, r2, #2
 80048c4:	9307      	strge	r3, [sp, #28]
 80048c6:	9307      	strlt	r3, [sp, #28]
 80048c8:	bfb8      	it	lt
 80048ca:	9204      	strlt	r2, [sp, #16]
 80048cc:	7823      	ldrb	r3, [r4, #0]
 80048ce:	2b2e      	cmp	r3, #46	; 0x2e
 80048d0:	d10c      	bne.n	80048ec <_svfiprintf_r+0x130>
 80048d2:	7863      	ldrb	r3, [r4, #1]
 80048d4:	2b2a      	cmp	r3, #42	; 0x2a
 80048d6:	d135      	bne.n	8004944 <_svfiprintf_r+0x188>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bfb8      	it	lt
 80048e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048e8:	3402      	adds	r4, #2
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049b8 <_svfiprintf_r+0x1fc>
 80048f0:	7821      	ldrb	r1, [r4, #0]
 80048f2:	2203      	movs	r2, #3
 80048f4:	4650      	mov	r0, sl
 80048f6:	f7fb fc6b 	bl	80001d0 <memchr>
 80048fa:	b140      	cbz	r0, 800490e <_svfiprintf_r+0x152>
 80048fc:	2340      	movs	r3, #64	; 0x40
 80048fe:	eba0 000a 	sub.w	r0, r0, sl
 8004902:	fa03 f000 	lsl.w	r0, r3, r0
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	4303      	orrs	r3, r0
 800490a:	3401      	adds	r4, #1
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004912:	4826      	ldr	r0, [pc, #152]	; (80049ac <_svfiprintf_r+0x1f0>)
 8004914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004918:	2206      	movs	r2, #6
 800491a:	f7fb fc59 	bl	80001d0 <memchr>
 800491e:	2800      	cmp	r0, #0
 8004920:	d038      	beq.n	8004994 <_svfiprintf_r+0x1d8>
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <_svfiprintf_r+0x1f4>)
 8004924:	bb1b      	cbnz	r3, 800496e <_svfiprintf_r+0x1b2>
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	3307      	adds	r3, #7
 800492a:	f023 0307 	bic.w	r3, r3, #7
 800492e:	3308      	adds	r3, #8
 8004930:	9303      	str	r3, [sp, #12]
 8004932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004934:	4433      	add	r3, r6
 8004936:	9309      	str	r3, [sp, #36]	; 0x24
 8004938:	e767      	b.n	800480a <_svfiprintf_r+0x4e>
 800493a:	fb0c 3202 	mla	r2, ip, r2, r3
 800493e:	460c      	mov	r4, r1
 8004940:	2001      	movs	r0, #1
 8004942:	e7a5      	b.n	8004890 <_svfiprintf_r+0xd4>
 8004944:	2300      	movs	r3, #0
 8004946:	3401      	adds	r4, #1
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	4619      	mov	r1, r3
 800494c:	f04f 0c0a 	mov.w	ip, #10
 8004950:	4620      	mov	r0, r4
 8004952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004956:	3a30      	subs	r2, #48	; 0x30
 8004958:	2a09      	cmp	r2, #9
 800495a:	d903      	bls.n	8004964 <_svfiprintf_r+0x1a8>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0c5      	beq.n	80048ec <_svfiprintf_r+0x130>
 8004960:	9105      	str	r1, [sp, #20]
 8004962:	e7c3      	b.n	80048ec <_svfiprintf_r+0x130>
 8004964:	fb0c 2101 	mla	r1, ip, r1, r2
 8004968:	4604      	mov	r4, r0
 800496a:	2301      	movs	r3, #1
 800496c:	e7f0      	b.n	8004950 <_svfiprintf_r+0x194>
 800496e:	ab03      	add	r3, sp, #12
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	462a      	mov	r2, r5
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <_svfiprintf_r+0x1f8>)
 8004976:	a904      	add	r1, sp, #16
 8004978:	4638      	mov	r0, r7
 800497a:	f3af 8000 	nop.w
 800497e:	1c42      	adds	r2, r0, #1
 8004980:	4606      	mov	r6, r0
 8004982:	d1d6      	bne.n	8004932 <_svfiprintf_r+0x176>
 8004984:	89ab      	ldrh	r3, [r5, #12]
 8004986:	065b      	lsls	r3, r3, #25
 8004988:	f53f af2c 	bmi.w	80047e4 <_svfiprintf_r+0x28>
 800498c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800498e:	b01d      	add	sp, #116	; 0x74
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004994:	ab03      	add	r3, sp, #12
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	462a      	mov	r2, r5
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <_svfiprintf_r+0x1f8>)
 800499c:	a904      	add	r1, sp, #16
 800499e:	4638      	mov	r0, r7
 80049a0:	f000 f87a 	bl	8004a98 <_printf_i>
 80049a4:	e7eb      	b.n	800497e <_svfiprintf_r+0x1c2>
 80049a6:	bf00      	nop
 80049a8:	08006fc4 	.word	0x08006fc4
 80049ac:	08006fce 	.word	0x08006fce
 80049b0:	00000000 	.word	0x00000000
 80049b4:	08004705 	.word	0x08004705
 80049b8:	08006fca 	.word	0x08006fca

080049bc <_printf_common>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	4616      	mov	r6, r2
 80049c2:	4699      	mov	r9, r3
 80049c4:	688a      	ldr	r2, [r1, #8]
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bfb8      	it	lt
 80049d0:	4613      	movlt	r3, r2
 80049d2:	6033      	str	r3, [r6, #0]
 80049d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d8:	4607      	mov	r7, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	b10a      	cbz	r2, 80049e2 <_printf_common+0x26>
 80049de:	3301      	adds	r3, #1
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0699      	lsls	r1, r3, #26
 80049e6:	bf42      	ittt	mi
 80049e8:	6833      	ldrmi	r3, [r6, #0]
 80049ea:	3302      	addmi	r3, #2
 80049ec:	6033      	strmi	r3, [r6, #0]
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	f015 0506 	ands.w	r5, r5, #6
 80049f4:	d106      	bne.n	8004a04 <_printf_common+0x48>
 80049f6:	f104 0a19 	add.w	sl, r4, #25
 80049fa:	68e3      	ldr	r3, [r4, #12]
 80049fc:	6832      	ldr	r2, [r6, #0]
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	dc26      	bgt.n	8004a52 <_printf_common+0x96>
 8004a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a08:	1e13      	subs	r3, r2, #0
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	0692      	lsls	r2, r2, #26
 8004a12:	d42b      	bmi.n	8004a6c <_printf_common+0xb0>
 8004a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d01e      	beq.n	8004a60 <_printf_common+0xa4>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	68e5      	ldr	r5, [r4, #12]
 8004a26:	6832      	ldr	r2, [r6, #0]
 8004a28:	f003 0306 	and.w	r3, r3, #6
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	bf08      	it	eq
 8004a30:	1aad      	subeq	r5, r5, r2
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	6922      	ldr	r2, [r4, #16]
 8004a36:	bf0c      	ite	eq
 8004a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a3c:	2500      	movne	r5, #0
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	bfc4      	itt	gt
 8004a42:	1a9b      	subgt	r3, r3, r2
 8004a44:	18ed      	addgt	r5, r5, r3
 8004a46:	2600      	movs	r6, #0
 8004a48:	341a      	adds	r4, #26
 8004a4a:	42b5      	cmp	r5, r6
 8004a4c:	d11a      	bne.n	8004a84 <_printf_common+0xc8>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e008      	b.n	8004a64 <_printf_common+0xa8>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4652      	mov	r2, sl
 8004a56:	4649      	mov	r1, r9
 8004a58:	4638      	mov	r0, r7
 8004a5a:	47c0      	blx	r8
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d103      	bne.n	8004a68 <_printf_common+0xac>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a68:	3501      	adds	r5, #1
 8004a6a:	e7c6      	b.n	80049fa <_printf_common+0x3e>
 8004a6c:	18e1      	adds	r1, r4, r3
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	2030      	movs	r0, #48	; 0x30
 8004a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a76:	4422      	add	r2, r4
 8004a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a80:	3302      	adds	r3, #2
 8004a82:	e7c7      	b.n	8004a14 <_printf_common+0x58>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4622      	mov	r2, r4
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d0e6      	beq.n	8004a60 <_printf_common+0xa4>
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7d9      	b.n	8004a4a <_printf_common+0x8e>
	...

08004a98 <_printf_i>:
 8004a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	7e0f      	ldrb	r7, [r1, #24]
 8004a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa0:	2f78      	cmp	r7, #120	; 0x78
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	469a      	mov	sl, r3
 8004aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aae:	d807      	bhi.n	8004ac0 <_printf_i+0x28>
 8004ab0:	2f62      	cmp	r7, #98	; 0x62
 8004ab2:	d80a      	bhi.n	8004aca <_printf_i+0x32>
 8004ab4:	2f00      	cmp	r7, #0
 8004ab6:	f000 80d8 	beq.w	8004c6a <_printf_i+0x1d2>
 8004aba:	2f58      	cmp	r7, #88	; 0x58
 8004abc:	f000 80a3 	beq.w	8004c06 <_printf_i+0x16e>
 8004ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ac8:	e03a      	b.n	8004b40 <_printf_i+0xa8>
 8004aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ace:	2b15      	cmp	r3, #21
 8004ad0:	d8f6      	bhi.n	8004ac0 <_printf_i+0x28>
 8004ad2:	a101      	add	r1, pc, #4	; (adr r1, 8004ad8 <_printf_i+0x40>)
 8004ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b45 	.word	0x08004b45
 8004ae0:	08004ac1 	.word	0x08004ac1
 8004ae4:	08004ac1 	.word	0x08004ac1
 8004ae8:	08004ac1 	.word	0x08004ac1
 8004aec:	08004ac1 	.word	0x08004ac1
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004ac1 	.word	0x08004ac1
 8004af8:	08004ac1 	.word	0x08004ac1
 8004afc:	08004ac1 	.word	0x08004ac1
 8004b00:	08004ac1 	.word	0x08004ac1
 8004b04:	08004c51 	.word	0x08004c51
 8004b08:	08004b75 	.word	0x08004b75
 8004b0c:	08004c33 	.word	0x08004c33
 8004b10:	08004ac1 	.word	0x08004ac1
 8004b14:	08004ac1 	.word	0x08004ac1
 8004b18:	08004c73 	.word	0x08004c73
 8004b1c:	08004ac1 	.word	0x08004ac1
 8004b20:	08004b75 	.word	0x08004b75
 8004b24:	08004ac1 	.word	0x08004ac1
 8004b28:	08004ac1 	.word	0x08004ac1
 8004b2c:	08004c3b 	.word	0x08004c3b
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	602a      	str	r2, [r5, #0]
 8004b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0a3      	b.n	8004c8c <_printf_i+0x1f4>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	6829      	ldr	r1, [r5, #0]
 8004b48:	0606      	lsls	r6, r0, #24
 8004b4a:	f101 0304 	add.w	r3, r1, #4
 8004b4e:	d50a      	bpl.n	8004b66 <_printf_i+0xce>
 8004b50:	680e      	ldr	r6, [r1, #0]
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	2e00      	cmp	r6, #0
 8004b56:	da03      	bge.n	8004b60 <_printf_i+0xc8>
 8004b58:	232d      	movs	r3, #45	; 0x2d
 8004b5a:	4276      	negs	r6, r6
 8004b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b60:	485e      	ldr	r0, [pc, #376]	; (8004cdc <_printf_i+0x244>)
 8004b62:	230a      	movs	r3, #10
 8004b64:	e019      	b.n	8004b9a <_printf_i+0x102>
 8004b66:	680e      	ldr	r6, [r1, #0]
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b6e:	bf18      	it	ne
 8004b70:	b236      	sxthne	r6, r6
 8004b72:	e7ef      	b.n	8004b54 <_printf_i+0xbc>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	1d19      	adds	r1, r3, #4
 8004b7a:	6029      	str	r1, [r5, #0]
 8004b7c:	0601      	lsls	r1, r0, #24
 8004b7e:	d501      	bpl.n	8004b84 <_printf_i+0xec>
 8004b80:	681e      	ldr	r6, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <_printf_i+0xf2>
 8004b84:	0646      	lsls	r6, r0, #25
 8004b86:	d5fb      	bpl.n	8004b80 <_printf_i+0xe8>
 8004b88:	881e      	ldrh	r6, [r3, #0]
 8004b8a:	4854      	ldr	r0, [pc, #336]	; (8004cdc <_printf_i+0x244>)
 8004b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b8e:	bf0c      	ite	eq
 8004b90:	2308      	moveq	r3, #8
 8004b92:	230a      	movne	r3, #10
 8004b94:	2100      	movs	r1, #0
 8004b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9a:	6865      	ldr	r5, [r4, #4]
 8004b9c:	60a5      	str	r5, [r4, #8]
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	bfa2      	ittt	ge
 8004ba2:	6821      	ldrge	r1, [r4, #0]
 8004ba4:	f021 0104 	bicge.w	r1, r1, #4
 8004ba8:	6021      	strge	r1, [r4, #0]
 8004baa:	b90e      	cbnz	r6, 8004bb0 <_printf_i+0x118>
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	d04d      	beq.n	8004c4c <_printf_i+0x1b4>
 8004bb0:	4615      	mov	r5, r2
 8004bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8004bba:	5dc7      	ldrb	r7, [r0, r7]
 8004bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc0:	4637      	mov	r7, r6
 8004bc2:	42bb      	cmp	r3, r7
 8004bc4:	460e      	mov	r6, r1
 8004bc6:	d9f4      	bls.n	8004bb2 <_printf_i+0x11a>
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d10b      	bne.n	8004be4 <_printf_i+0x14c>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	07de      	lsls	r6, r3, #31
 8004bd0:	d508      	bpl.n	8004be4 <_printf_i+0x14c>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	6861      	ldr	r1, [r4, #4]
 8004bd6:	4299      	cmp	r1, r3
 8004bd8:	bfde      	ittt	le
 8004bda:	2330      	movle	r3, #48	; 0x30
 8004bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be4:	1b52      	subs	r2, r2, r5
 8004be6:	6122      	str	r2, [r4, #16]
 8004be8:	f8cd a000 	str.w	sl, [sp]
 8004bec:	464b      	mov	r3, r9
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f7ff fee2 	bl	80049bc <_printf_common>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d14c      	bne.n	8004c96 <_printf_i+0x1fe>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	b004      	add	sp, #16
 8004c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c06:	4835      	ldr	r0, [pc, #212]	; (8004cdc <_printf_i+0x244>)
 8004c08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c14:	6029      	str	r1, [r5, #0]
 8004c16:	061d      	lsls	r5, r3, #24
 8004c18:	d514      	bpl.n	8004c44 <_printf_i+0x1ac>
 8004c1a:	07df      	lsls	r7, r3, #31
 8004c1c:	bf44      	itt	mi
 8004c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c22:	6023      	strmi	r3, [r4, #0]
 8004c24:	b91e      	cbnz	r6, 8004c2e <_printf_i+0x196>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f023 0320 	bic.w	r3, r3, #32
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	2310      	movs	r3, #16
 8004c30:	e7b0      	b.n	8004b94 <_printf_i+0xfc>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f043 0320 	orr.w	r3, r3, #32
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	2378      	movs	r3, #120	; 0x78
 8004c3c:	4828      	ldr	r0, [pc, #160]	; (8004ce0 <_printf_i+0x248>)
 8004c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c42:	e7e3      	b.n	8004c0c <_printf_i+0x174>
 8004c44:	0659      	lsls	r1, r3, #25
 8004c46:	bf48      	it	mi
 8004c48:	b2b6      	uxthmi	r6, r6
 8004c4a:	e7e6      	b.n	8004c1a <_printf_i+0x182>
 8004c4c:	4615      	mov	r5, r2
 8004c4e:	e7bb      	b.n	8004bc8 <_printf_i+0x130>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	6826      	ldr	r6, [r4, #0]
 8004c54:	6961      	ldr	r1, [r4, #20]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	6028      	str	r0, [r5, #0]
 8004c5a:	0635      	lsls	r5, r6, #24
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	d501      	bpl.n	8004c64 <_printf_i+0x1cc>
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <_printf_i+0x1d2>
 8004c64:	0670      	lsls	r0, r6, #25
 8004c66:	d5fb      	bpl.n	8004c60 <_printf_i+0x1c8>
 8004c68:	8019      	strh	r1, [r3, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	4615      	mov	r5, r2
 8004c70:	e7ba      	b.n	8004be8 <_printf_i+0x150>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	602a      	str	r2, [r5, #0]
 8004c78:	681d      	ldr	r5, [r3, #0]
 8004c7a:	6862      	ldr	r2, [r4, #4]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f7fb faa6 	bl	80001d0 <memchr>
 8004c84:	b108      	cbz	r0, 8004c8a <_printf_i+0x1f2>
 8004c86:	1b40      	subs	r0, r0, r5
 8004c88:	6060      	str	r0, [r4, #4]
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c94:	e7a8      	b.n	8004be8 <_printf_i+0x150>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	47d0      	blx	sl
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d0ab      	beq.n	8004bfc <_printf_i+0x164>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	079b      	lsls	r3, r3, #30
 8004ca8:	d413      	bmi.n	8004cd2 <_printf_i+0x23a>
 8004caa:	68e0      	ldr	r0, [r4, #12]
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	4298      	cmp	r0, r3
 8004cb0:	bfb8      	it	lt
 8004cb2:	4618      	movlt	r0, r3
 8004cb4:	e7a4      	b.n	8004c00 <_printf_i+0x168>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	47d0      	blx	sl
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d09b      	beq.n	8004bfc <_printf_i+0x164>
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	9903      	ldr	r1, [sp, #12]
 8004cca:	1a5b      	subs	r3, r3, r1
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dcf2      	bgt.n	8004cb6 <_printf_i+0x21e>
 8004cd0:	e7eb      	b.n	8004caa <_printf_i+0x212>
 8004cd2:	2500      	movs	r5, #0
 8004cd4:	f104 0619 	add.w	r6, r4, #25
 8004cd8:	e7f5      	b.n	8004cc6 <_printf_i+0x22e>
 8004cda:	bf00      	nop
 8004cdc:	08006fd5 	.word	0x08006fd5
 8004ce0:	08006fe6 	.word	0x08006fe6

08004ce4 <memcpy>:
 8004ce4:	440a      	add	r2, r1
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cec:	d100      	bne.n	8004cf0 <memcpy+0xc>
 8004cee:	4770      	bx	lr
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	d1f9      	bne.n	8004cf2 <memcpy+0xe>
 8004cfe:	bd10      	pop	{r4, pc}

08004d00 <memmove>:
 8004d00:	4288      	cmp	r0, r1
 8004d02:	b510      	push	{r4, lr}
 8004d04:	eb01 0402 	add.w	r4, r1, r2
 8004d08:	d902      	bls.n	8004d10 <memmove+0x10>
 8004d0a:	4284      	cmp	r4, r0
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	d807      	bhi.n	8004d20 <memmove+0x20>
 8004d10:	1e43      	subs	r3, r0, #1
 8004d12:	42a1      	cmp	r1, r4
 8004d14:	d008      	beq.n	8004d28 <memmove+0x28>
 8004d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d1e:	e7f8      	b.n	8004d12 <memmove+0x12>
 8004d20:	4402      	add	r2, r0
 8004d22:	4601      	mov	r1, r0
 8004d24:	428a      	cmp	r2, r1
 8004d26:	d100      	bne.n	8004d2a <memmove+0x2a>
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d32:	e7f7      	b.n	8004d24 <memmove+0x24>

08004d34 <_free_r>:
 8004d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d36:	2900      	cmp	r1, #0
 8004d38:	d044      	beq.n	8004dc4 <_free_r+0x90>
 8004d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3e:	9001      	str	r0, [sp, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f1a1 0404 	sub.w	r4, r1, #4
 8004d46:	bfb8      	it	lt
 8004d48:	18e4      	addlt	r4, r4, r3
 8004d4a:	f000 f913 	bl	8004f74 <__malloc_lock>
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <_free_r+0x94>)
 8004d50:	9801      	ldr	r0, [sp, #4]
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	b933      	cbnz	r3, 8004d64 <_free_r+0x30>
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	b003      	add	sp, #12
 8004d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d60:	f000 b90e 	b.w	8004f80 <__malloc_unlock>
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d908      	bls.n	8004d7a <_free_r+0x46>
 8004d68:	6825      	ldr	r5, [r4, #0]
 8004d6a:	1961      	adds	r1, r4, r5
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	bf01      	itttt	eq
 8004d70:	6819      	ldreq	r1, [r3, #0]
 8004d72:	685b      	ldreq	r3, [r3, #4]
 8004d74:	1949      	addeq	r1, r1, r5
 8004d76:	6021      	streq	r1, [r4, #0]
 8004d78:	e7ed      	b.n	8004d56 <_free_r+0x22>
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b10b      	cbz	r3, 8004d84 <_free_r+0x50>
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d9fa      	bls.n	8004d7a <_free_r+0x46>
 8004d84:	6811      	ldr	r1, [r2, #0]
 8004d86:	1855      	adds	r5, r2, r1
 8004d88:	42a5      	cmp	r5, r4
 8004d8a:	d10b      	bne.n	8004da4 <_free_r+0x70>
 8004d8c:	6824      	ldr	r4, [r4, #0]
 8004d8e:	4421      	add	r1, r4
 8004d90:	1854      	adds	r4, r2, r1
 8004d92:	42a3      	cmp	r3, r4
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	d1e0      	bne.n	8004d5a <_free_r+0x26>
 8004d98:	681c      	ldr	r4, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	6053      	str	r3, [r2, #4]
 8004d9e:	4421      	add	r1, r4
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	e7da      	b.n	8004d5a <_free_r+0x26>
 8004da4:	d902      	bls.n	8004dac <_free_r+0x78>
 8004da6:	230c      	movs	r3, #12
 8004da8:	6003      	str	r3, [r0, #0]
 8004daa:	e7d6      	b.n	8004d5a <_free_r+0x26>
 8004dac:	6825      	ldr	r5, [r4, #0]
 8004dae:	1961      	adds	r1, r4, r5
 8004db0:	428b      	cmp	r3, r1
 8004db2:	bf04      	itt	eq
 8004db4:	6819      	ldreq	r1, [r3, #0]
 8004db6:	685b      	ldreq	r3, [r3, #4]
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	bf04      	itt	eq
 8004dbc:	1949      	addeq	r1, r1, r5
 8004dbe:	6021      	streq	r1, [r4, #0]
 8004dc0:	6054      	str	r4, [r2, #4]
 8004dc2:	e7ca      	b.n	8004d5a <_free_r+0x26>
 8004dc4:	b003      	add	sp, #12
 8004dc6:	bd30      	pop	{r4, r5, pc}
 8004dc8:	20000194 	.word	0x20000194

08004dcc <sbrk_aligned>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4e0e      	ldr	r6, [pc, #56]	; (8004e08 <sbrk_aligned+0x3c>)
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	6831      	ldr	r1, [r6, #0]
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	b911      	cbnz	r1, 8004dde <sbrk_aligned+0x12>
 8004dd8:	f000 f8bc 	bl	8004f54 <_sbrk_r>
 8004ddc:	6030      	str	r0, [r6, #0]
 8004dde:	4621      	mov	r1, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 f8b7 	bl	8004f54 <_sbrk_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d00a      	beq.n	8004e00 <sbrk_aligned+0x34>
 8004dea:	1cc4      	adds	r4, r0, #3
 8004dec:	f024 0403 	bic.w	r4, r4, #3
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d007      	beq.n	8004e04 <sbrk_aligned+0x38>
 8004df4:	1a21      	subs	r1, r4, r0
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f8ac 	bl	8004f54 <_sbrk_r>
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d101      	bne.n	8004e04 <sbrk_aligned+0x38>
 8004e00:	f04f 34ff 	mov.w	r4, #4294967295
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	20000198 	.word	0x20000198

08004e0c <_malloc_r>:
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	1ccd      	adds	r5, r1, #3
 8004e12:	f025 0503 	bic.w	r5, r5, #3
 8004e16:	3508      	adds	r5, #8
 8004e18:	2d0c      	cmp	r5, #12
 8004e1a:	bf38      	it	cc
 8004e1c:	250c      	movcc	r5, #12
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	4607      	mov	r7, r0
 8004e22:	db01      	blt.n	8004e28 <_malloc_r+0x1c>
 8004e24:	42a9      	cmp	r1, r5
 8004e26:	d905      	bls.n	8004e34 <_malloc_r+0x28>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	4630      	mov	r0, r6
 8004e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e34:	4e2e      	ldr	r6, [pc, #184]	; (8004ef0 <_malloc_r+0xe4>)
 8004e36:	f000 f89d 	bl	8004f74 <__malloc_lock>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	bb34      	cbnz	r4, 8004e8e <_malloc_r+0x82>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ffc2 	bl	8004dcc <sbrk_aligned>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	d14d      	bne.n	8004eea <_malloc_r+0xde>
 8004e4e:	6834      	ldr	r4, [r6, #0]
 8004e50:	4626      	mov	r6, r4
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d140      	bne.n	8004ed8 <_malloc_r+0xcc>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	eb04 0803 	add.w	r8, r4, r3
 8004e60:	f000 f878 	bl	8004f54 <_sbrk_r>
 8004e64:	4580      	cmp	r8, r0
 8004e66:	d13a      	bne.n	8004ede <_malloc_r+0xd2>
 8004e68:	6821      	ldr	r1, [r4, #0]
 8004e6a:	3503      	adds	r5, #3
 8004e6c:	1a6d      	subs	r5, r5, r1
 8004e6e:	f025 0503 	bic.w	r5, r5, #3
 8004e72:	3508      	adds	r5, #8
 8004e74:	2d0c      	cmp	r5, #12
 8004e76:	bf38      	it	cc
 8004e78:	250c      	movcc	r5, #12
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ffa5 	bl	8004dcc <sbrk_aligned>
 8004e82:	3001      	adds	r0, #1
 8004e84:	d02b      	beq.n	8004ede <_malloc_r+0xd2>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	442b      	add	r3, r5
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	e00e      	b.n	8004eac <_malloc_r+0xa0>
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	1b52      	subs	r2, r2, r5
 8004e92:	d41e      	bmi.n	8004ed2 <_malloc_r+0xc6>
 8004e94:	2a0b      	cmp	r2, #11
 8004e96:	d916      	bls.n	8004ec6 <_malloc_r+0xba>
 8004e98:	1961      	adds	r1, r4, r5
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	bf18      	it	ne
 8004ea0:	6059      	strne	r1, [r3, #4]
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	bf08      	it	eq
 8004ea6:	6031      	streq	r1, [r6, #0]
 8004ea8:	5162      	str	r2, [r4, r5]
 8004eaa:	604b      	str	r3, [r1, #4]
 8004eac:	4638      	mov	r0, r7
 8004eae:	f104 060b 	add.w	r6, r4, #11
 8004eb2:	f000 f865 	bl	8004f80 <__malloc_unlock>
 8004eb6:	f026 0607 	bic.w	r6, r6, #7
 8004eba:	1d23      	adds	r3, r4, #4
 8004ebc:	1af2      	subs	r2, r6, r3
 8004ebe:	d0b6      	beq.n	8004e2e <_malloc_r+0x22>
 8004ec0:	1b9b      	subs	r3, r3, r6
 8004ec2:	50a3      	str	r3, [r4, r2]
 8004ec4:	e7b3      	b.n	8004e2e <_malloc_r+0x22>
 8004ec6:	6862      	ldr	r2, [r4, #4]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	bf0c      	ite	eq
 8004ecc:	6032      	streq	r2, [r6, #0]
 8004ece:	605a      	strne	r2, [r3, #4]
 8004ed0:	e7ec      	b.n	8004eac <_malloc_r+0xa0>
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	6864      	ldr	r4, [r4, #4]
 8004ed6:	e7b2      	b.n	8004e3e <_malloc_r+0x32>
 8004ed8:	4634      	mov	r4, r6
 8004eda:	6876      	ldr	r6, [r6, #4]
 8004edc:	e7b9      	b.n	8004e52 <_malloc_r+0x46>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f000 f84c 	bl	8004f80 <__malloc_unlock>
 8004ee8:	e7a1      	b.n	8004e2e <_malloc_r+0x22>
 8004eea:	6025      	str	r5, [r4, #0]
 8004eec:	e7de      	b.n	8004eac <_malloc_r+0xa0>
 8004eee:	bf00      	nop
 8004ef0:	20000194 	.word	0x20000194

08004ef4 <_realloc_r>:
 8004ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef8:	4680      	mov	r8, r0
 8004efa:	4614      	mov	r4, r2
 8004efc:	460e      	mov	r6, r1
 8004efe:	b921      	cbnz	r1, 8004f0a <_realloc_r+0x16>
 8004f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	4611      	mov	r1, r2
 8004f06:	f7ff bf81 	b.w	8004e0c <_malloc_r>
 8004f0a:	b92a      	cbnz	r2, 8004f18 <_realloc_r+0x24>
 8004f0c:	f7ff ff12 	bl	8004d34 <_free_r>
 8004f10:	4625      	mov	r5, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f18:	f000 f838 	bl	8004f8c <_malloc_usable_size_r>
 8004f1c:	4284      	cmp	r4, r0
 8004f1e:	4607      	mov	r7, r0
 8004f20:	d802      	bhi.n	8004f28 <_realloc_r+0x34>
 8004f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f26:	d812      	bhi.n	8004f4e <_realloc_r+0x5a>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff ff6e 	bl	8004e0c <_malloc_r>
 8004f30:	4605      	mov	r5, r0
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0ed      	beq.n	8004f12 <_realloc_r+0x1e>
 8004f36:	42bc      	cmp	r4, r7
 8004f38:	4622      	mov	r2, r4
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	bf28      	it	cs
 8004f3e:	463a      	movcs	r2, r7
 8004f40:	f7ff fed0 	bl	8004ce4 <memcpy>
 8004f44:	4631      	mov	r1, r6
 8004f46:	4640      	mov	r0, r8
 8004f48:	f7ff fef4 	bl	8004d34 <_free_r>
 8004f4c:	e7e1      	b.n	8004f12 <_realloc_r+0x1e>
 8004f4e:	4635      	mov	r5, r6
 8004f50:	e7df      	b.n	8004f12 <_realloc_r+0x1e>
	...

08004f54 <_sbrk_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d06      	ldr	r5, [pc, #24]	; (8004f70 <_sbrk_r+0x1c>)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	f7fc f944 	bl	80011ec <_sbrk>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_sbrk_r+0x1a>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_sbrk_r+0x1a>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	2000019c 	.word	0x2000019c

08004f74 <__malloc_lock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_lock+0x8>)
 8004f76:	f000 b811 	b.w	8004f9c <__retarget_lock_acquire_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	200001a0 	.word	0x200001a0

08004f80 <__malloc_unlock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_unlock+0x8>)
 8004f82:	f000 b80c 	b.w	8004f9e <__retarget_lock_release_recursive>
 8004f86:	bf00      	nop
 8004f88:	200001a0 	.word	0x200001a0

08004f8c <_malloc_usable_size_r>:
 8004f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f90:	1f18      	subs	r0, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfbc      	itt	lt
 8004f96:	580b      	ldrlt	r3, [r1, r0]
 8004f98:	18c0      	addlt	r0, r0, r3
 8004f9a:	4770      	bx	lr

08004f9c <__retarget_lock_acquire_recursive>:
 8004f9c:	4770      	bx	lr

08004f9e <__retarget_lock_release_recursive>:
 8004f9e:	4770      	bx	lr

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr

08004fb8 <__pointer_chase_ccm_veneer>:
 8004fb8:	f85f f000 	ldr.w	pc, [pc]	; 8004fbc <__pointer_chase_ccm_veneer+0x4>
 8004fbc:	10000001 	.word	0x10000001

Disassembly of section .ccmram:

10000000 <pointer_chase_ccm>:
void pointer_chase_ccm( void ** p0){
10000000:	b480      	push	{r7}
10000002:	b085      	sub	sp, #20
10000004:	af00      	add	r7, sp, #0
10000006:	6078      	str	r0, [r7, #4]
    void **this_pp = p0;
10000008:	687b      	ldr	r3, [r7, #4]
1000000a:	60fb      	str	r3, [r7, #12]
    for(int i = 0;i<1000;i++){
1000000c:	2300      	movs	r3, #0
1000000e:	60bb      	str	r3, [r7, #8]
10000010:	e00a      	b.n	10000028 <pointer_chase_ccm+0x28>
      this_pp = *this_pp;
10000012:	68fb      	ldr	r3, [r7, #12]
10000014:	681b      	ldr	r3, [r3, #0]
10000016:	60fb      	str	r3, [r7, #12]
	  while(this_pp){
10000018:	68fb      	ldr	r3, [r7, #12]
1000001a:	2b00      	cmp	r3, #0
1000001c:	d1f9      	bne.n	10000012 <pointer_chase_ccm+0x12>
    this_pp = p0;
1000001e:	687b      	ldr	r3, [r7, #4]
10000020:	60fb      	str	r3, [r7, #12]
    for(int i = 0;i<1000;i++){
10000022:	68bb      	ldr	r3, [r7, #8]
10000024:	3301      	adds	r3, #1
10000026:	60bb      	str	r3, [r7, #8]
10000028:	68bb      	ldr	r3, [r7, #8]
1000002a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000002e:	dbf3      	blt.n	10000018 <pointer_chase_ccm+0x18>
}
10000030:	bf00      	nop
10000032:	bf00      	nop
10000034:	3714      	adds	r7, #20
10000036:	46bd      	mov	sp, r7
10000038:	f85d 7b04 	ldr.w	r7, [sp], #4
1000003c:	4770      	bx	lr
	...
