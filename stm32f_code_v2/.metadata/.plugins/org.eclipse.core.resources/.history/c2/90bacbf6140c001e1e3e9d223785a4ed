/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */


/*data size*/
#define POINTER_SIZE_2000


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
volatile uint32_t overflow_cnt;
volatile double execution_time;
volatile uint32_t tim_cnt;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#ifdef INPUT_ON_CCM
__attribute__((section(".ccmramdata")))
#endif
float position [1000] ={

0.314724,	0.505625,	-0.174344,	0.708896,	0.521778,	0.0769659,	0.343141,	0.691099,	1.17486,	1.24822,	0.499084,	1.3618,	1.38921,	0.948934,	1.28573,	0.639381,	0.921335,	1.4074,	1.26605,	1.40579,	1.06504,	0.398921,	1.15763,	1.1797,	0.854198,	0.856212,	0.758634,	0.319607,	0.490466,	-0.089564,	0.347166,	-0.426586,	-0.281451,	-0.611574,	-0.658409,	-0.0273254,	-0.247692,	-0.712737,	-0.161636,	-1.15332,	-0.818058,	-0.936719,	-0.606059,	-0.620966,	-1.26473,	-0.987766,	-1.0481,	-0.85361,	-0.7868,	-0.727766,
-1.1829,	-0.746112,	-0.728357,	-1.16966,	-1.15377,	-0.707176,	-0.171523,	-0.7103,	-0.379334,	-0.650065,	-0.0281484,	-0.427067,	-0.0771324,	0.215891,	0.507452,	0.674411,	0.358757,	0.0434744,	0.143407,	0.335948,	0.997704,	0.483251,	1.10795,	0.593962,	1.32797,	0.787984,	0.664515,	0.739252,	1.11459,	0.97223,	0.841018,	1.30072,	1.02599,	0.951895,	1.27179,	0.584326,	0.991597,	0.916698,	0.465363,	0.568842,	-0.0120272,	-0.126952,	0.253687,	0.403622,	0.458786,	-0.445245,	-0.105503,	-0.30237,	-0.854577,	-0.620413,
-0.881839,	-0.330786,	-0.88866,	-0.739153,	-1.16218,	-0.777714,	-1.1598,	-0.802556,	-0.791722,	-0.747285,	-1.04945,	-1.41073,	-1.2502,	-0.540682,	-1.26695,	-0.549635,	-0.784486,	-0.265849,	-1.11535,	-0.675459,	-0.92992,	0.0122506,	-0.853595,	0.0116787,	0.151699,	0.302373,	-0.381941,	0.0330147,	-0.00861977,	0.627543,	0.351581,	0.919309,	0.273921,	0.433373,	0.385915,	0.439853,	1.22845,	0.985659,	0.993556,	0.616962,	1.34364,	1.12136,	0.848979,	1.00002,	0.867466,	0.510862,	0.634707,	0.469066,	0.47216,	0.462834,
0.567555,	0.120851,	0.889115,	0.841528,	0.293982,	0.19572,	-0.0545269,	0.408017,	-0.22266,	-0.579656,	-0.00765125,	-0.492333,	-0.730731,	-0.65414,	-1.04165,	-1.07981,	-0.336301,	-0.381007,	-0.812358,	-1.36934,	-1.22662,	-1.13091,	-0.675706,	-1.48437,	-1.44964,	-1.30664,	-0.799729,	-0.68086,	-0.719456,	-0.862233,	-0.703978,	-0.884993,	-0.36014,	-0.833354,	-0.24779,	-0.658969,	-0.378489,	-0.0233805,	0.230692,	-0.368452,	0.579263,	0.523547,	0.330107,	0.371224,	0.46985,	0.411889,	0.690472,	0.762345,	1.1313,	1.16248,
1.05726,	0.827734,	1.2874,	1.02559,	0.85052,	1.43583,	1.35985,	1.01131,	1.05127,	0.974202,	0.544398,	0.57904,	0.682085,	0.367911,	0.901624,	0.166403,	0.107172,	-0.0422393,	-0.082349,	0.0267211,	-0.197749,	0.314743,	-0.277129,	-0.619148,	0.00732529,	-0.00742613,	-0.633056,	-1.03984,	-0.96543,	-0.880078,	-0.751324,	-1.13298,	-0.832367,	-0.754672,	-1.26517,	-1.38066,	-1.2026,	-1.17171,	-1.04763,	-0.935543,	-1.32006,	-1.09622,	-0.502241,	-1.21056,	-0.240056,	-0.361027,	-0.519288,	-0.340836,	-0.589352,	-0.271797,
0.330737,	0.0140703,	0.0883439,	-0.101926,	0.252986,	0.483118,	0.629576,	0.432837,	0.486272,	1.18215,	0.300297,	1.2085,	1.28917,	1.21586,	0.552997,	0.741229,	0.830002,	1.17972,	0.631904,	1.20199,	0.563138,	1.07619,	0.873447,	1.10638,	0.982153,	1.10296,	1.0153,	0.377439,	0.655492,	0.0634624,	-0.198553,	0.417526,	0.0742879,	-0.0457412,	0.279387,	-0.113889,	-0.202274,	-0.0534852,	-0.1963,	-0.508916,	-0.980711,	-0.995068,	-0.41251,	-1.32639,	-0.912653,	-1.2731,	-0.491425,	-0.776793,	-0.99851,	-1.02741,
-1.42841,	-0.785724,	-1.39526,	-1.32687,	-0.828319,	-1.1964,	-0.410212,	-0.33877,	-0.355275,	-0.843476,	-0.244432,	-0.292102,	0.258722,	0.0333244,	0.284405,	0.0377722,	0.115427,	0.605582,	-0.0418299,	0.0985595,	0.224815,	0.522893,	1.03755,	1.07669,	0.393231,	0.783128,	0.953026,	0.875975,	1.13948,	1.12422,	0.791896,	0.925242,	0.49283,	1.43539,	0.582978,	0.477356,	0.690176,	0.45434,	0.676809,	0.450649,	0.980713,	0.862056,	-0.0973716,	0.49254,	-0.074012,	-0.0196769,	0.00540287,	0.300738,	-0.322367,	0.147228,
-0.626728,	-0.315163,	-0.432845,	-0.636991,	-0.548191,	-0.642491,	-1.18552,	-1.28165,	-0.447506,	-1.30293,	-1.45918,	-0.938399,	-0.615565,	-0.816123,	-1.27289,	-1.0628,	-0.930078,	-0.359353,	-1.12637,	-0.361214,	-0.498774,	-0.687637,	-0.787722,	-0.460347,	-0.31265,	-0.577187,	-0.00944217,	-0.272924,	-0.0146638,	0.282526,	0.0481747,	0.180677,	0.597296,	0.330656,	0.969273,	1.20064,	1.01413,	0.685828,	0.975679,	0.54013,	1.3701,	1.36525,	1.31532,	0.760275,	1.08591,	0.496158,	0.871272,	0.721646,	0.524245,	0.48674,
0.667999,	0.269037,	0.696284,	0.485664,	0.622526,	0.534039,	0.376918,	-0.326155,	-0.390501,	-0.239661,	-0.127758,	-0.101954,	-0.443996,	-0.123336,	-0.31223,	-0.143911,	-0.657077,	-0.932237,	-1.21316,	-0.761052,	-0.637719,	-1.02842,	-1.38689,	-1.22732,	-1.34628,	-1.21508,	-1.0422,	-0.931529,	-0.968054,	-0.507667,	-0.813723,	-0.328578,	-0.567202,	-0.172884,	-0.809237,	-0.287693,	-0.583988,	-0.106754,	0.0138514,	-0.514212,	-0.227508,	-0.158529,	0.38382,	0.656777,	0.250124,	0.775405,	0.754496,	0.164371,	0.831747,	0.680979,
1.26689,	0.400248,	0.900757,	0.892491,	0.94922,	1.26875,	0.821372,	1.27397,	0.94103,	0.476192,	0.577663,	1.0759,	0.771438,	0.386515,	0.503429,	0.691586,	0.191997,	0.649736,	0.0611061,	0.639448,	-0.107365,	0.289388,	-0.387375,	-0.387703,	-0.681502,	-0.291096,	-0.274962,	-0.498173,	-0.700035,	-0.556066,	-0.620637,	-0.649308,	-0.744331,	-0.477943,	-1.24796,	-0.771827,	-1.25929,	-1.38059,	-0.887156,	-1.02886,	-0.995027,	-0.757034,	-0.604737,	-0.972106,	-0.599399,	-0.776726,	-0.27551,	-0.202906,	-0.692413,	-0.243939,
-0.180126,	-0.123989,	0.304505,	-0.20071,	-0.0478137,	-0.148412,	0.768143,	0.566525,	0.488889,	0.732106,	0.714945,	0.888284,	0.848198,	1.08066,	0.928826,	1.43769,	0.690892,	0.596527,	0.609039,	0.561562,	0.891208,	0.9138,	0.800396,	1.1579,	0.973169,	1.05969,	1.15512,	1.12235,	0.262496,	0.124497,	0.592191,	-0.103908,	0.231003,	0.137215,	0.368215,	-0.107938,	-0.298274,	-0.117323,	-0.141634,	-0.453152,	-0.711076,	-0.988793,	-0.626317,	-1.01676,	-1.29317,	-0.633043,	-1.18667,	-1.01924,	-0.796426,	-1.13774,
-0.763415,	-1.09784,	-0.792015,	-0.744516,	-0.969914,	-1.34718,	-0.981782,	-0.826091,	-0.910393,	-0.907071,	-0.19983,	-0.503844,	0.0461249,	-0.35493,	0.120994,	-0.151857,	0.359824,	0.405832,	0.12609,	0.0601679,	0.726572,	0.973126,	0.433812,	0.853877,	0.690804,	1.14769,	1.13694,	0.580561,	1.31138,	1.46589,	1.0073,	1.38409,	1.08478,	0.6385,	0.66077,	0.835421,	1.13545,	1.16175,	1.0672,	0.529061,	0.670802,	0.146528,	0.0825614,	0.0167218,	0.464854,	0.184292,	-0.220152,	-0.0147336,	-0.461911,	-0.653231,
0.0459021,	-0.337811,	-0.0583411,	-0.375987,	-0.568845,	-0.40871,	-0.41033,	-0.357782,	-1.39506,	-0.570085,	-0.853551,	-0.497108,	-0.970457,	-1.01972,	-0.689015,	-1.24375,	-0.945012,	-0.504349,	-0.78359,	-0.457548,	-0.50054,	-0.582262,	-0.843907,	-0.340715,	-0.835072,	-0.199836,	-0.0688368,	0.0982805,	0.358904,	0.550397,	0.436385,	0.346392,	0.7882,	0.531324,	0.055054,	0.240392,	1.05751,	0.747429,	1.16869,	0.585714,	0.972317,	1.08443,	0.511528,	1.10945,	0.862408,	0.544798,	0.970159,	0.648626,	0.545173,	0.584344,
0.473344,	0.455618,	0.241257,	0.758881,	0.324397,	0.494552,	0.559989,	0.269167,	0.208378,	0.0185629,	-0.402619,	-0.135859,	0.128377,	0.0531461,	-0.643442,	-0.794096,	-0.521377,	-0.523986,	-0.818573,	-1.09358,	-0.407587,	-1.32087,	-1.33562,	-1.32828,	-1.32315,	-0.878063,	-0.924736,	-1.43582,	-0.53627,	-0.708721,	-0.660086,	-1.2861,	-0.432145,	-0.293347,	-0.171248,	-0.218051,	-0.207009,	-0.389848,	-0.632251,	-0.314795,	-0.480854,	-0.484148,	0.524001,	-0.0147851,	0.0766545,	0.20846,	0.433243,	0.700366,	0.157871,	1.049,
0.832923,	1.18735,	0.732165,	0.872511,	0.513666,	0.65989,	1.15913,	0.830729,	1.39198,	0.595309,	1.43947,	0.955435,	1.07762,	1.31675,	0.54349,	0.600998,	0.575292,	0.792286,	0.759131,	-0.0506592,	-0.0680597,	0.0156263,	-0.386695,	-0.0214697,	-0.307029,	-0.565305,	-0.627715,	-0.0238316,	-0.341631,	-0.631426,	-0.264639,	-1.14288,	-0.563994,	-0.627837,	-0.848174,	-1.26268,	-0.877038,	-1.19196,	-1.3655,	-1.28477,	-0.590205,	-1.39163,	-1.18891,	-1.33665,	-0.898788,	-1.26894,	-0.318926,	-0.9462,	-0.969805,	-0.670499,
-0.431724,	-0.692153,	0.298462,	-0.265973,	-0.200877,	-0.336354,	-0.00134611,	-0.156432,	0.396482,	0.74241,	0.697178,	0.235467,	0.299455,	1.06167,	1.24756,	0.925784,	0.541835,	1.28984,	0.823848,	0.791592,	1.24583,	0.501771,	0.52189,	1.11364,	1.01202,	0.888414,	1.03716,	0.951774,	0.955529,	0.385025,	0.70651,	0.482443,	0.229835,	-0.200885,	0.419537,	-0.12261,	0.0477186,	0.0817545,	-0.652445,	-0.724558,	-0.394573,	-0.546112,	-0.222786,	-0.390094,	-0.523621,	-1.26797,	-1.29956,	-1.32835,	-0.653796,	-0.534895,
-0.810173,	-1.36786,	-0.773283,	-1.37177,	-1.34093,	-0.784424,	-1.05381,	-0.677469,	-0.522504,	-0.621095,	-0.389856,	-0.814375,	-0.228071,	0.0983699,	0.0892208,	-0.594181,	-0.214882,	-0.112211,	0.303342,	0.314796,	0.602593,	0.274126,	0.201685,	0.166554,	0.930259,	0.435858,	0.683019,	0.903148,	0.628439,	1.08055,	0.952845,	0.640285,	1.28057,	0.599464,	0.783165,	0.706829,	0.970999,	0.492903,	0.758991,	0.402263,	0.345474,	0.946066,	0.375046,	0.603016,	0.874922,	0.249899,	0.41591,	0.380791,	-0.0443581,	0.0785757,
-0.566321,	0.16029,	-0.68067,	-0.692936,	-0.24768,	-0.638852,	-0.432184,	-0.872816,	-1.05588,	-1.3433,	-0.750164,	-1.02759,	-1.02954,	-0.885747,	-1.44058,	-1.17855,	-0.706093,	-0.757052,	-1.2933,	-1.24444,	-1.22947,	-1.25301,	-0.769135,	-0.461167,	-0.312151,	-0.416851,	-0.747752,	-0.129751,	-0.537352,	-0.430246,	-0.366008,	-0.22298,	-0.0985112,	0.0254012,	0.239258,	0.326619,	0.311067,	0.42193,	1.13449,	1.00806,	0.915807,	0.591139,	0.656313,	0.54977,	1.40465,	1.20609,	1.0557,	0.799911,	0.631398,	1.05676,
1.38193,	0.51523,	0.54495,	0.618452,	0.222932,	0.753834,	0.387234,	0.877945,	0.203609,	0.325401,	-0.239643,	-0.112468,	-0.432542,	0.0655105,	0.0815072,	-0.532936,	-0.288451,	-0.765377,	-0.608844,	-0.380609,	-0.681976,	-1.0028,	-1.08916,	-0.977187,	-1.03924,	-1.12477,	-0.938719,	-0.75719,	-1.06811,	-1.04588,	-1.32341,	-1.38742,	-1.07613,	-0.994601,	-0.596123,	-0.223077,	-0.167686,	-0.562907,	-0.692487,	-0.0769132,	0.0140754,	0.0934058,	0.195927,	-0.341883,	0.333194,	0.212815,	0.0571459,	0.0354825,	0.848153,	0.281962,
0.346832,	0.918731,	1.20909,	0.885084,	1.11637,	0.603273,	1.42966,	1.03386,	1.17956,	0.53325,	1.29279,	1.20928,	0.548322,	0.911382,	0.661515,	0.823126,	0.608792,	0.551146,	0.236577,	0.225459,	-0.0998565,	0.709026,	0.341942,	0.521867,	-0.347115,	0.310695,	0.0855841,	-0.228262,	-0.459149,	-0.731111,	-0.321435,	-0.92364,	-1.16053,	-0.522559,	-0.675963,	-0.680765,	-0.793777,	-1.0473,	-1.09644,	-0.68205,	-1.18178,	-0.6757,	-0.682305,	-0.590547,	-0.899187,	-0.722134,	-0.351302,	-0.794618,	-1.10757,	-0.223174

          };

#ifdef INPUT_ON_CCM
__attribute__((section(".ccmramdata")))
#endif
float velocity [1000] ={
1.13119,	0.850078,	1.47707,	0.679508,	1.07351,	0.982573,	0.712581,	0.407029,	0.221842,	0.542722,	0.224403,	0.679371,	0.23272,	0.609059,	0.404197,	0.141763,	-0.352344,	0.32854,	-0.46188,	0.101291,	-0.692376,	-0.631282,	-1.001,	-0.526159,	-1.05678,	-1.25609,	-0.633715,	-1.05663,	-0.781606,	-1.08709,	-0.862646,	-1.47749,	-0.587725,	-0.686921,	-0.720951,	-0.623344,	-1.01345,	-0.730821,	-0.715473,	-0.695881,	-0.878574,	-0.826195,	-0.538622,	-0.673086,	-0.00288329,	0.275308,	-0.582161,	0.0232755,	-0.325424,	0.488604,
0.772807,	-0.055076,	0.907915,	0.0725519,	0.818531,	0.992406,	0.809703,	1.22007,	1.28452,	1.05342,	0.598039,	0.70107,	0.678683,	0.541679,	0.600127,	1.09303,	1.38989,	0.768839,	0.780027,	1.30007,	1.19948,	0.861191,	1.09665,	0.792909,	0.275247,	0.509017,	-0.00457487,	-0.0511189,	0.234134,	-0.0181553,	-0.233907,	-0.140906,	-0.0886348,	-0.347844,	-0.467496,	-0.518441,	-0.6669,	-1.16605,	-0.591523,	-0.369279,	-1.0566,	-0.476463,	-1.12839,	-0.605681,	-1.045,	-1.08374,	-1.26696,	-1.33671,	-1.12151,	-0.663087,
-0.556199,	-0.586781,	-1.20446,	-0.297613,	-0.138652,	-0.204583,	-0.842678,	-0.413103,	0.0100097,	0.134084,	-0.271297,	-0.126709,	0.376036,	0.277238,	0.517207,	0.21975,	0.245413,	0.97724,	0.987354,	1.22055,	0.451743,	0.575434,	0.532729,	0.954496,	0.679438,	1.39369,	0.598524,	0.53525,	1.03013,	1.21736,	0.719387,	0.539949,	0.64484,	0.452895,	0.682346,	1.00128,	0.640628,	0.0249084,	0.22167,	-0.210434,	0.13802,	-0.0311204,	0.434769,	0.149488,	-0.274166,	0.0395235,	-0.808938,	-0.643579,	-0.187996,	-0.273478,
-0.546114,	-0.702476,	-1.03045,	-0.481903,	-1.32818,	-0.747868,	-0.8477,	-0.666816,	-1.09749,	-0.731795,	-0.622439,	-1.10167,	-0.829111,	-0.350677,	-0.720639,	-0.871973,	-0.508356,	-0.686349,	-0.204169,	-0.455868,	-0.282818,	0.0169342,	0.394056,	-0.151006,	0.458747,	0.458512,	0.769918,	-0.0591846,	0.354825,	0.744698,	0.441818,	0.462375,	1.00748,	0.977329,	0.991249,	1.09996,	0.516577,	0.837622,	0.950113,	0.739633,	1.20375,	1.32498,	0.720728,	1.1313,	0.490055,	1.13254,	0.369988,	0.747859,	0.447479,	0.803945,
0.411863,	0.304495,	0.595622,	-0.0267963,	-0.0302056,	0.383967,	-0.636385,	0.196941,	-0.681386,	-0.294346,	-0.46129,	-0.453407,	-0.842007,	-0.650236,	-0.51915,	-1.36253,	-1.3406,	-0.483113,	-0.830437,	-1.26461,	-1.09647,	-1.37206,	-1.20983,	-1.19484,	-1.08591,	-1.22107,	-0.972298,	-1.13745,	-0.306177,	-1.02037,	-0.102792,	-0.54667,	-0.806692,	-0.416586,	0.0747282,	0.232777,	0.0829518,	0.32384,	0.629446,	-0.113555,	0.22784,	0.0586584,	0.291111,	0.893016,	0.965097,	1.18421,	0.943851,	0.478504,	1.3679,	1.27341,
0.77715,	1.04313,	1.48252,	1.20172,	1.30347,	0.866576,	0.863431,	0.90409,	0.554613,	0.968835,	0.650807,	0.714368,	0.290273,	0.0313988,	0.274471,	0.0645944,	0.391466,	0.283833,	0.0721993,	-0.561697,	-0.770583,	-0.326317,	-0.675499,	-0.12231,	-0.160604,	-0.928267,	-0.480303,	-0.443443,	-0.792071,	-0.546735,	-0.518874,	-0.935684,	-0.768852,	-0.922912,	-1.46626,	-1.02811,	-0.801136,	-0.889561,	-0.992677,	-0.373439,	-0.418525,	-0.328982,	-0.728768,	-0.425345,	-0.0580228,	0.0951824,	-0.0742184,	-0.437845,	0.108736,	-0.373106,
0.0609784,	0.419051,	0.781194,	0.750295,	0.511381,	0.865805,	0.602241,	1.22627,	1.30421,	1.23398,	0.803626,	0.905251,	0.723465,	1.27771,	1.38271,	1.41018,	1.04139,	1.05879,	0.576023,	1.28482,	0.784617,	0.480677,	1.10769,	0.896592,	0.936121,	0.252682,	0.550381,	0.44709,	-0.191545,	-0.00606738,	-0.23799,	0.103635,	-0.42828,	0.0880209,	-0.0750338,	-0.601008,	-0.577648,	-0.45951,	-0.392174,	-0.681881,	-0.773833,	-1.07111,	-0.980343,	-0.753229,	-0.603214,	-0.777491,	-1.48049,	-0.81509,	-1.03224,	-1.0041,
-1.28666,	-0.541749,	-0.975756,	-0.990565,	-0.8229,	-0.712091,	-0.457525,	-0.353419,	-0.426627,	-0.328206,	-0.112596,	0.129219,	0.522538,	0.393191,	0.168434,	0.695057,	0.0887258,	0.101516,	0.206552,	0.361242,	0.589634,	0.627564,	0.389689,	0.961312,	0.550971,	0.626757,	1.12623,	1.35932,	1.46914,	1.05073,	1.45192,	0.974256,	0.892615,	0.655516,	0.694272,	0.687876,	0.191951,	0.927294,	0.017438,	0.297715,	0.593272,	0.0636265,	0.183326,	0.288553,	0.25651,	0.203045,	-0.633345,	-0.658372,	-0.107747,	-0.495857,
-0.663098,	-0.625184,	-0.482253,	-0.825457,	-1.20238,	-0.988626,	-1.04326,	-0.524065,	-0.879117,	-0.802853,	-0.767175,	-1.11968,	-0.919154,	-0.83967,	-1.19113,	-0.728368,	-0.530518,	-0.726516,	-0.237827,	-0.258099,	-0.539954,	-0.352275,	-0.323538,	0.164285,	0.222771,	0.0186615,	0.381137,	0.729727,	0.663032,	0.674873,	0.164448,	0.52531,	0.800201,	0.735506,	0.385542,	0.614619,	1.262,	0.476063,	1.34714,	0.574685,	1.16889,	0.993292,	0.69439,	1.02157,	0.536212,	1.04012,	0.914797,	0.309295,	0.240242,	0.260147,
0.0449431,	0.372925,	0.678024,	0.36779,	0.172626,	0.416937,	-0.449191,	0.261674,	-0.636389,	-0.322993,	-0.789022,	-0.460677,	-1.09814,	-0.41269,	-0.400526,	-0.394791,	-0.378912,	-0.906363,	-1.17658,	-1.37429,	-0.984487,	-0.914106,	-0.734218,	-1.40157,	-0.800527,	-0.913121,	-1.21774,	-0.40003,	-0.68953,	-0.773009,	-0.198225,	-0.404335,	-0.52281,	-0.044821,	-0.257816,	-0.139572,	0.0855208,	-0.127496,	-0.15559,	0.282798,	0.66748,	0.301084,	0.0966972,	0.512866,	0.448457,	0.622435,	1.11998,	0.747959,	0.783781,	0.7944,
0.605221,	0.746469,	0.584672,	0.928802,	0.748249,	0.770182,	0.869427,	0.526281,	0.855581,	1.01177,	0.485728,	0.956605,	0.168296,	0.404824,	-0.0740361,	0.0506535,	-0.264613,	-0.174963,	-0.321245,	-0.295602,	-0.488099,	-0.622026,	-0.256869,	-0.0462215,	-0.0949556,	-0.894868,	-0.708943,	-0.884254,	-0.79754,	-1.1093,	-1.34993,	-1.01689,	-1.30478,	-1.46817,	-0.545297,	-1.06509,	-0.519889,	-0.694989,	-1.41644,	-0.700914,	-0.623359,	-0.624252,	-0.649455,	-0.909028,	-0.273876,	-0.731862,	-0.498078,	0.116619,	0.179442,	-0.175359,
-0.159854,	0.230461,	0.630502,	0.725685,	0.501298,	0.331298,	0.93583,	0.603381,	1.13695,	0.330069,	0.885647,	1.11752,	0.619131,	0.805774,	0.676682,	0.820743,	0.90254,	1.03714,	0.517321,	0.991647,	0.674678,	0.593329,	0.538422,	0.38494,	1.1154,	1.01626,	0.815129,	0.635533,	-0.0101305,	0.0780776,	-0.19203,	-0.479339,	-0.264029,	0.0200602,	-0.151615,	-0.328356,	-0.523217,	-0.761045,	-0.627551,	-0.442114,	-0.508672,	-0.75474,	-0.634547,	-0.779276,	-1.33495,	-0.977557,	-1.14867,	-1.4078,	-1.34614,	-1.27992,
-0.780143,	-0.985713,	-0.678468,	-1.06301,	-1.24877,	-0.657404,	-0.834559,	-0.0858511,	-0.0384515,	-0.460578,	-0.733246,	0.0110754,	0.276152,	0.510433,	-0.30457,	0.187,	0.414961,	0.611621,	0.732662,	0.746388,	0.900422,	0.617785,	0.888516,	0.477987,	0.465846,	1.42521,	0.758066,	1.08629,	1.46165,	0.683457,	0.678936,	0.805908,	1.36589,	0.783074,	0.616116,	0.436918,	0.616308,	0.520964,	0.197942,	0.41679,	-0.0166296,	0.412677,	-0.287756,	0.17573,	0.292379,	-0.36183,	-0.248052,	-0.22363,	-0.825575,	-0.48081,
-0.420139,	-0.920923,	-0.378451,	-0.310602,	-0.493664,	-0.884003,	-1.1522,	-0.716229,	-1.24807,	-0.539959,	-0.879387,	-0.891741,	-1.30184,	-1.35681,	-1.15513,	-0.505973,	-0.398986,	-0.547834,	-0.452232,	-0.870707,	-0.441716,	-0.119146,	-0.43364,	0.246618,	-0.553744,	-0.223287,	0.067138,	-0.284265,	0.478667,	0.404857,	0.469503,	0.85757,	0.968519,	0.974869,	0.572901,	0.768959,	1.1225,	0.524963,	0.560527,	0.746852,	1.01803,	1.47254,	1.2068,	0.794803,	0.75113,	1.27717,	1.29634,	0.973009,	0.529814,	0.296081,
0.971575,	0.637614,	0.915055,	-0.0626385,	0.3666,	-0.030125,	0.413462,	-0.323178,	-0.171387,	-0.31912,	0.0175513,	-0.225555,	-0.784205,	-0.758172,	-1.02118,	-0.55569,	-0.721062,	-1.17927,	-1.24989,	-0.960999,	-0.559148,	-0.935583,	-1.46546,	-1.4452,	-0.684677,	-1.01916,	-1.05898,	-0.613668,	-0.991685,	-0.767729,	-0.524536,	-0.293474,	-0.758374,	-0.353194,	0.0603052,	-0.745641,	-0.138453,	-0.213196,	-0.218287,	-0.163657,	0.430484,	0.764426,	0.0505842,	0.736324,	0.237594,	1.11536,	1.00024,	0.690212,	1.0552,	0.876786,
1.23074,	0.812369,	0.553661,	1.08617,	1.41019,	0.688591,	0.91208,	1.20397,	0.459552,	1.32305,	1.088,	0.822517,	0.379274,	0.618166,	0.556652,	0.946255,	0.715553,	0.728191,	0.347157,	-0.0275334,	0.404004,	-0.151121,	-0.49714,	-0.42868,	-0.212684,	-0.44782,	-0.333306,	-0.172119,	-0.276161,	-0.767138,	-0.393933,	-1.2892,	-1.39137,	-1.16703,	-0.91005,	-0.968243,	-0.596981,	-0.946648,	-1.03436,	-0.893165,	-0.683556,	-1.33048,	-0.488959,	-1.0822,	-0.673824,	-0.816534,	-0.61962,	-0.237406,	-0.636033,	-0.430275,
-0.412165,	-0.315541,	-0.083892,	0.568595,	0.256467,	0.283591,	0.149317,	1.02478,	0.54352,	1.05441,	0.892011,	0.712301,	1.26353,	1.21299,	0.925619,	1.29757,	1.39513,	0.929066,	0.827306,	1.07285,	1.35167,	1.11573,	0.745974,	1.04965,	1.20684,	0.726064,	0.647046,	0.335676,	0.00818482,	0.0269491,	-0.157471,	0.115108,	-0.438486,	0.367249,	-0.00451547,	-0.743848,	-0.81044,	-0.724508,	-0.56584,	-0.976163,	-1.17138,	-0.522744,	-0.958014,	-0.585878,	-0.975204,	-1.01173,	-1.42602,	-1.44281,	-1.40864,	-0.903,
-1.24329,	-0.620512,	-0.572561,	-0.424765,	-0.849204,	-1.05915,	-0.986813,	-0.602674,	-0.297403,	-0.626406,	-0.422467,	-0.150266,	0.224749,	-0.432088,	0.221837,	0.183741,	0.138043,	0.685682,	0.288175,	0.163834,	0.703084,	0.772949,	0.549605,	1.09013,	1.34428,	1.37498,	0.561305,	0.697439,	0.510117,	1.10535,	0.610183,	0.898306,	1.3565,	0.99241,	0.775702,	0.568408,	0.745774,	1.19775,	0.294903,	0.564255,	0.867073,	-0.0348449,	0.520763,	0.712208,	-0.0817547,	-0.330836,	0.120715,	0.245588,	-0.150663,	0.0433984,
-0.75464,	-0.280661,	-0.770491,	-0.77363,	-1.10512,	-0.502826,	-0.749676,	-0.680074,	-0.648377,	-1.4116,	-0.543577,	-1.0024,	-0.740457,	-0.738872,	-0.626017,	-1.26695,	-0.923223,	-0.710713,	-0.33663,	-0.366043,	-0.231021,	-0.46298,	-0.376354,	-0.0131913,	-0.738589,	0.209359,	-0.169176,	-0.440603,	0.368855,	-0.123999,	-0.038663,	0.516472,	0.253977,	0.407642,	0.563441,	0.639574,	0.683617,	0.963485,	0.568301,	0.628224,	0.564088,	0.812287,	1.26846,	0.732755,	1.2288,	1.16118,	1.26269,	1.22746,	0.64473,	0.604107,
0.753203,	0.483612,	0.911718,	0.805939,	0.463458,	0.0761785,	0.397406,	-0.148049,	-0.0249998,	-0.196767,	-0.141829,	0.21398,	-0.117022,	0.017413,	-0.814432,	-0.601341,	-1.15286,	-0.51477,	-0.72931,	-0.525459,	-0.43687,	-0.528939,	-1.07261,	-1.49567,	-0.959065,	-1.28616,	-1.25862,	-1.12634,	-1.32092,	-0.624904,	-0.570779,	-0.714653,	-0.850911,	-0.280916,	-0.478757,	0.013444,	0.0404013,	-0.40074,	-0.113083,	-0.213451,	0.162624,	0.436001,	0.483414,	-0.0411356,	0.748181,	0.0391419,	0.511489,	0.905571,	1.0259,	0.674745
					 };


#ifdef DATA_ON_CCM
__attribute__((section(".ccmramdata")))
#endif
int n = sizeof(position)/sizeof(position[0]);


typedef struct kalman_filter_param
{
	/* Transition*/
    float A_mat2f[4];
	/* Q covariance with respect to our process model noise. */
    float Q_mat2f[4];
	/* His the observation model, which maps the true state space into the observed space*/
    float H_vec2f[2];
	/* Observation noise: R covariance matrix 1x1 */
    float R_mat1f;
	/* P plus current covariance matrix 2x2: estimate error */
    float P_plus_mat2f[4];
	/* x plus current state vector 2x1: value, speed */
    float x_plus_vec2f[2];
} kalman_filter_param;


#ifdef DATA_ON_CCM
__attribute__((section(".ccmramdata")))
#endif
// This can not be const because the kalman_parameters have to be modified!!!
kalman_filter_param kalman_parameters = {
		/* A_mat2f[4]; */
		{1.0, 0.0001,
		 0.0, 1.0},
		/* float Q_mat2f[4]; */
		{0.002, 0.00,
		0.00, 0.002},
		/* float H_vec2f[2]; */
		{1.0, 1},
		/*R_mat1f; */
		0.04,
		/* float P_plus_mat2f[4]; */
		{0.1, 0,
		 0, 1},
		/* float x_plus_vec2f[2]; */
		{0.0, 0.0},
	};



#ifdef PROGRAM_ON_CCM
__attribute__((section(".ccmram")))
#endif
float* KalmanFilterStep(float z_plus_0, float z_plus_1, kalman_filter_param* kalman_param)
{

	/*0x2000000 +1  movs #48*/
	float P_estimate_mat2f[4]; /* matrix 2x2 */
	float x_estimate_vec2f[2]; /* vector 2x1 */
	/*static*/ float x_plus_vec2f_return[2];
	float K_gain_vec2f[2];  /* matrix 2x1 */
	float denominator_help;/* 0x20000001*/


	/* Prediction Step 1 */
	x_estimate_vec2f[0] = kalman_param->A_mat2f[0]*kalman_param->x_plus_vec2f[0] + kalman_param->A_mat2f[1]*kalman_param->x_plus_vec2f[1];
	x_estimate_vec2f[1] = kalman_param->A_mat2f[2]*kalman_param->x_plus_vec2f[0] + kalman_param->A_mat2f[3]*kalman_param->x_plus_vec2f[1];

	/* Prediction Step 2 */
	P_estimate_mat2f[0] = (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[0] +
						   kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[0];

	P_estimate_mat2f[0] += (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[1];

	P_estimate_mat2f[0] += kalman_param->Q_mat2f[0];




	P_estimate_mat2f[1] = (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[2];

	P_estimate_mat2f[1] += (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[3];

	P_estimate_mat2f[1] += kalman_param->Q_mat2f[1];




	P_estimate_mat2f[2] = (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[0];

	P_estimate_mat2f[2] += (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[1];

	P_estimate_mat2f[2] += kalman_param->Q_mat2f[2];




	P_estimate_mat2f[3] = (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[2];

	P_estimate_mat2f[3] += (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[3];

	P_estimate_mat2f[3] += kalman_param->Q_mat2f[3];



	/* Correction Step */
	/* Kalman Gain 3 */
	denominator_help = (kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + kalman_param->H_vec2f[1]*P_estimate_mat2f[2])*kalman_param->H_vec2f[0];
	denominator_help += (kalman_param->H_vec2f[0]*P_estimate_mat2f[1] + kalman_param->H_vec2f[1]*P_estimate_mat2f[3])*kalman_param->H_vec2f[1];
	denominator_help += kalman_param->R_mat1f;

	K_gain_vec2f[0] = (kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + kalman_param->H_vec2f[1]*P_estimate_mat2f[1])/denominator_help; /* temp_help shall be !=0 */
	K_gain_vec2f[1] = (kalman_param->H_vec2f[0]*P_estimate_mat2f[2] + kalman_param->H_vec2f[1]*P_estimate_mat2f[3])/denominator_help;


	/* Correction Step 4.*/
	/* updated state */
	kalman_param->x_plus_vec2f[0] = x_estimate_vec2f[0] + K_gain_vec2f[0]*(z_plus_0 - x_estimate_vec2f[0]);
	kalman_param->x_plus_vec2f[1] = x_estimate_vec2f[1] + K_gain_vec2f[1]*(z_plus_1 - x_estimate_vec2f[1]);


	/* updated covariance matrix */
	/* Correction Step 5.*/
	kalman_param->P_plus_mat2f[0] = (1.0 - K_gain_vec2f[0]*kalman_param->H_vec2f[0])*P_estimate_mat2f[0] - K_gain_vec2f[0]*kalman_param->H_vec2f[1]*P_estimate_mat2f[2];
	kalman_param->P_plus_mat2f[1] = (1.0 - K_gain_vec2f[0]*kalman_param->H_vec2f[0])*P_estimate_mat2f[1] - K_gain_vec2f[0]*kalman_param->H_vec2f[1]*P_estimate_mat2f[3];
	kalman_param->P_plus_mat2f[2] = -K_gain_vec2f[1]*kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + (1.0 - K_gain_vec2f[1]*kalman_param->H_vec2f[1])*P_estimate_mat2f[2];
	kalman_param->P_plus_mat2f[3] = -K_gain_vec2f[1]*kalman_param->H_vec2f[0]*P_estimate_mat2f[1] + (1.0 - K_gain_vec2f[1]*kalman_param->H_vec2f[1])*P_estimate_mat2f[3];

	//pass the value to our return value
	x_plus_vec2f_return[0] = (kalman_param->x_plus_vec2f[0]);
	x_plus_vec2f_return[1] = (kalman_param->x_plus_vec2f[1]);
	return x_plus_vec2f_return;
}


#ifdef PROGRAM_ON_CCM
__attribute__((section(".ccmram")))
#endif
void KalmanFiltermain( float* posi, float* velo, kalman_filter_param* kalman_param, int n){
	/* loop the position and velocity array*/
	for(int i = 0; i < n; i++)
	{
		position[i] = *(KalmanFilterStep(*(posi+i),*(velo+i), kalman_param)+0);
		velocity[i] = *(KalmanFilterStep(*(posi+i),*(velo+i), kalman_param)+1);
	}

}




void Sleep(int time)
{
  HAL_SuspendTick();
  uint32_t counter = time*2;/*divide by (16/32)*/
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);

  /* Enter sleep mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
  HAL_ResumeTick();
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
    int time1  = 0;
    int time2 = 0;

  //void **this_pp = p0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //start the timer
  HAL_TIM_Base_Start(&htim2);
  Sleep(200);
  time1 = TIM2->CNT;

  KalmanFiltermain( &position[0], &velocity[0], &kalman_parameters, n);


  time2 = TIM2->CNT;
  Sleep(200);
  tim_cnt = time2 -time1;

  execution_time = tim_cnt;
  uint8_t msg[40] = {'\0'};

  sprintf(msg,"\n\n\r###KF Test Starts###\n\rfor length %d : \n\r%d",n, (int)(execution_time*1000));
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
  //execution time is in ms

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i = 0;
  //measure 5 times
  while (i<5)
  {


	  //start the timer
	  HAL_TIM_Base_Start(&htim2);

	  Sleep(200);
	  time1 = TIM2->CNT;

	  KalmanFiltermain( &position[0], &velocity[0], &kalman_parameters, n);

	  time2 = TIM2->CNT;
	  Sleep(200);
	  tim_cnt = time2 -time1;

	  execution_time = (double)tim_cnt/(1000);
	  uint8_t msg[40] = {'\0'};

	  sprintf(msg,"\n\r%d", (int)(execution_time*1000));
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
	  i++;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  return 0;
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
