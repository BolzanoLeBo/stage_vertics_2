/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//#define KAL_CCM
//#define KAL_DATA_CCM
#define BUBBLE_CCM
#define BUBBLE_DATA_CCM
//#define CHASE_CCM
//#define CHASE_DATA_CCM
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */





const int srcArrayInFlash[1000] = {1804289383, 846930886, 1681692777, 1714636915, 1957747793, 424238335, 719885386, 1649760492, 596516649, 1189641421, 1025202362, 1350490027, 783368690, 1102520059, 2044897763, 1967513926, 1365180540, 1540383426, 304089172, 1303455736, 35005211, 521595368, 294702567, 1726956429, 336465782, 861021530, 278722862, 233665123, 2145174067, 468703135, 1101513929, 1801979802, 1315634022, 635723058, 1369133069, 1125898167, 1059961393, 2089018456, 628175011, 1656478042, 1131176229, 1653377373, 859484421, 1914544919, 608413784, 756898537, 1734575198, 1973594324, 149798315, 2038664370, 1129566413, 184803526, 412776091, 1424268980, 1911759956, 749241873, 137806862, 42999170, 982906996, 135497281, 511702305, 2084420925, 1937477084, 1827336327, 572660336, 1159126505, 805750846, 1632621729, 1100661313, 1433925857, 1141616124, 84353895, 939819582, 2001100545, 1998898814, 1548233367, 610515434, 1585990364, 1374344043, 760313750, 1477171087, 356426808, 945117276, 1889947178, 1780695788, 709393584, 491705403, 1918502651, 752392754, 1474612399, 2053999932, 1264095060, 1411549676, 1843993368, 943947739, 1984210012, 855636226, 1749698586, 1469348094, 1956297539, 1036140795, 463480570, 2040651434, 1975960378, 317097467, 1892066601, 1376710097, 927612902, 1330573317, 603570492, 1687926652, 660260756, 959997301, 485560280, 402724286, 593209441, 1194953865, 894429689, 364228444, 1947346619, 221558440, 270744729, 1063958031, 1633108117, 2114738097, 2007905771, 1469834481, 822890675, 1610120709, 791698927, 631704567, 498777856, 1255179497, 524872353, 327254586, 1572276965, 269455306, 1703964683, 352406219, 1600028624, 160051528, 2040332871, 112805732, 1120048829, 378409503, 515530019, 1713258270, 1573363368, 1409959708, 2077486715, 1373226340, 1631518149, 200747796, 289700723, 1117142618, 168002245, 150122846, 439493451, 990892921, 1760243555, 1231192379, 1622597488, 111537764, 338888228, 2147469841, 438792350, 1911165193, 269441500, 2142757034, 116087764, 1869470124, 155324914, 8936987, 1982275856, 1275373743, 387346491, 350322227, 841148365, 1960709859, 1760281936, 771151432, 1186452551, 1244316437, 971899228, 1476153275, 213975407, 1139901474, 1626276121, 653468858, 2130794395, 1239036029, 1884661237, 1605908235, 1350573793, 76065818, 1605894428, 1789366143, 1987231011, 1875335928, 1784639529, 2103318776, 1597322404, 1939964443, 2112255763, 1432114613, 1067854538, 352118606, 1782436840, 1909002904, 165344818, 1395235128, 532670688, 1351797369, 492067917, 1504569917, 680466996, 706043324, 496987743, 159259470, 1359512183, 480298490, 1398295499, 1096689772, 2086206725, 601385644, 1172755590, 1544617505, 243268139, 1012502954, 1272469786, 2027907669, 968338082, 722308542, 1820388464, 933110197, 6939507, 740759355, 1285228804, 1789376348, 502278611, 1450573622, 1037127828, 1034949299, 654887343, 1529195746, 392035568, 1335354340, 87755422, 889023311, 1494613810, 1447267605, 1369321801, 745425661, 396473730, 1308044878, 1346811305, 1569229320, 705178736, 1590079444, 434248626, 1977648522, 1470503465, 1402586708, 552473416, 1143408282, 188213258, 559412924, 1884167637, 1473442062, 201305624, 238962600, 776532036, 1238433452, 1273911899, 1431419379, 620145550, 1665947468, 619290071, 707900973, 407487131, 2113903881, 7684930, 1776808933, 711845894, 404158660, 937370163, 2058657199, 1973387981, 1642548899, 1501252996, 260152959, 1472713773, 824272813, 1662739668, 2025187190, 1967681095, 1850952926, 437116466, 1704365084, 1176911340, 638422090, 1943327684, 1953443376, 1876855542, 1069755936, 1237379107, 349517445, 588219756, 1856669179, 1057418418, 995706887, 1823089412, 1065103348, 625032172, 387451659, 1469262009, 1562402336, 298625210, 1295166342, 1057467587, 1799878206, 1555319301, 382697713, 476667372, 1070575321, 260401255, 296864819, 774044599, 697517721, 2001229904, 1950955939, 1335939811, 1797073940, 1756915667, 1065311705, 719346228, 846811127, 1414829150, 1307565984, 555996658, 324763920, 155789224, 231602422, 1389867269, 780821396, 619054081, 711645630, 195740084, 917679292, 2006811972, 1253207672, 570073850, 1414647625, 1635905385, 1046741222, 337739299, 1896306640, 1343606042, 1111783898, 446340713, 1197352298, 915256190, 1782280524, 846942590, 524688209, 700108581, 1566288819, 1371499336, 2114937732, 726371155, 1927495994, 292218004, 882160379, 11614769, 1682085273, 1662981776, 630668850, 246247255, 1858721860, 1548348142, 105575579, 964445884, 2118421993, 1520223205, 452867621, 1017679567, 1857962504, 201690613, 213801961, 822262754, 648031326, 1411154259, 1737518944, 282828202, 110613202, 114723506, 982936784, 1676902021, 1486222842, 950390868, 255789528, 1266235189, 1242608872, 1137949908, 1277849958, 777210498, 653448036, 1908518808, 1023457753, 364686248, 1309383303, 1129033333, 1329132133, 1280321648, 501772890, 1781999754, 150517567, 212251746, 1983690368, 364319529, 1034514500, 484238046, 1775473788, 624549797, 767066249, 1886086990, 739273303, 1750003033, 1415505363, 78012497, 552910253, 1671294892, 1344247686, 1795519125, 661761152, 474613996, 425245975, 1315209188, 235649157, 1448703729, 1679895436, 1545032460, 430253414, 861543921, 677870460, 932026304, 496060028, 828388027, 1144278050, 332266748, 1192707556, 31308902, 816504794, 820697697, 655858699, 1583571043, 559301039, 1395132002, 1186090428, 1974806403, 1473144500, 1739000681, 1498617647, 669908538, 1387036159, 12895151, 1144522535, 1812282134, 1328104339, 1380171692, 1113502215, 860516127, 777720504, 1543755629, 1722060049, 1455590964, 328298285, 70636429, 136495343, 1472576335, 402903177, 1329202900, 1503885238, 1219407971, 2416949, 12260289, 655495367, 561717988, 1407392292, 1841585795, 389040743, 733053144, 1433102829, 1887658390, 1402961682, 672655340, 1900553541, 400000569, 337453826, 1081174232, 1780172261, 1450956042, 1941690360, 410409117, 847228023, 1516266761, 1866000081, 1175526309, 1586903190, 2002495425, 500618996, 1989806367, 1184214677, 2004504234, 1061730690, 1186631626, 2016764524, 1717226057, 1748349614, 1276673168, 1411328205, 2137390358, 2009726312, 696947386, 1877565100, 1265204346, 1369602726, 1630634994, 1665204916, 1707056552, 564325578, 1297893529, 1010528946, 358532290, 1708302647, 1857756970, 1874799051, 1426819080, 885799631, 1314218593, 1281830857, 1386418627, 1156541312, 318561886, 1243439214, 70788355, 1505193512, 1112720090, 1788014412, 1106059479, 241909610, 1051858969, 1095966189, 104152274, 1748806355, 826047641, 1369356620, 970925433, 309198987, 887077888, 530498338, 873524566, 37487770, 1541027284, 1232056856, 1745790417, 1251300606, 959372260, 1025125849, 2137100237, 126107205, 159473059, 1376035217, 1282648518, 478034945, 471990783, 1353436873, 1983228458, 1584710873, 993967637, 941804289, 1826620483, 2045826607, 2037770478, 1930772757, 1647149314, 716334471, 1152645729, 470591100, 1025533459, 2039723618, 1001089438, 1899058025, 2077211388, 394633074, 983631233, 1675518157, 1645933681, 1943003493, 553160358, 1635550270, 2069110699, 712633417, 864101839, 1204275569, 1190668363, 1336092622, 410228794, 1026413173, 773319847, 1404196431, 1968217462, 452456682, 1302539390, 1858504292, 235745791, 802205057, 427355115, 1388391521, 1272796157, 1452888574, 1280631491, 126401947, 1204462951, 1210359231, 521035021, 40610537, 738393740, 19485054, 1983614030, 1291554098, 1655035325, 1905241081, 2004187516, 371653516, 962033002, 1047372231, 1707746139, 1372261796, 2073785404, 333582338, 628974580, 1894519218, 786039021, 1931513970, 1605539862, 1021784812, 586235379, 2032894977, 262692685, 1859031536, 1338299904, 1543324176, 1985433483, 395279207, 606199759, 358984857, 435889744, 1344593499, 378469911, 272020127, 488663950, 2033505236, 29777560, 345367818, 257675105, 991810563, 1392740049, 1965421244, 216588711, 1319041805, 151519934, 845563291, 1066077375, 937558955, 629593614, 524133589, 1959343768, 1215828993, 409544918, 74552805, 927376882, 1747844822, 1617876982, 765326717, 2143124030, 76593093, 1124311574, 431530126, 1421186593, 1502781486, 703550253, 1909850543, 1388803074, 733327814, 107734713, 1646478179, 1725138377, 1500474762, 1464415775, 1941727088, 672032919, 1615935710, 639806732, 1738110294, 406011017, 1269400346, 114760235, 217871137, 337745691, 524305153, 292423943, 1265122573, 124666328, 1910300925, 2030449291, 120306710, 1986894018, 1007277217, 551836836, 1260596963, 362575055, 1255387090, 1022963858, 1751378130, 1988714904, 1130698571, 1250372661, 1566369633, 483689685, 567304789, 1360613073, 1155722604, 35756851, 2000419805, 746349250, 441767868, 1122336503, 861109485, 659639006, 1460082195, 1385414639, 952062949, 577721120, 1510080967, 714880226, 460686763, 1630387677, 554290596, 1467963981, 34740865, 1814887560, 1830539036, 1290127955, 690367770, 1434433518, 1131359211, 1821066342, 537322532, 550245196, 157272379, 1104627321, 1910858270, 1312994984, 1140384172, 1763794427, 2059344234, 1582152040, 738647283, 772970072, 94307398, 51245830, 10901063, 1046370347, 628966950, 1520982030, 1761250573, 1089653714, 1003886059, 168057522, 410134047, 1038626924, 1982945082, 93189435, 181271232, 525829204, 1527622954, 1312630443, 199411898, 2064945486, 1862875640, 356684278, 1022089159, 1626250262, 1669679262, 14989683, 1242561041, 1581539848, 1597141723, 1981208324, 207026272, 1691449122, 2032454154, 217927335, 590335821, 513937457, 1738909365, 204102747, 1603591171, 595311776, 372160269, 2013725218, 1633938701, 207621703, 2106914653, 1815209933, 733450907, 1487053959, 980356728, 932862806, 1404515797, 695748720, 1289547084, 279121308, 174515334, 811742698, 294110991, 1417076376, 245798898, 1891252715, 1250801052, 452825171, 1435218189, 1135771559, 670752506, 2025554010, 1649709016, 262178224, 82173109, 1105816539, 857490000, 454333378, 972058109, 343945053, 661955081, 931489114, 11671338, 1395405989, 271059426, 992028067, 180785147, 1675575223, 1687776787, 1470332231, 1954696532, 1862292122, 134591281, 101323875, 1131884850, 380390179, 1992576590, 235202254, 833215350, 1280311131, 1370973813, 1503967857, 1158381494, 873199181, 1766146081, 1240554603, 1979015720, 476152433, 1694887982, 803590181, 820097487, 209359415, 1735079296, 831768825, 1604765404, 2006138722, 1823796892, 1785550551, 1534230297, 1364090032, 1108399134, 1341443181, 1078898506, 1242990415, 1442767057, 63299708, 1623380595, 1287859999, 298501962, 309112297, 420687483, 1669475776, 1813080154, 1579068977, 395191309, 1431742587, 672139932, 226723382, 1907895021, 219544266, 1030313563, 580508860, 428903682, 617909211, 1412277685, 2033669086, 476564285, 1088590930, 1671735990, 2010794583, 305197314, 632651476, 1204754116, 1384095820, 1875641892, 500037525, 1447395528, 1351538839, 1787897525, 1745897490, 1660651136, 61101360, 1267889618, 1326247643, 1640170337, 1663080928, 610506582, 164826621, 1889804310, 370917955, 384370888, 772634225, 951426815, 813274570, 1390543437, 216220853, 699460008, 1867107722, 1304811783, 223712350, 1730418657, 1610009097, 856363827, 787689126, 846621269, 584522071, 1287726651, 146533149, 1936060910, 928140528, 1892430639, 1449228398, 989241888, 1012836610, 627992393, 481928577, 528433890, 1238498976, 646755199, 270754552, 1609416931, 1031126087, 1043388777, 413360099, 1844400657, 286448566, 629580952, 396377017, 6072641, 1934392735, 620089368, 1736491298, 1396918184, 1476453195, 376696776, 96055805, 2060975266, 1664423428, 242588954, 1849552528, 445080308, 2135019593, 1151297278, 1434322197, 1000372555, 1779289672, 1916250774, 1528806445, 870305000, 415522325, 1799560997, 332238283, 1446648412, 695466127, 745598382, 1143565421};
#ifdef BUBBLE_DATA_CCM
__attribute__((section(".ccmramdata")))
#endif
int srcArray[1000];

#ifdef BUBBLE_CCM
__attribute__((section(".ccmram")))
#endif
void BubbleSort(Array)
int Array[];
/*
 * Sorts an array of integers of size NUMELEMS in ascending order.
 */
{
   int Sorted = FALSE;
   int Temp, LastIndex, Index, i;
   for (i = 1;
	i <= NUMELEMS-1;           /* apsim_loop 1 0 */
	i++)
   {
      Sorted = TRUE;
      for (Index = 0;
	   Index <= NUMELEMS-1;      /* apsim_loop 10 1 */
	   Index ++) {
         if (Index > NUMELEMS-i)
            break;
         if (Array[Index] > Array[Index + 1])
         {
            Temp = Array[Index];
            Array[Index] = Array[Index+1];
            Array[Index+1] = Temp;
            Sorted = FALSE;
         }
      }

      if (Sorted)
         break;
   }
}


#ifdef CHASE_DATA_CCM
__attribute__((section(".ccmramdata"))) void*
#else
const void * const
#endif
 pointers[1000] = {
  &pointers[1], &pointers[2], &pointers[3], &pointers[4], &pointers[5], &pointers[6], &pointers[7], &pointers[8], &pointers[9], &pointers[10], &pointers[11], &pointers[12], &pointers[13], &pointers[14], &pointers[15], &pointers[16], &pointers[17], &pointers[18], &pointers[19], &pointers[20], &pointers[21], &pointers[22], &pointers[23], &pointers[24], &pointers[25], &pointers[26], &pointers[27], &pointers[28], &pointers[29], &pointers[30], &pointers[31], &pointers[32], &pointers[33], &pointers[34], &pointers[35], &pointers[36], &pointers[37], &pointers[38], &pointers[39], &pointers[40], &pointers[41], &pointers[42], &pointers[43], &pointers[44], &pointers[45], &pointers[46], &pointers[47], &pointers[48], &pointers[49], &pointers[50],
  &pointers[51], &pointers[52], &pointers[53], &pointers[54], &pointers[55], &pointers[56], &pointers[57], &pointers[58], &pointers[59], &pointers[60], &pointers[61], &pointers[62], &pointers[63], &pointers[64], &pointers[65], &pointers[66], &pointers[67], &pointers[68], &pointers[69], &pointers[70], &pointers[71], &pointers[72], &pointers[73], &pointers[74], &pointers[75], &pointers[76], &pointers[77], &pointers[78], &pointers[79], &pointers[80], &pointers[81], &pointers[82], &pointers[83], &pointers[84], &pointers[85], &pointers[86], &pointers[87], &pointers[88], &pointers[89], &pointers[90], &pointers[91], &pointers[92], &pointers[93], &pointers[94], &pointers[95], &pointers[96], &pointers[97], &pointers[98], &pointers[99], &pointers[100],
  &pointers[101], &pointers[102], &pointers[103], &pointers[104], &pointers[105], &pointers[106], &pointers[107], &pointers[108], &pointers[109], &pointers[110], &pointers[111], &pointers[112], &pointers[113], &pointers[114], &pointers[115], &pointers[116], &pointers[117], &pointers[118], &pointers[119], &pointers[120], &pointers[121], &pointers[122], &pointers[123], &pointers[124], &pointers[125], &pointers[126], &pointers[127], &pointers[128], &pointers[129], &pointers[130], &pointers[131], &pointers[132], &pointers[133], &pointers[134], &pointers[135], &pointers[136], &pointers[137], &pointers[138], &pointers[139], &pointers[140], &pointers[141], &pointers[142], &pointers[143], &pointers[144], &pointers[145], &pointers[146], &pointers[147], &pointers[148], &pointers[149], &pointers[150],
  &pointers[151], &pointers[152], &pointers[153], &pointers[154], &pointers[155], &pointers[156], &pointers[157], &pointers[158], &pointers[159], &pointers[160], &pointers[161], &pointers[162], &pointers[163], &pointers[164], &pointers[165], &pointers[166], &pointers[167], &pointers[168], &pointers[169], &pointers[170], &pointers[171], &pointers[172], &pointers[173], &pointers[174], &pointers[175], &pointers[176], &pointers[177], &pointers[178], &pointers[179], &pointers[180], &pointers[181], &pointers[182], &pointers[183], &pointers[184], &pointers[185], &pointers[186], &pointers[187], &pointers[188], &pointers[189], &pointers[190], &pointers[191], &pointers[192], &pointers[193], &pointers[194], &pointers[195], &pointers[196], &pointers[197], &pointers[198], &pointers[199], &pointers[200],
  &pointers[201], &pointers[202], &pointers[203], &pointers[204], &pointers[205], &pointers[206], &pointers[207], &pointers[208], &pointers[209], &pointers[210], &pointers[211], &pointers[212], &pointers[213], &pointers[214], &pointers[215], &pointers[216], &pointers[217], &pointers[218], &pointers[219], &pointers[220], &pointers[221], &pointers[222], &pointers[223], &pointers[224], &pointers[225], &pointers[226], &pointers[227], &pointers[228], &pointers[229], &pointers[230], &pointers[231], &pointers[232], &pointers[233], &pointers[234], &pointers[235], &pointers[236], &pointers[237], &pointers[238], &pointers[239], &pointers[240], &pointers[241], &pointers[242], &pointers[243], &pointers[244], &pointers[245], &pointers[246], &pointers[247], &pointers[248], &pointers[249], &pointers[250],
  &pointers[251], &pointers[252], &pointers[253], &pointers[254], &pointers[255], &pointers[256], &pointers[257], &pointers[258], &pointers[259], &pointers[260], &pointers[261], &pointers[262], &pointers[263], &pointers[264], &pointers[265], &pointers[266], &pointers[267], &pointers[268], &pointers[269], &pointers[270], &pointers[271], &pointers[272], &pointers[273], &pointers[274], &pointers[275], &pointers[276], &pointers[277], &pointers[278], &pointers[279], &pointers[280], &pointers[281], &pointers[282], &pointers[283], &pointers[284], &pointers[285], &pointers[286], &pointers[287], &pointers[288], &pointers[289], &pointers[290], &pointers[291], &pointers[292], &pointers[293], &pointers[294], &pointers[295], &pointers[296], &pointers[297], &pointers[298], &pointers[299], &pointers[300],
  &pointers[301], &pointers[302], &pointers[303], &pointers[304], &pointers[305], &pointers[306], &pointers[307], &pointers[308], &pointers[309], &pointers[310], &pointers[311], &pointers[312], &pointers[313], &pointers[314], &pointers[315], &pointers[316], &pointers[317], &pointers[318], &pointers[319], &pointers[320], &pointers[321], &pointers[322], &pointers[323], &pointers[324], &pointers[325], &pointers[326], &pointers[327], &pointers[328], &pointers[329], &pointers[330], &pointers[331], &pointers[332], &pointers[333], &pointers[334], &pointers[335], &pointers[336], &pointers[337], &pointers[338], &pointers[339], &pointers[340], &pointers[341], &pointers[342], &pointers[343], &pointers[344], &pointers[345], &pointers[346], &pointers[347], &pointers[348], &pointers[349], &pointers[350],
  &pointers[351], &pointers[352], &pointers[353], &pointers[354], &pointers[355], &pointers[356], &pointers[357], &pointers[358], &pointers[359], &pointers[360], &pointers[361], &pointers[362], &pointers[363], &pointers[364], &pointers[365], &pointers[366], &pointers[367], &pointers[368], &pointers[369], &pointers[370], &pointers[371], &pointers[372], &pointers[373], &pointers[374], &pointers[375], &pointers[376], &pointers[377], &pointers[378], &pointers[379], &pointers[380], &pointers[381], &pointers[382], &pointers[383], &pointers[384], &pointers[385], &pointers[386], &pointers[387], &pointers[388], &pointers[389], &pointers[390], &pointers[391], &pointers[392], &pointers[393], &pointers[394], &pointers[395], &pointers[396], &pointers[397], &pointers[398], &pointers[399], &pointers[400],
  &pointers[401], &pointers[402], &pointers[403], &pointers[404], &pointers[405], &pointers[406], &pointers[407], &pointers[408], &pointers[409], &pointers[410], &pointers[411], &pointers[412], &pointers[413], &pointers[414], &pointers[415], &pointers[416], &pointers[417], &pointers[418], &pointers[419], &pointers[420], &pointers[421], &pointers[422], &pointers[423], &pointers[424], &pointers[425], &pointers[426], &pointers[427], &pointers[428], &pointers[429], &pointers[430], &pointers[431], &pointers[432], &pointers[433], &pointers[434], &pointers[435], &pointers[436], &pointers[437], &pointers[438], &pointers[439], &pointers[440], &pointers[441], &pointers[442], &pointers[443], &pointers[444], &pointers[445], &pointers[446], &pointers[447], &pointers[448], &pointers[449], &pointers[450],
  &pointers[451], &pointers[452], &pointers[453], &pointers[454], &pointers[455], &pointers[456], &pointers[457], &pointers[458], &pointers[459], &pointers[460], &pointers[461], &pointers[462], &pointers[463], &pointers[464], &pointers[465], &pointers[466], &pointers[467], &pointers[468], &pointers[469], &pointers[470], &pointers[471], &pointers[472], &pointers[473], &pointers[474], &pointers[475], &pointers[476], &pointers[477], &pointers[478], &pointers[479], &pointers[480], &pointers[481], &pointers[482], &pointers[483], &pointers[484], &pointers[485], &pointers[486], &pointers[487], &pointers[488], &pointers[489], &pointers[490], &pointers[491], &pointers[492], &pointers[493], &pointers[494], &pointers[495], &pointers[496], &pointers[497], &pointers[498], &pointers[499], &pointers[500],
  &pointers[501], &pointers[502], &pointers[503], &pointers[504], &pointers[505], &pointers[506], &pointers[507], &pointers[508], &pointers[509], &pointers[510], &pointers[511], &pointers[512], &pointers[513], &pointers[514], &pointers[515], &pointers[516], &pointers[517], &pointers[518], &pointers[519], &pointers[520], &pointers[521], &pointers[522], &pointers[523], &pointers[524], &pointers[525], &pointers[526], &pointers[527], &pointers[528], &pointers[529], &pointers[530], &pointers[531], &pointers[532], &pointers[533], &pointers[534], &pointers[535], &pointers[536], &pointers[537], &pointers[538], &pointers[539], &pointers[540], &pointers[541], &pointers[542], &pointers[543], &pointers[544], &pointers[545], &pointers[546], &pointers[547], &pointers[548], &pointers[549], &pointers[550],
  &pointers[551], &pointers[552], &pointers[553], &pointers[554], &pointers[555], &pointers[556], &pointers[557], &pointers[558], &pointers[559], &pointers[560], &pointers[561], &pointers[562], &pointers[563], &pointers[564], &pointers[565], &pointers[566], &pointers[567], &pointers[568], &pointers[569], &pointers[570], &pointers[571], &pointers[572], &pointers[573], &pointers[574], &pointers[575], &pointers[576], &pointers[577], &pointers[578], &pointers[579], &pointers[580], &pointers[581], &pointers[582], &pointers[583], &pointers[584], &pointers[585], &pointers[586], &pointers[587], &pointers[588], &pointers[589], &pointers[590], &pointers[591], &pointers[592], &pointers[593], &pointers[594], &pointers[595], &pointers[596], &pointers[597], &pointers[598], &pointers[599], &pointers[600],
  &pointers[601], &pointers[602], &pointers[603], &pointers[604], &pointers[605], &pointers[606], &pointers[607], &pointers[608], &pointers[609], &pointers[610], &pointers[611], &pointers[612], &pointers[613], &pointers[614], &pointers[615], &pointers[616], &pointers[617], &pointers[618], &pointers[619], &pointers[620], &pointers[621], &pointers[622], &pointers[623], &pointers[624], &pointers[625], &pointers[626], &pointers[627], &pointers[628], &pointers[629], &pointers[630], &pointers[631], &pointers[632], &pointers[633], &pointers[634], &pointers[635], &pointers[636], &pointers[637], &pointers[638], &pointers[639], &pointers[640], &pointers[641], &pointers[642], &pointers[643], &pointers[644], &pointers[645], &pointers[646], &pointers[647], &pointers[648], &pointers[649], &pointers[650],
  &pointers[651], &pointers[652], &pointers[653], &pointers[654], &pointers[655], &pointers[656], &pointers[657], &pointers[658], &pointers[659], &pointers[660], &pointers[661], &pointers[662], &pointers[663], &pointers[664], &pointers[665], &pointers[666], &pointers[667], &pointers[668], &pointers[669], &pointers[670], &pointers[671], &pointers[672], &pointers[673], &pointers[674], &pointers[675], &pointers[676], &pointers[677], &pointers[678], &pointers[679], &pointers[680], &pointers[681], &pointers[682], &pointers[683], &pointers[684], &pointers[685], &pointers[686], &pointers[687], &pointers[688], &pointers[689], &pointers[690], &pointers[691], &pointers[692], &pointers[693], &pointers[694], &pointers[695], &pointers[696], &pointers[697], &pointers[698], &pointers[699], &pointers[700],
  &pointers[701], &pointers[702], &pointers[703], &pointers[704], &pointers[705], &pointers[706], &pointers[707], &pointers[708], &pointers[709], &pointers[710], &pointers[711], &pointers[712], &pointers[713], &pointers[714], &pointers[715], &pointers[716], &pointers[717], &pointers[718], &pointers[719], &pointers[720], &pointers[721], &pointers[722], &pointers[723], &pointers[724], &pointers[725], &pointers[726], &pointers[727], &pointers[728], &pointers[729], &pointers[730], &pointers[731], &pointers[732], &pointers[733], &pointers[734], &pointers[735], &pointers[736], &pointers[737], &pointers[738], &pointers[739], &pointers[740], &pointers[741], &pointers[742], &pointers[743], &pointers[744], &pointers[745], &pointers[746], &pointers[747], &pointers[748], &pointers[749], &pointers[750],
  &pointers[751], &pointers[752], &pointers[753], &pointers[754], &pointers[755], &pointers[756], &pointers[757], &pointers[758], &pointers[759], &pointers[760], &pointers[761], &pointers[762], &pointers[763], &pointers[764], &pointers[765], &pointers[766], &pointers[767], &pointers[768], &pointers[769], &pointers[770], &pointers[771], &pointers[772], &pointers[773], &pointers[774], &pointers[775], &pointers[776], &pointers[777], &pointers[778], &pointers[779], &pointers[780], &pointers[781], &pointers[782], &pointers[783], &pointers[784], &pointers[785], &pointers[786], &pointers[787], &pointers[788], &pointers[789], &pointers[790], &pointers[791], &pointers[792], &pointers[793], &pointers[794], &pointers[795], &pointers[796], &pointers[797], &pointers[798], &pointers[799], &pointers[800],
  &pointers[801], &pointers[802], &pointers[803], &pointers[804], &pointers[805], &pointers[806], &pointers[807], &pointers[808], &pointers[809], &pointers[810], &pointers[811], &pointers[812], &pointers[813], &pointers[814], &pointers[815], &pointers[816], &pointers[817], &pointers[818], &pointers[819], &pointers[820], &pointers[821], &pointers[822], &pointers[823], &pointers[824], &pointers[825], &pointers[826], &pointers[827], &pointers[828], &pointers[829], &pointers[830], &pointers[831], &pointers[832], &pointers[833], &pointers[834], &pointers[835], &pointers[836], &pointers[837], &pointers[838], &pointers[839], &pointers[840], &pointers[841], &pointers[842], &pointers[843], &pointers[844], &pointers[845], &pointers[846], &pointers[847], &pointers[848], &pointers[849], &pointers[850],
  &pointers[851], &pointers[852], &pointers[853], &pointers[854], &pointers[855], &pointers[856], &pointers[857], &pointers[858], &pointers[859], &pointers[860], &pointers[861], &pointers[862], &pointers[863], &pointers[864], &pointers[865], &pointers[866], &pointers[867], &pointers[868], &pointers[869], &pointers[870], &pointers[871], &pointers[872], &pointers[873], &pointers[874], &pointers[875], &pointers[876], &pointers[877], &pointers[878], &pointers[879], &pointers[880], &pointers[881], &pointers[882], &pointers[883], &pointers[884], &pointers[885], &pointers[886], &pointers[887], &pointers[888], &pointers[889], &pointers[890], &pointers[891], &pointers[892], &pointers[893], &pointers[894], &pointers[895], &pointers[896], &pointers[897], &pointers[898], &pointers[899], &pointers[900],
  &pointers[901], &pointers[902], &pointers[903], &pointers[904], &pointers[905], &pointers[906], &pointers[907], &pointers[908], &pointers[909], &pointers[910], &pointers[911], &pointers[912], &pointers[913], &pointers[914], &pointers[915], &pointers[916], &pointers[917], &pointers[918], &pointers[919], &pointers[920], &pointers[921], &pointers[922], &pointers[923], &pointers[924], &pointers[925], &pointers[926], &pointers[927], &pointers[928], &pointers[929], &pointers[930], &pointers[931], &pointers[932], &pointers[933], &pointers[934], &pointers[935], &pointers[936], &pointers[937], &pointers[938], &pointers[939], &pointers[940], &pointers[941], &pointers[942], &pointers[943], &pointers[944], &pointers[945], &pointers[946], &pointers[947], &pointers[948], &pointers[949], &pointers[950],
  &pointers[951], &pointers[952], &pointers[953], &pointers[954], &pointers[955], &pointers[956], &pointers[957], &pointers[958], &pointers[959], &pointers[960], &pointers[961], &pointers[962], &pointers[963], &pointers[964],
  &pointers[965], &pointers[966], &pointers[967], &pointers[968], &pointers[969],
  &pointers[970], &pointers[971], &pointers[972], &pointers[973], &pointers[974],
  &pointers[975], &pointers[976], &pointers[977], &pointers[978], &pointers[979],
  &pointers[980], &pointers[981], &pointers[982], &pointers[983], &pointers[984],
  &pointers[985], &pointers[986], &pointers[987], &pointers[988], &pointers[989],
  &pointers[990], &pointers[991], &pointers[992], &pointers[993], &pointers[994],
  &pointers[995], &pointers[996], &pointers[997], &pointers[998], &pointers[999], NULL};

#ifdef CHASE_CCM
__attribute__((section(".ccmram")))
#endif
void pointer_chase( void ** p0){

    void **this_pp = p0;
    for(int i = 0;i<1000;i++){
	  while(this_pp){
      this_pp = *this_pp;
	  }
    this_pp = p0;
  }
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef KAL_DATA_CCM
__attribute__((section(".ccmramdata")))
#endif
float position [500] ={
	0.314724,	0.505625,	-0.174344,	0.708896,	0.521778,	0.0769659,	0.343141,	0.691099,	1.17486,	1.24822,	0.499084,	1.3618,	1.38921,	0.948934,	1.28573,	0.639381,	0.921335,	1.4074,	1.26605,	1.40579,	1.06504,	0.398921,	1.15763,	1.1797,	0.854198,	0.856212,	0.758634,	0.319607,	0.490466,	-0.089564,	0.347166,	-0.426586,	-0.281451,	-0.611574,	-0.658409,	-0.0273254,	-0.247692,	-0.712737,	-0.161636,	-1.15332,	-0.818058,	-0.936719,	-0.606059,	-0.620966,	-1.26473,	-0.987766,	-1.0481,	-0.85361,	-0.7868,	-0.727766,
-1.1829,	-0.746112,	-0.728357,	-1.16966,	-1.15377,	-0.707176,	-0.171523,	-0.7103,	-0.379334,	-0.650065,	-0.0281484,	-0.427067,	-0.0771324,	0.215891,	0.507452,	0.674411,	0.358757,	0.0434744,	0.143407,	0.335948,	0.997704,	0.483251,	1.10795,	0.593962,	1.32797,	0.787984,	0.664515,	0.739252,	1.11459,	0.97223,	0.841018,	1.30072,	1.02599,	0.951895,	1.27179,	0.584326,	0.991597,	0.916698,	0.465363,	0.568842,	-0.0120272,	-0.126952,	0.253687,	0.403622,	0.458786,	-0.445245,	-0.105503,	-0.30237,	-0.854577,	-0.620413,
-0.881839,	-0.330786,	-0.88866,	-0.739153,	-1.16218,	-0.777714,	-1.1598,	-0.802556,	-0.791722,	-0.747285,	-1.04945,	-1.41073,	-1.2502,	-0.540682,	-1.26695,	-0.549635,	-0.784486,	-0.265849,	-1.11535,	-0.675459,	-0.92992,	0.0122506,	-0.853595,	0.0116787,	0.151699,	0.302373,	-0.381941,	0.0330147,	-0.00861977,	0.627543,	0.351581,	0.919309,	0.273921,	0.433373,	0.385915,	0.439853,	1.22845,	0.985659,	0.993556,	0.616962,	1.34364,	1.12136,	0.848979,	1.00002,	0.867466,	0.510862,	0.634707,	0.469066,	0.47216,	0.462834,
0.567555,	0.120851,	0.889115,	0.841528,	0.293982,	0.19572,	-0.0545269,	0.408017,	-0.22266,	-0.579656,	-0.00765125,	-0.492333,	-0.730731,	-0.65414,	-1.04165,	-1.07981,	-0.336301,	-0.381007,	-0.812358,	-1.36934,	-1.22662,	-1.13091,	-0.675706,	-1.48437,	-1.44964,	-1.30664,	-0.799729,	-0.68086,	-0.719456,	-0.862233,	-0.703978,	-0.884993,	-0.36014,	-0.833354,	-0.24779,	-0.658969,	-0.378489,	-0.0233805,	0.230692,	-0.368452,	0.579263,	0.523547,	0.330107,	0.371224,	0.46985,	0.411889,	0.690472,	0.762345,	1.1313,	1.16248,
1.05726,	0.827734,	1.2874,	1.02559,	0.85052,	1.43583,	1.35985,	1.01131,	1.05127,	0.974202,	0.544398,	0.57904,	0.682085,	0.367911,	0.901624,	0.166403,	0.107172,	-0.0422393,	-0.082349,	0.0267211,	-0.197749,	0.314743,	-0.277129,	-0.619148,	0.00732529,	-0.00742613,	-0.633056,	-1.03984,	-0.96543,	-0.880078,	-0.751324,	-1.13298,	-0.832367,	-0.754672,	-1.26517,	-1.38066,	-1.2026,	-1.17171,	-1.04763,	-0.935543,	-1.32006,	-1.09622,	-0.502241,	-1.21056,	-0.240056,	-0.361027,	-0.519288,	-0.340836,	-0.589352,	-0.271797,
0.330737,	0.0140703,	0.0883439,	-0.101926,	0.252986,	0.483118,	0.629576,	0.432837,	0.486272,	1.18215,	0.300297,	1.2085,	1.28917,	1.21586,	0.552997,	0.741229,	0.830002,	1.17972,	0.631904,	1.20199,	0.563138,	1.07619,	0.873447,	1.10638,	0.982153,	1.10296,	1.0153,	0.377439,	0.655492,	0.0634624,	-0.198553,	0.417526,	0.0742879,	-0.0457412,	0.279387,	-0.113889,	-0.202274,	-0.0534852,	-0.1963,	-0.508916,	-0.980711,	-0.995068,	-0.41251,	-1.32639,	-0.912653,	-1.2731,	-0.491425,	-0.776793,	-0.99851,	-1.02741,
-1.42841,	-0.785724,	-1.39526,	-1.32687,	-0.828319,	-1.1964,	-0.410212,	-0.33877,	-0.355275,	-0.843476,	-0.244432,	-0.292102,	0.258722,	0.0333244,	0.284405,	0.0377722,	0.115427,	0.605582,	-0.0418299,	0.0985595,	0.224815,	0.522893,	1.03755,	1.07669,	0.393231,	0.783128,	0.953026,	0.875975,	1.13948,	1.12422,	0.791896,	0.925242,	0.49283,	1.43539,	0.582978,	0.477356,	0.690176,	0.45434,	0.676809,	0.450649,	0.980713,	0.862056,	-0.0973716,	0.49254,	-0.074012,	-0.0196769,	0.00540287,	0.300738,	-0.322367,	0.147228,
-0.626728,	-0.315163,	-0.432845,	-0.636991,	-0.548191,	-0.642491,	-1.18552,	-1.28165,	-0.447506,	-1.30293,	-1.45918,	-0.938399,	-0.615565,	-0.816123,	-1.27289,	-1.0628,	-0.930078,	-0.359353,	-1.12637,	-0.361214,	-0.498774,	-0.687637,	-0.787722,	-0.460347,	-0.31265,	-0.577187,	-0.00944217,	-0.272924,	-0.0146638,	0.282526,	0.0481747,	0.180677,	0.597296,	0.330656,	0.969273,	1.20064,	1.01413,	0.685828,	0.975679,	0.54013,	1.3701,	1.36525,	1.31532,	0.760275,	1.08591,	0.496158,	0.871272,	0.721646,	0.524245,	0.48674,
0.667999,	0.269037,	0.696284,	0.485664,	0.622526,	0.534039,	0.376918,	-0.326155,	-0.390501,	-0.239661,	-0.127758,	-0.101954,	-0.443996,	-0.123336,	-0.31223,	-0.143911,	-0.657077,	-0.932237,	-1.21316,	-0.761052,	-0.637719,	-1.02842,	-1.38689,	-1.22732,	-1.34628,	-1.21508,	-1.0422,	-0.931529,	-0.968054,	-0.507667,	-0.813723,	-0.328578,	-0.567202,	-0.172884,	-0.809237,	-0.287693,	-0.583988,	-0.106754,	0.0138514,	-0.514212,	-0.227508,	-0.158529,	0.38382,	0.656777,	0.250124,	0.775405,	0.754496,	0.164371,	0.831747,	0.680979,
1.26689,	0.400248,	0.900757,	0.892491,	0.94922,	1.26875,	0.821372,	1.27397,	0.94103,	0.476192,	0.577663,	1.0759,	0.771438,	0.386515,	0.503429,	0.691586,	0.191997,	0.649736,	0.0611061,	0.639448,	-0.107365,	0.289388,	-0.387375,	-0.387703,	-0.681502,	-0.291096,	-0.274962,	-0.498173,	-0.700035,	-0.556066,	-0.620637,	-0.649308,	-0.744331,	-0.477943,	-1.24796,	-0.771827,	-1.25929,	-1.38059,	-0.887156,	-1.02886,	-0.995027,	-0.757034,	-0.604737,	-0.972106,	-0.599399,	-0.776726,	-0.27551,	-0.202906,	-0.692413,	-0.243939


          };
#ifdef KAL_DATA_CCM
__attribute__((section(".ccmramdata")))
#endif
float velocity [500] ={
1.08225,	1.03574,	1.35001,	0.720116,	0.739135,	0.496797,	1.26517,	0.910394,	0.67617,	0.760927,	0.585018,	0.600908,	0.406244,	0.488545,	0.192462,	0.564442,	-0.310523,	-0.523046,	-0.617505,	-0.759698,	-0.511567,	-0.556473,	-0.722685,	-0.402771,	-0.609497,	-0.529163,	-0.424035,	-0.431331,	-1.25019,	-1.33208,	-0.793726,	-1.40532,	-0.97289,	-0.957136,	-0.605658,	-0.951603,	-1.0033,	-0.676669,	-0.54971,	-0.70588,	-0.805931,	-0.924827,	-0.404169,	-0.638654,	-0.762879,	0.0441375,	-0.369367,	-0.0699864,	0.275295,	0.0457406,
0.520002,	0.272685,	0.651933,	0.758422,	0.576998,	0.228247,	0.606424,	0.759022,	0.65579,	0.624532,	1.28189,	0.91319,	1.38431,	0.891042,	1.2623,	0.873379,	1.25875,	1.16946,	0.746793,	0.531744,	1.04431,	1.13385,	0.435917,	0.697342,	0.377192,	0.680136,	0.520114,	-0.179373,	0.415936,	0.44387,	-0.131077,	0.140737,	-0.251129,	-0.776624,	-0.819426,	-0.695057,	-0.430014,	-0.423063,	-0.52113,	-1.04691,	-0.877066,	-1.35777,	-1.36314,	-1.35593,	-0.821041,	-1.002,	-1.29498,	-0.967359,	-1.28282,	-1.33422,
-0.488359,	-0.720009,	-0.284657,	-0.444159,	-0.478193,	-0.16014,	-0.00632429,	0.197622,	-0.693808,	0.27001,	0.116992,	0.594186,	0.230685,	0.279269,	0.694838,	0.211148,	0.566384,	1.04845,	0.795094,	1.13125,	1.08249,	0.979193,	0.680368,	1.13115,	0.569675,	1.12376,	1.16038,	1.22084,	1.36358,	1.42716,	1.17648,	0.942413,	1.2342,	0.82284,	0.189176,	0.21578,	0.874415,	0.407671,	0.675671,	-0.0556451,	0.189029,	0.167042,	-0.530801,	-0.047401,	-0.397406,	-0.805392,	-0.456915,	-0.841074,	-0.992269,	-0.985478,
-1.11317,	-1.13174,	-1.33108,	-0.782733,	-1.17109,	-0.939857,	-0.799015,	-1.00085,	-0.959967,	-1.03643,	-1.33373,	-0.933776,	-0.528374,	-0.455878,	-0.999654,	-0.993936,	-0.562848,	-0.406674,	-0.54365,	-0.663793,	0.17277,	-0.595738,	-0.472969,	-0.33672,	-0.212596,	0.340399,	0.389454,	-0.0390294,	0.929158,	0.810706,	0.898158,	0.295396,	1.15679,	1.28716,	1.38504,	1.29846,	1.25458,	1.00221,	0.676375,	0.897317,	0.622636,	0.499692,	1.37836,	0.70156,	0.647826,	0.628751,	0.698454,	0.807848,	0.10655,	0.839392,
0.467115,	0.669001,	0.0664526,	0.0660886,	-0.42541,	-0.402456,	-0.0158749,	-0.445188,	0.0278928,	-0.843312,	-0.0593113,	-0.588537,	-0.496112,	-0.271023,	-1.04245,	-0.967269,	-0.959632,	-0.693958,	-0.663583,	-1.39563,	-1.32184,	-1.13445,	-1.42157,	-0.930798,	-1.08173,	-1.19764,	-1.11136,	-0.353956,	-0.514939,	-0.646184,	-0.120701,	-0.841678,	-0.108548,	-0.0226921,	-0.0993765,	-0.377711,	0.135257,	-0.062446,	-0.130064,	0.0442544,	0.819121,	0.0839197,	0.338121,	0.226605,	0.685066,	0.319693,	1.25861,	0.604478,	0.538521,	0.780405,
0.94726,	0.601133,	1.49313,	0.818138,	0.761845,	0.49536,	0.69105,	0.389728,	0.790949,	0.981242,	0.777989,	0.15745,	0.0633895,	0.669915,	0.704033,	0.235907,	-0.287493,	0.329346,	-0.258215,	-0.401228,	-0.0458254,	-0.875821,	-0.927871,	-0.393803,	-0.53804,	-0.688785,	-0.551414,	-0.632301,	-0.60822,	-1.14277,	-0.770074,	-0.928172,	-1.10072,	-1.43808,	-0.711939,	-1.13706,	-0.839572,	-0.66951,	-1.26018,	-1.18268,	-0.698517,	-0.692838,	-0.210827,	-0.219569,	-0.196234,	-0.786987,	-0.669797,	-0.556094,	0.253236,	0.49785,
0.337967,	-0.115798,	0.570193,	0.0496988,	0.144325,	0.749774,	0.514008,	0.908297,	1.06537,	0.953022,	1.15477,	0.685336,	1.21174,	1.46389,	1.3668,	0.582702,	0.849543,	0.829121,	1.11217,	0.983048,	1.12359,	0.642658,	0.414071,	0.220673,	0.825569,	0.173406,	0.265427,	0.334589,	-0.085407,	0.228555,	-0.0287964,	-0.46119,	0.0702681,	-0.707572,	-0.607546,	-0.753662,	-0.544678,	-1.06282,	-0.821227,	-1.18666,	-1.23629,	-0.612723,	-1.1452,	-0.863491,	-0.523197,	-1.06586,	-0.804346,	-0.731767,	-1.0381,	-0.786426,
-1.29394,	-0.422671,	-1.11315,	-0.970615,	-0.367783,	-0.600179,	-0.235121,	-0.519332,	-0.54951,	-0.689102,	0.0453312,	-0.0987473,	0.0233623,	0.280699,	-0.172242,	0.178997,	0.72711,	0.737482,	0.247638,	0.327495,	0.357766,	0.333657,	0.801117,	1.07698,	1.17852,	1.01145,	0.60391,	1.13177,	0.621415,	0.614193,	0.553668,	0.562742,	0.545408,	0.521083,	0.581749,	0.512498,	0.338477,	0.290597,	0.845727,	0.564753,	0.322381,	-0.146474,	-0.218118,	-0.45274,	0.284075,	-0.0213517,	-0.266341,	-0.603525,	-0.839409,	-0.466722,
-0.179003,	-1.06756,	-1.04388,	-0.960547,	-1.33046,	-0.758423,	-1.06878,	-0.507282,	-1.09699,	-0.877571,	-1.33297,	-1.08523,	-1.27501,	-0.638253,	-0.476518,	-0.939647,	-0.539785,	-0.858823,	-0.543468,	-0.157063,	-0.302495,	-0.471176,	-0.410702,	-0.158677,	-0.0888549,	-0.05201,	0.245704,	0.527059,	0.303135,	0.398657,	0.179986,	0.159813,	0.499481,	0.593647,	0.988892,	1.34287,	1.36354,	0.918304,	0.723908,	1.26051,	1.25917,	1.23373,	1.22008,	0.555876,	1.09558,	0.832219,	0.527374,	0.351837,	1.00747,	0.282656,
0.188892,	0.603736,	0.740191,	0.266958,	0.355198,	-0.293341,	0.406568,	-0.105495,	-0.0646716,	-0.803427,	-0.122974,	-0.271429,	-0.982534,	-0.654327,	-0.923402,	-0.765163,	-0.966999,	-0.996403,	-1.26727,	-1.21965,	-1.4718,	-0.576039,	-0.843405,	-0.551919,	-1.29861,	-0.509003,	-0.594127,	-0.761194,	-0.839977,	-0.95603,	-0.388198,	-0.831579,	-0.910568,	-0.117189,	-0.119237,	0.0217539,	0.0475161,	-0.0756379,	-0.00411861,	0.520015,	0.11802,	0.708847,	0.773156,	0.921284,	0.653909,	0.85671,	1.23751,	0.788294,	0.453624,	1.3007
					 };


#ifdef KAL_DATA_CCM
__attribute__((section(".ccmramdata")))
#endif
int n = sizeof(position)/sizeof(position[0]);


typedef struct kalman_filter_param
{
	/* Transition*/
    float A_mat2f[4];
	/* Q covariance with respect to our process model noise. */
    float Q_mat2f[4];
	/* His the observation model, which maps the true state space into the observed space*/
    float H_vec2f[2];
	/* Observation noise: R covariance matrix 1x1 */
    float R_mat1f;
	/* P plus current covariance matrix 2x2: estimate error */
    float P_plus_mat2f[4];
	/* x plus current state vector 2x1: value, speed */
    float x_plus_vec2f[2];
} kalman_filter_param;



// This can not be const because the kalman_parameters have to be modified!!!
#ifdef KAL_DATA_CCM
__attribute__((section(".ccmramdata")))
#endif
kalman_filter_param kalman_parameters = {
		/* A_mat2f[4]; */
		{1.0, 0.0001,
		 0.0, 1.0},
		/* float Q_mat2f[4]; */
		{0.002, 0.00,
		0.00, 0.002},
		/* float H_vec2f[2]; */
		{1.0, 1},
		/*R_mat1f; */
		0.04,
		/* float P_plus_mat2f[4]; */
		{0.1, 0,
		 0, 1},
		/* float x_plus_vec2f[2]; */
		{0.0, 0.0},
	};



#ifdef KAL_CCM
__attribute__((section(".ccmram")))
#endif
float* KalmanFilterStep(float z_plus_0, float z_plus_1, kalman_filter_param* kalman_param)
{

	/*0x2000000 +1  movs #48*/
	float P_estimate_mat2f[4]; /* matrix 2x2 */
	float x_estimate_vec2f[2]; /* vector 2x1 */
	/*static*/ float x_plus_vec2f_return[2];
	float K_gain_vec2f[2];  /* matrix 2x1 */
	float denominator_help;/* 0x20000001*/


	/* Prediction Step 1 */
	x_estimate_vec2f[0] = kalman_param->A_mat2f[0]*kalman_param->x_plus_vec2f[0] + kalman_param->A_mat2f[1]*kalman_param->x_plus_vec2f[1];
	x_estimate_vec2f[1] = kalman_param->A_mat2f[2]*kalman_param->x_plus_vec2f[0] + kalman_param->A_mat2f[3]*kalman_param->x_plus_vec2f[1];

	/* Prediction Step 2 */
	P_estimate_mat2f[0] = (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[0] +
						   kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[0];

	P_estimate_mat2f[0] += (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[1];

	P_estimate_mat2f[0] += kalman_param->Q_mat2f[0];




	P_estimate_mat2f[1] = (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[2];

	P_estimate_mat2f[1] += (kalman_param->A_mat2f[0]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[1]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[3];

	P_estimate_mat2f[1] += kalman_param->Q_mat2f[1];




	P_estimate_mat2f[2] = (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[0];

	P_estimate_mat2f[2] += (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[1];

	P_estimate_mat2f[2] += kalman_param->Q_mat2f[2];




	P_estimate_mat2f[3] = (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[0] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[2])*kalman_param->A_mat2f[2];

	P_estimate_mat2f[3] += (kalman_param->A_mat2f[2]*kalman_param->P_plus_mat2f[1] +
							kalman_param->A_mat2f[3]*kalman_param->P_plus_mat2f[3])*kalman_param->A_mat2f[3];

	P_estimate_mat2f[3] += kalman_param->Q_mat2f[3];



	/* Correction Step */
	/* Kalman Gain 3 */
	denominator_help = (kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + kalman_param->H_vec2f[1]*P_estimate_mat2f[2])*kalman_param->H_vec2f[0];
	denominator_help += (kalman_param->H_vec2f[0]*P_estimate_mat2f[1] + kalman_param->H_vec2f[1]*P_estimate_mat2f[3])*kalman_param->H_vec2f[1];
	denominator_help += kalman_param->R_mat1f;

	K_gain_vec2f[0] = (kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + kalman_param->H_vec2f[1]*P_estimate_mat2f[1])/denominator_help; /* temp_help shall be !=0 */
	K_gain_vec2f[1] = (kalman_param->H_vec2f[0]*P_estimate_mat2f[2] + kalman_param->H_vec2f[1]*P_estimate_mat2f[3])/denominator_help;


	/* Correction Step 4.*/
	/* updated state */
	kalman_param->x_plus_vec2f[0] = x_estimate_vec2f[0] + K_gain_vec2f[0]*(z_plus_0 - x_estimate_vec2f[0]);
	kalman_param->x_plus_vec2f[1] = x_estimate_vec2f[1] + K_gain_vec2f[1]*(z_plus_1 - x_estimate_vec2f[1]);


	/* updated covariance matrix */
	/* Correction Step 5.*/
	kalman_param->P_plus_mat2f[0] = (1.0 - K_gain_vec2f[0]*kalman_param->H_vec2f[0])*P_estimate_mat2f[0] - K_gain_vec2f[0]*kalman_param->H_vec2f[1]*P_estimate_mat2f[2];
	kalman_param->P_plus_mat2f[1] = (1.0 - K_gain_vec2f[0]*kalman_param->H_vec2f[0])*P_estimate_mat2f[1] - K_gain_vec2f[0]*kalman_param->H_vec2f[1]*P_estimate_mat2f[3];
	kalman_param->P_plus_mat2f[2] = -K_gain_vec2f[1]*kalman_param->H_vec2f[0]*P_estimate_mat2f[0] + (1.0 - K_gain_vec2f[1]*kalman_param->H_vec2f[1])*P_estimate_mat2f[2];
	kalman_param->P_plus_mat2f[3] = -K_gain_vec2f[1]*kalman_param->H_vec2f[0]*P_estimate_mat2f[1] + (1.0 - K_gain_vec2f[1]*kalman_param->H_vec2f[1])*P_estimate_mat2f[3];

	//pass the value to our return value
	x_plus_vec2f_return[0] = (kalman_param->x_plus_vec2f[0]);
	x_plus_vec2f_return[1] = (kalman_param->x_plus_vec2f[1]);
	return x_plus_vec2f_return;
}

#ifdef KAL_CCM
__attribute__((section(".ccmram")))
#endif
void KalmanFiltermain( float* posi, float* velo, kalman_filter_param* kalman_param, int n){
	/* loop the position and velocity array*/
	for(int i = 0; i < n; i++)
	{
		position[i] = *(KalmanFilterStep(*(posi+i),*(velo+i), kalman_param)+0);
		velocity[i] = *(KalmanFilterStep(*(posi+i),*(velo+i), kalman_param)+1);
	}

}


void EnterSleep()
{
	HAL_SuspendTick();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void Sleep(int time)
{
  HAL_SuspendTick();
  uint32_t counter = time*2;/*divide by (16/32)*/
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);

  /* Enter sleep mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
  HAL_ResumeTick();
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  int nb_tasks = 2;
  int task_ready[2] = {1,1};
  long task_period[2] = {2,1};
  int period_done[2] = {0,0};

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_RTC_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim2);
  int t_deb, t_fin;
  t_deb = TIM2->CNT;
  pointer_chase(pointers[0]);
  uint32_t time1, time2;
  uint8_t msg[60] = {'\0'};
  while(t_fin/72000 < 10000 )
  {

	  if (task_ready[0]){
		  time1 = TIM2->CNT;
		  memcpy(srcArray, srcArrayInFlash, 1000*sizeof(int));
		  BubbleSort(srcArray);
		  time2 = TIM2->CNT;
		  task_ready[0]--;
		  period_done[0]++;

		  sprintf(msg,"\n\r bubble %d",(time2-time1));
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
	  }
	  if (task_ready[1]){
		  time1 = TIM2->CNT;

		  KalmanFiltermain(&position, &velocity, &kalman_parameters, n);
		  time2 = TIM2->CNT;
		  task_ready[1]--;
		  period_done[1]++;
		  sprintf(msg,"\n\r kalman %d",(time2-time1));
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
	  }
	  /*else if (task_ready[2]){
		  time1 = TIM2->CNT;
		  pointer_chase(pointers[0]);
		  time2 = TIM2->CNT;
		  task_ready[2]--;
		  period_done[2]++;
		  sprintf(msg,"\n\r pointer %d",(time2-time1));
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
	  }*/
	  t_fin = TIM2->CNT;
	  for (int i = 0; i < nb_tasks; i++)
	  {
		  int nb_periods = floor((int)((t_fin - t_deb)/72)/(task_period[i]*1000000));
		  if ((nb_periods-period_done[i]) >= 1){
				  task_ready[i] = task_ready[i] + floor( nb_periods-period_done[i]);
		  }
		  /*sprintf(msg,"\n\r task %d  r: %d  nb_p : %d p run : %d t :%d",i, task_ready[i], nb_periods, period_done[i], t_fin/72000);
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);*/
	  }
	  Sleep(100);
  }


  EnterSleep();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
