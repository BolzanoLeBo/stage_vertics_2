
bubble_sort_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  000300c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800455c  0800455c  000300c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800455c  0800455c  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08004564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .ccmram       000000c0  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .ccmramdata   00000000  100000c0  100000c0  000300c0  2**0
                  CONTENTS
 11 .bss          00000fe4  200000d0  200000d0  000300d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200010b4  200010b4  000300d0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00007b7b  00000000  00000000  00030133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001bd6  00000000  00000000  00037cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000760  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000056b  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d506  00000000  00000000  0003a553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000a32f  00000000  00000000  00057a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ae1b4  00000000  00000000  00061d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001ccc  00000000  00000000  0010ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00111c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800352c 	.word	0x0800352c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	0800352c 	.word	0x0800352c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <BubbleSort>:
}
void BubbleSort(int Array[])
/*
 * Sorts an array of integers of size NUMELEMS in ascending order.
 */
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
   int Temp, Index, i;
   for (i = 1; i <= NUMELEMS-1; i++)
 80007e0:	2301      	movs	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e040      	b.n	8000868 <BubbleSort+0x94>
   {
      Sorted = TRUE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	e02f      	b.n	8000850 <BubbleSort+0x7c>
         if (Index > NUMELEMS-i)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dc2e      	bgt.n	800085a <BubbleSort+0x86>
         {
           break;
         }
         if (Array[Index] > Array[Index + 1])
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	440b      	add	r3, r1
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	dd19      	ble.n	800084a <BubbleSort+0x76>
         {
            Temp = Array[Index];
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	3301      	adds	r3, #1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	441a      	add	r2, r3
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	440b      	add	r3, r1
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	3301      	adds	r3, #1
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	3301      	adds	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000856:	dbcb      	blt.n	80007f0 <BubbleSort+0x1c>
 8000858:	e000      	b.n	800085c <BubbleSort+0x88>
           break;
 800085a:	bf00      	nop
         }
      }

      if (Sorted)
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d107      	bne.n	8000872 <BubbleSort+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800086e:	dbba      	blt.n	80007e6 <BubbleSort+0x12>
      {
         break;
      }
   }
}
 8000870:	e000      	b.n	8000874 <BubbleSort+0xa0>
         break;
 8000872:	bf00      	nop
}
 8000874:	bf00      	nop
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <bubble_main>:
  BubbleSortRAM(srcArrayInRAM);
}


void bubble_main()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  BubbleSort(srcArrayInRAM);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <bubble_main+0x10>)
 8000886:	f7ff ffa5 	bl	80007d4 <BubbleSort>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000ec 	.word	0x200000ec

08000894 <init_tab>:
void init_tab()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  memcpy(srcArrayInRAM, srcArrayInFlash, NUMELEMS*sizeof(int));
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <init_tab+0x1c>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <init_tab+0x20>)
 800089c:	4610      	mov	r0, r2
 800089e:	4619      	mov	r1, r3
 80008a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f002 fe33 	bl	8003510 <memcpy>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000ec 	.word	0x200000ec
 80008b4:	0800358c 	.word	0x0800358c

080008b8 <Error>:

#include "freq_manage.h"
static int pll_on = 1;
static int current_frequency = 0;
void Error(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error+0x8>
	...

080008c4 <enable_hse>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void enable_hse()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b092      	sub	sp, #72	; 0x48
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80008ca:	463b      	mov	r3, r7
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f967 	bl	8002ba0 <HAL_RCC_GetOscConfig>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff30 	bl	8001740 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <enable_hse+0x26>
  {
    /* Initialization Error */
    Error();
 80008e6:	f7ff ffe7 	bl	80008b8 <Error>
  }
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	bf00      	nop
 80008ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b01      	cmp	r3, #1
 800090e:	d102      	bne.n	8000916 <enable_hse+0x52>
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <enable_hse+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	e00f      	b.n	8000936 <enable_hse+0x72>
 8000916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800091e:	fa93 f3a3 	rbit	r3, r3
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
 800092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092c:	fa93 f3a3 	rbit	r3, r3
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <enable_hse+0xa8>)
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800093a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800093c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800093e:	fa92 f2a2 	rbit	r2, r2
 8000942:	62ba      	str	r2, [r7, #40]	; 0x28
  return result;
 8000944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000946:	fab2 f282 	clz	r2, r2
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	f042 0220 	orr.w	r2, r2, #32
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	f002 021f 	and.w	r2, r2, #31
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	4013      	ands	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0c4      	beq.n	80008ec <enable_hse+0x28>
  {
    ;
  }

}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3748      	adds	r7, #72	; 0x48
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000

08000970 <disable_pll>:

void disable_pll()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	; 0x40
 8000974:	af00      	add	r7, sp, #0
  pll_on = 0;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <disable_pll+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  enable_hse();
 800097c:	f7ff ffa2 	bl	80008c4 <enable_hse>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000990:	2301      	movs	r3, #1
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 ff0c 	bl	80027bc <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <disable_pll+0x3e>
  {
    /* Initialization Error */
    Error();
 80009aa:	f7ff ff85 	bl	80008b8 <Error>
  }
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f8f5 	bl	8002ba0 <HAL_RCC_GetOscConfig>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 febf 	bl	8001740 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <disable_pll+0x5c>
  {
    /* Initialization Error */
    Error();
 80009c8:	f7ff ff76 	bl	80008b8 <Error>
  }

}
 80009cc:	bf00      	nop
 80009ce:	3740      	adds	r7, #64	; 0x40
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000000 	.word	0x20000000

080009d8 <Sleep>:




void Sleep(int time, RTC_HandleTypeDef* hrtc_addr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  current_frequency = HAL_RCC_GetHCLKFreq()/1000000;
 80009e2:	f002 f8d1 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <Sleep+0x8c>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <Sleep+0x90>)
 80009f4:	601a      	str	r2, [r3, #0]
  uint32_t counter = (uint32_t) ((float) time*2.5);/*divide by (16/40)*/
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a00:	ee17 0a90 	vmov	r0, s15
 8000a04:	f7ff fe6e 	bl	80006e4 <__aeabi_f2d>
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <Sleep+0x94>)
 8000a0e:	f7ff fbdb 	bl	80001c8 <__aeabi_dmul>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff febb 	bl	8000794 <__aeabi_d2uiz>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60fb      	str	r3, [r7, #12]
  HAL_SuspendTick();
 8000a22:	f000 fbad 	bl	8001180 <HAL_SuspendTick>

  HAL_RTCEx_SetWakeUpTimer_IT(hrtc_addr , counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000a26:	2200      	movs	r2, #0
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	6838      	ldr	r0, [r7, #0]
 8000a2c:	f002 fbfc 	bl	8003228 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000a30:	2101      	movs	r1, #1
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fe50 	bl	80016d8 <HAL_PWR_EnterSTOPMode>
  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* Wake up*/
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc_addr);
 8000a38:	6838      	ldr	r0, [r7, #0]
 8000a3a:	f002 fcb7 	bl	80033ac <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 8000a3e:	f000 fbaf 	bl	80011a0 <HAL_ResumeTick>
  //When wake up from STOP Sysclk source is HSI

  if (pll_on)
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <Sleep+0x98>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d005      	beq.n	8000a56 <Sleep+0x7e>
    {
      change_freq(current_frequency);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <Sleep+0x90>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f810 	bl	8000a74 <change_freq>
    {
      disable_pll();
    }
  /*int r = __HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK;
  int f = HAL_RCC_GetSysClockFreq();*/
}
 8000a54:	e001      	b.n	8000a5a <Sleep+0x82>
      disable_pll();
 8000a56:	f7ff ff8b 	bl	8000970 <disable_pll>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	2000108c 	.word	0x2000108c
 8000a6c:	40040000 	.word	0x40040000
 8000a70:	20000000 	.word	0x20000000

08000a74 <change_freq>:

void change_freq(int f)
{
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b09c      	sub	sp, #112	; 0x70
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  int tab_mul[8] = {RCC_PLL_MUL2, RCC_PLL_MUL3, RCC_PLL_MUL4, RCC_PLL_MUL5,
 8000a7c:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <change_freq+0x11c>)
 8000a7e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000a82:	461d      	mov	r5, r3
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                 RCC_PLL_MUL6, RCC_PLL_MUL7, RCC_PLL_MUL8, RCC_PLL_MUL9};
  pll_on = 1;
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <change_freq+0x120>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  current_frequency = f;
 8000a96:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <change_freq+0x124>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6013      	str	r3, [r2, #0]
  int latency, mul;
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2228      	movs	r2, #40	; 0x28
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fcff 	bl	80034b8 <memset>

  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  enable_hse();
 8000aba:	f7ff ff03 	bl	80008c4 <enable_hse>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fe75 	bl	80027bc <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <change_freq+0x68>
  {
    /* Initialization Error */
    Error();
 8000ad8:	f7ff feee 	bl	80008b8 <Error>
  }
  if (f <= 24)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b18      	cmp	r3, #24
 8000ae0:	dc02      	bgt.n	8000ae8 <change_freq+0x74>
  {
    latency = FLASH_LATENCY_0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ae6:	e013      	b.n	8000b10 <change_freq+0x9c>
  }
  else if (f > 24 && f<= 48)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b18      	cmp	r3, #24
 8000aec:	dd05      	ble.n	8000afa <change_freq+0x86>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b30      	cmp	r3, #48	; 0x30
 8000af2:	dc02      	bgt.n	8000afa <change_freq+0x86>
  {
    latency = FLASH_LATENCY_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000af8:	e00a      	b.n	8000b10 <change_freq+0x9c>
  }
  else if (f <= 72 && f > 48)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b48      	cmp	r3, #72	; 0x48
 8000afe:	dc05      	bgt.n	8000b0c <change_freq+0x98>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b30      	cmp	r3, #48	; 0x30
 8000b04:	dd02      	ble.n	8000b0c <change_freq+0x98>
  {
    latency = FLASH_LATENCY_2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b0a:	e001      	b.n	8000b10 <change_freq+0x9c>
  }
  else
  {
    Error();
 8000b0c:	f7ff fed4 	bl	80008b8 <Error>
  }
  mul = tab_mul[(f/8)-2];
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da00      	bge.n	8000b18 <change_freq+0xa4>
 8000b16:	3307      	adds	r3, #7
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	3370      	adds	r3, #112	; 0x70
 8000b20:	443b      	add	r3, r7
 8000b22:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68

  /* -2- Enable HSE  Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState        = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL      = mul;
 8000b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fdf9 	bl	8001740 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <change_freq+0xe4>
  {
    /* Initialization Error */
    Error();
 8000b54:	f7ff feb0 	bl	80008b8 <Error>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType       = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b58:	230f      	movs	r3, #15
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_HCLK_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider  = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 8000b6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fe20 	bl	80027bc <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <change_freq+0x112>
  {
    /* Initialization Error */
    Error();
 8000b82:	f7ff fe99 	bl	80008b8 <Error>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3770      	adds	r7, #112	; 0x70
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08003558 	.word	0x08003558
 8000b94:	20000000 	.word	0x20000000
 8000b98:	2000108c 	.word	0x2000108c

08000b9c <tested_code>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tested_code()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  int nb_ex = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]

  //CODE FLASH
  for (int i = 0; i<nb_ex; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	e00a      	b.n	8000bc2 <tested_code+0x26>
  {
    init_tab();
 8000bac:	f7ff fe72 	bl	8000894 <init_tab>
    bubble_main();
 8000bb0:	f7ff fe66 	bl	8000880 <bubble_main>
    Sleep(10, &hrtc);
 8000bb4:	4919      	ldr	r1, [pc, #100]	; (8000c1c <tested_code+0x80>)
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f7ff ff0e 	bl	80009d8 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dbf0      	blt.n	8000bac <tested_code+0x10>
  }


  //CODE CCM
  for (int i = 0; i<nb_ex; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	e00a      	b.n	8000be6 <tested_code+0x4a>
  {
    init_tab();
 8000bd0:	f7ff fe60 	bl	8000894 <init_tab>
    bubble_main_ccm();
 8000bd4:	f002 fcbc 	bl	8003550 <__bubble_main_ccm_veneer>
    Sleep(10, &hrtc);
 8000bd8:	4910      	ldr	r1, [pc, #64]	; (8000c1c <tested_code+0x80>)
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f7ff fefc 	bl	80009d8 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dbf0      	blt.n	8000bd0 <tested_code+0x34>
  }


  // CODE SRAM;
  for (int i = 0; i<nb_ex; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e00a      	b.n	8000c0a <tested_code+0x6e>
  {
    init_tab();
 8000bf4:	f7ff fe4e 	bl	8000894 <init_tab>
    bubble_main_ram();
 8000bf8:	f002 fca6 	bl	8003548 <__bubble_main_ram_veneer>
    Sleep(10, &hrtc);
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <tested_code+0x80>)
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f7ff feea 	bl	80009d8 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dbf0      	blt.n	8000bf4 <tested_code+0x58>
  }


}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20001090 	.word	0x20001090

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fa45 	bl	80010b4 <HAL_Init>

  /* USER CODE BEGIN Init */

  int f_table[NF] = {0,16,24,48,72};
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <main+0x80>)
 8000c2c:	1d3c      	adds	r4, r7, #4
 8000c2e:	461d      	mov	r5, r3
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	6023      	str	r3, [r4, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f836 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f8c2 	bl	8000dc4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c40:	f000 f890 	bl	8000d64 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int f;

  for (int i =0; i < NF; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	e01c      	b.n	8000c84 <main+0x64>
  {
    f = f_table[i];
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	3320      	adds	r3, #32
 8000c50:	443b      	add	r3, r7
 8000c52:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c56:	61bb      	str	r3, [r7, #24]
    if (f == 0)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <main+0x44>
    {
      disable_pll();
 8000c5e:	f7ff fe87 	bl	8000970 <disable_pll>
 8000c62:	e002      	b.n	8000c6a <main+0x4a>
    }
    else
    {
      change_freq(f);
 8000c64:	69b8      	ldr	r0, [r7, #24]
 8000c66:	f7ff ff05 	bl	8000a74 <change_freq>
    }
    Sleep(20, &hrtc);
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <main+0x84>)
 8000c6c:	2014      	movs	r0, #20
 8000c6e:	f7ff feb3 	bl	80009d8 <Sleep>
    tested_code();
 8000c72:	f7ff ff93 	bl	8000b9c <tested_code>
    Sleep(20, &hrtc);
 8000c76:	490b      	ldr	r1, [pc, #44]	; (8000ca4 <main+0x84>)
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f7ff fead 	bl	80009d8 <Sleep>
  for (int i =0; i < NF; i++)
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	dddf      	ble.n	8000c4a <main+0x2a>
  }
  HAL_SuspendTick();
 8000c8a:	f000 fa79 	bl	8001180 <HAL_SuspendTick>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fd21 	bl	80016d8 <HAL_PWR_EnterSTOPMode>
 8000c96:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca0:	08003578 	.word	0x08003578
 8000ca4:	20001090 	.word	0x20001090

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	; 0x78
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fbfe 	bl	80034b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	223c      	movs	r2, #60	; 0x3c
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fbf0 	bl	80034b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cea:	2301      	movs	r3, #1
 8000cec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cfc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fd1c 	bl	8001740 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d0e:	f000 f90b 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fd44 	bl	80027bc <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d3a:	f000 f8f5 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 ffb5 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d58:	f000 f8e6 	bl	8000f28 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3778      	adds	r7, #120	; 0x78
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <MX_RTC_Init+0x5c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d76:	227f      	movs	r2, #127	; 0x7f
 8000d78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <MX_RTC_Init+0x58>)
 8000d94:	f002 f942 	bl	800301c <HAL_RTC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d9e:	f000 f8c3 	bl	8000f28 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_RTC_Init+0x58>)
 8000da8:	f002 fa3e 	bl	8003228 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000db2:	f000 f8b9 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20001090 	.word	0x20001090
 8000dc0:	40002800 	.word	0x40002800

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a4c      	ldr	r2, [pc, #304]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a3a      	ldr	r2, [pc, #232]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_GPIO_Init+0x150>)
 8000e80:	f000 fab0 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e88:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	481f      	ldr	r0, [pc, #124]	; (8000f18 <MX_GPIO_Init+0x154>)
 8000e9a:	f000 faa3 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 PF4
                           PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2|GPIO_PIN_4
 8000e9e:	f240 6354 	movw	r3, #1620	; 0x654
 8000ea2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <MX_GPIO_Init+0x158>)
 8000eb4:	f000 fa96 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000eb8:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 8000ebc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 fa88 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_GPIO_Init+0x15c>)
 8000eea:	f000 fa7b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <MX_GPIO_Init+0x160>)
 8000f04:	f000 fa6e 	bl	80013e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48001000 	.word	0x48001000
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	48001400 	.word	0x48001400
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000c00 	.word	0x48000c00

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x44>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_RTC_MspInit+0x50>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d119      	bne.n	8000fc2 <HAL_RTC_MspInit+0x46>
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	60bb      	str	r3, [r7, #8]
  return result;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RTC_MspInit+0x54>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f9dd 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f9f6 	bl	80013ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40002800 	.word	0x40002800
 8000fd0:	10908100 	.word	0x10908100

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f88e 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <RTC_WKUP_IRQHandler+0x10>)
 800102e:	f002 fa15 	bl	800345c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20001090 	.word	0x20001090

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f002 fa1b 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001092:	f7ff fdc5 	bl	8000c20 <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80010a4:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 80010a8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80010ac:	200010b4 	.word	0x200010b4

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f94b 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff ff30 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f963 	bl	80013ca <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f92b 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c
 8001164:	200010b0 	.word	0x200010b0

08001168 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;  
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200010b0 	.word	0x200010b0

08001180 <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_SuspendTick+0x1c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_SuspendTick+0x1c>)
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	6013      	str	r3, [r2, #0]
                                                   
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_ResumeTick+0x1c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_ResumeTick+0x1c>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	6013      	str	r3, [r2, #0]
  
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff29 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff3e 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff8e 	bl	80012b4 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff31 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffa2 	bl	800131c <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e154      	b.n	800169e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8146 	beq.w	8001698 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x40>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	6939      	ldr	r1, [r7, #16]
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0203 	and.w	r2, r3, #3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80a0 	beq.w	8001698 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_GPIO_Init+0x2d8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_GPIO_Init+0x2d8>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_GPIO_Init+0x2d8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001570:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <HAL_GPIO_Init+0x2dc>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159a:	d019      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a49      	ldr	r2, [pc, #292]	; (80016c4 <HAL_GPIO_Init+0x2e0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_GPIO_Init+0x2e4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00d      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a47      	ldr	r2, [pc, #284]	; (80016cc <HAL_GPIO_Init+0x2e8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_GPIO_Init+0x2ec>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <HAL_GPIO_Init+0x1dc>
 80015bc:	2304      	movs	r3, #4
 80015be:	e008      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c0:	2305      	movs	r3, #5
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e2:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_GPIO_Init+0x2dc>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001614:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163e:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f47f aea3 	bne.w	80013f4 <HAL_GPIO_Init+0x10>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_PWR_EnterSTOPMode+0x60>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f023 0303 	bic.w	r3, r3, #3
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_PWR_EnterSTOPMode+0x60>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_PWR_EnterSTOPMode+0x64>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_PWR_EnterSTOPMode+0x64>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6113      	str	r3, [r2, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_PWR_EnterSTOPMode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001716:	bf30      	wfi
 8001718:	e002      	b.n	8001720 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800171a:	bf40      	sev
    __WFE();
 800171c:	bf20      	wfe
    __WFE();
 800171e:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_PWR_EnterSTOPMode+0x64>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_PWR_EnterSTOPMode+0x64>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6113      	str	r3, [r2, #16]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40007000 	.word	0x40007000
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001746:	af00      	add	r7, sp, #0
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001750:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f001 b823 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 817d 	beq.w	8001a76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800177c:	4bbc      	ldr	r3, [pc, #752]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001788:	4bb9      	ldr	r3, [pc, #740]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d15c      	bne.n	800184e <HAL_RCC_OscConfig+0x10e>
 8001794:	4bb6      	ldr	r3, [pc, #728]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d155      	bne.n	800184e <HAL_RCC_OscConfig+0x10e>
 80017a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80017b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0x94>
 80017ce:	4ba8      	ldr	r3, [pc, #672]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0xc0>
 80017d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017fc:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001804:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001808:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800180c:	fa92 f2a2 	rbit	r2, r2
 8001810:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001814:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001818:	fab2 f282 	clz	r2, r2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f042 0220 	orr.w	r2, r2, #32
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f002 021f 	and.w	r2, r2, #31
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 811f 	beq.w	8001a74 <HAL_RCC_OscConfig+0x334>
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 8116 	bne.w	8001a74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	f000 bfaf 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x12e>
 8001860:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e036      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x158>
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7b      	ldr	r2, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a78      	ldr	r2, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e021      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x184>
 80018aa:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a70      	ldr	r2, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6e      	ldr	r3, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a66      	ldr	r2, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	f023 020f 	bic.w	r2, r3, #15
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	495f      	ldr	r1, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d059      	beq.n	80019ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fc2f 	bl	8001168 <HAL_GetTick>
 800190a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc2a 	bl	8001168 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d902      	bls.n	8001926 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	f000 bf43 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800193a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x218>
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0x244>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800196c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001970:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001974:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001988:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800198c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001990:	fa92 f2a2 	rbit	r2, r2
 8001994:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001998:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ab      	beq.n	8001910 <HAL_RCC_OscConfig+0x1d0>
 80019b8:	e05d      	b.n	8001a76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fbd5 	bl	8001168 <HAL_GetTick>
 80019be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fbd0 	bl	8001168 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d902      	bls.n	80019da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f000 bee9 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 80019da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2cc>
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	e015      	b.n	8001a38 <HAL_RCC_OscConfig+0x2f8>
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a24:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a40:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a44:	fa92 f2a2 	rbit	r2, r2
 8001a48:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ab      	bne.n	80019c4 <HAL_RCC_OscConfig+0x284>
 8001a6c:	e003      	b.n	8001a76 <HAL_RCC_OscConfig+0x336>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 817d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8c:	4ba6      	ldr	r3, [pc, #664]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a98:	4ba3      	ldr	r3, [pc, #652]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d172      	bne.n	8001b8a <HAL_RCC_OscConfig+0x44a>
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d16c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x44a>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3a0>
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c8>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001af8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x410>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f000 be2e 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	21f8      	movs	r1, #248	; 0xf8
 8001b66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b6e:	fa91 f1a1 	rbit	r1, r1
 8001b72:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b76:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b7a:	fab1 f181 	clz	r1, r1
 8001b7e:	b2c9      	uxtb	r1, r1
 8001b80:	408b      	lsls	r3, r1
 8001b82:	4969      	ldr	r1, [pc, #420]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	e0fd      	b.n	8001d86 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8088 	beq.w	8001cac <HAL_RCC_OscConfig+0x56c>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff face 	bl	8001168 <HAL_GetTick>
 8001bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fac9 	bl	8001168 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d902      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f000 bde2 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bfa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4d8>
 8001c12:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e013      	b.n	8001c40 <HAL_RCC_OscConfig+0x500>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2202      	movs	r2, #2
 8001c42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0af      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	21f8      	movs	r1, #248	; 0xf8
 8001c88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c90:	fa91 f1a1 	rbit	r1, r1
 8001c94:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c98:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c9c:	fab1 f181 	clz	r1, r1
 8001ca0:	b2c9      	uxtb	r1, r1
 8001ca2:	408b      	lsls	r3, r1
 8001ca4:	4920      	ldr	r1, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
 8001caa:	e06c      	b.n	8001d86 <HAL_RCC_OscConfig+0x646>
 8001cac:	2301      	movs	r3, #1
 8001cae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ccc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fa46 	bl	8001168 <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fa41 	bl	8001168 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f000 bd5a 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d104      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
 8001d22:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e015      	b.n	8001d54 <HAL_RCC_OscConfig+0x614>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d50:	4bc8      	ldr	r3, [pc, #800]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2202      	movs	r2, #2
 8001d56:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ad      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8110 	beq.w	8001fbc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d079      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x760>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4bab      	ldr	r3, [pc, #684]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f9c7 	bl	8001168 <HAL_GetTick>
 8001dda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f9c2 	bl	8001168 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d902      	bls.n	8001df6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f000 bcdb 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	6019      	str	r1, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f1a3 	rbit	r1, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e76:	6019      	str	r1, [r3, #0]
  return result;
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0a0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x6a0>
 8001e9e:	e08d      	b.n	8001fbc <HAL_RCC_OscConfig+0x87c>
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ecc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f941 	bl	8001168 <HAL_GetTick>
 8001ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f93c 	bl	8001168 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d902      	bls.n	8001f02 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	f000 bc55 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f52:	2202      	movs	r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	6019      	str	r1, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f1a3 	rbit	r1, r3
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f94:	6019      	str	r1, [r3, #0]
  return result;
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d197      	bne.n	8001eec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 81a1 	beq.w	8002314 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d116      	bne.n	8002012 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800200a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_OscConfig+0x93c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11a      	bne.n	8002054 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_OscConfig+0x93c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_RCC_OscConfig+0x93c>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7ff f89d 	bl	8001168 <HAL_GetTick>
 800202e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	e009      	b.n	8002048 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7ff f898 	bl	8001168 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e3b1      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCC_OscConfig+0x93c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_OscConfig+0x940>
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a02      	ldr	r2, [pc, #8]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e03c      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	10908120 	.word	0x10908120
 800207c:	40007000 	.word	0x40007000
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x96a>
 8002090:	4bc1      	ldr	r3, [pc, #772]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4ac0      	ldr	r2, [pc, #768]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4bbe      	ldr	r3, [pc, #760]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4abd      	ldr	r2, [pc, #756]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e020      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x994>
 80020ba:	4bb7      	ldr	r3, [pc, #732]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4ab6      	ldr	r2, [pc, #728]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4bb4      	ldr	r3, [pc, #720]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4ab3      	ldr	r2, [pc, #716]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 80020d4:	4bb0      	ldr	r3, [pc, #704]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4aaf      	ldr	r2, [pc, #700]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	4bad      	ldr	r3, [pc, #692]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4aac      	ldr	r2, [pc, #688]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8081 	beq.w	8002200 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f833 	bl	8001168 <HAL_GetTick>
 8002102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff f82e 	bl	8001168 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e345      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002166:	601a      	str	r2, [r3, #0]
  return result;
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002170:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0xa4c>
 8002186:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	e013      	b.n	80021b4 <HAL_RCC_OscConfig+0xa74>
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002194:	2202      	movs	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021bc:	2102      	movs	r1, #2
 80021be:	6011      	str	r1, [r2, #0]
 80021c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	fa92 f1a2 	rbit	r1, r2
 80021ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021d6:	6011      	str	r1, [r2, #0]
  return result;
 80021d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f002 021f 	and.w	r2, r2, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d084      	beq.n	8002108 <HAL_RCC_OscConfig+0x9c8>
 80021fe:	e07f      	b.n	8002300 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe ffb2 	bl	8001168 <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe ffad 	bl	8001168 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2c4      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002272:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d102      	bne.n	800228e <HAL_RCC_OscConfig+0xb4e>
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	e013      	b.n	80022b6 <HAL_RCC_OscConfig+0xb76>
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002296:	2202      	movs	r2, #2
 8002298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022be:	2102      	movs	r1, #2
 80022c0:	6011      	str	r1, [r2, #0]
 80022c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fa92 f1a2 	rbit	r1, r2
 80022d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022d8:	6011      	str	r1, [r2, #0]
  return result;
 80022da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d184      	bne.n	800220a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a22      	ldr	r2, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8242 	beq.w	80027aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	f000 8213 	beq.w	800275a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	f040 8162 	bne.w	800260a <HAL_RCC_OscConfig+0xeca>
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800234e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe feec 	bl	8001168 <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e00c      	b.n	80023b0 <HAL_RCC_OscConfig+0xc70>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fee4 	bl	8001168 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1fd      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023d4:	601a      	str	r2, [r3, #0]
  return result;
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_OscConfig+0xcba>
 80023f4:	4bb0      	ldr	r3, [pc, #704]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e027      	b.n	800244a <HAL_RCC_OscConfig+0xd0a>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b9c      	ldr	r3, [pc, #624]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002452:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002456:	6011      	str	r1, [r2, #0]
 8002458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fa92 f1a2 	rbit	r1, r2
 8002466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800246a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800246e:	6011      	str	r1, [r2, #0]
  return result;
 8002470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002474:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d182      	bne.n	800239c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	497f      	ldr	r1, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	2301      	movs	r3, #1
 8002502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe30 	bl	8001168 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	e009      	b.n	8002522 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fe2b 	bl	8001168 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e144      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800252a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002546:	601a      	str	r2, [r3, #0]
  return result;
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002550:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0xe2c>
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e027      	b.n	80025bc <HAL_RCC_OscConfig+0xe7c>
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800259a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fa92 f1a2 	rbit	r1, r2
 80025d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025e0:	6011      	str	r1, [r2, #0]
  return result;
 80025e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f002 021f 	and.w	r2, r2, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d082      	beq.n	800250e <HAL_RCC_OscConfig+0xdce>
 8002608:	e0cf      	b.n	80027aa <HAL_RCC_OscConfig+0x106a>
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002638:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	461a      	mov	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fd8a 	bl	8001168 <HAL_GetTick>
 8002654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fd85 	bl	8001168 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e09e      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800269c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <HAL_RCC_OscConfig+0xf7c>
 80026b2:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e029      	b.n	800270c <HAL_RCC_OscConfig+0xfcc>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f2a3 	rbit	r2, r3
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_OscConfig+0x1078>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002710:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002714:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002718:	6011      	str	r1, [r2, #0]
 800271a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fa92 f1a2 	rbit	r1, r2
 8002728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002730:	6011      	str	r1, [r2, #0]
  return result;
 8002732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002736:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fab2 f282 	clz	r2, r2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f042 0220 	orr.w	r2, r2, #32
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f002 021f 	and.w	r2, r2, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d180      	bne.n	800265a <HAL_RCC_OscConfig+0xf1a>
 8002758:	e027      	b.n	80027aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01e      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_OscConfig+0x1078>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800277a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800278e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09e      	sub	sp, #120	; 0x78
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e162      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	498b      	ldr	r1, [pc, #556]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e14a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	497f      	ldr	r1, [pc, #508]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80dc 	beq.w	80029e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d13c      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xf6>
 8002838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_ClockConfig+0xa6>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e00f      	b.n	8002882 <HAL_RCC_ClockConfig+0xc6>
 8002862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	667b      	str	r3, [r7, #100]	; 0x64
 8002870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002874:	663b      	str	r3, [r7, #96]	; 0x60
 8002876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002886:	65ba      	str	r2, [r7, #88]	; 0x58
 8002888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002892:	fab2 f282 	clz	r2, r2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f002 021f 	and.w	r2, r2, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d17b      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0f3      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d13c      	bne.n	8002934 <HAL_RCC_ClockConfig+0x178>
 80028ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x128>
 80028de:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_ClockConfig+0x148>
 80028e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
 80028f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
 80028f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002908:	63ba      	str	r2, [r7, #56]	; 0x38
 800290a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13a      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b2      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002934:	2302      	movs	r3, #2
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_ClockConfig+0x1a0>
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e00d      	b.n	8002978 <HAL_RCC_ClockConfig+0x1bc>
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2202      	movs	r2, #2
 800297a:	61ba      	str	r2, [r7, #24]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	617a      	str	r2, [r7, #20]
  return result;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e079      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	491a      	ldr	r1, [pc, #104]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fbd6 	bl	8001168 <HAL_GetTick>
 80029bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fbd2 	bl	8001168 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e061      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d214      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4906      	ldr	r1, [pc, #24]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e040      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	491a      	ldr	r1, [pc, #104]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a5e:	f000 f829 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4601      	mov	r1, r0
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	22f0      	movs	r2, #240	; 0xf0
 8002a6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	60fa      	str	r2, [r7, #12]
  return result;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	40d3      	lsrs	r3, r2
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x2ec>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCC_ClockConfig+0x2f0>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_ClockConfig+0x2f4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fb24 	bl	80010e0 <HAL_InitTick>
  
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3778      	adds	r7, #120	; 0x78
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	0800452c 	.word	0x0800452c
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b08b      	sub	sp, #44	; 0x2c
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ace:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x36>
 8002ae2:	e03c      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae6:	623b      	str	r3, [r7, #32]
      break;
 8002ae8:	e03c      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002af0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002af4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	607a      	str	r2, [r7, #4]
  return result;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	40d3      	lsrs	r3, r2
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	220f      	movs	r2, #15
 8002b18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	60fa      	str	r2, [r7, #12]
  return result;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	623b      	str	r3, [r7, #32]
      break;
 8002b5c:	e002      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b60:	623b      	str	r3, [r7, #32]
      break;
 8002b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b64:	6a3b      	ldr	r3, [r7, #32]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	372c      	adds	r7, #44	; 0x2c
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	007a1200 	.word	0x007a1200
 8002b7c:	0800453c 	.word	0x0800453c
 8002b80:	0800454c 	.word	0x0800454c
 8002b84:	003d0900 	.word	0x003d0900

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000004 	.word	0x20000004

08002ba0 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	220f      	movs	r2, #15
 8002bac:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8002bae:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bba:	d104      	bne.n	8002bc6 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e00e      	b.n	8002be4 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d104      	bne.n	8002bde <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e002      	b.n	8002be4 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
  }
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
#endif

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d103      	bne.n	8002c04 <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	611a      	str	r2, [r3, #16]
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002c12:	22f8      	movs	r2, #248	; 0xf8
 8002c14:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	fa92 f2a2 	rbit	r2, r2
 8002c1c:	60ba      	str	r2, [r7, #8]
  return result;
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	fa23 f202 	lsr.w	r2, r3, r2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	615a      	str	r2, [r3, #20]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d103      	bne.n	8002c42 <HAL_RCC_GetOscConfig+0xa2>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	e00c      	b.n	8002c5c <HAL_RCC_GetOscConfig+0xbc>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d103      	bne.n	8002c56 <HAL_RCC_GetOscConfig+0xb6>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e002      	b.n	8002c5c <HAL_RCC_GetOscConfig+0xbc>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d103      	bne.n	8002c70 <HAL_RCC_GetOscConfig+0xd0>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	619a      	str	r2, [r3, #24]
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_GetOscConfig+0xd6>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c82:	d103      	bne.n	8002c8c <HAL_RCC_GetOscConfig+0xec>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e002      	b.n	8002c92 <HAL_RCC_GetOscConfig+0xf2>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_GetOscConfig+0x118>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80d4 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce0:	4b4e      	ldr	r3, [pc, #312]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	61d3      	str	r3, [r2, #28]
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d118      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fa21 	bl	8001168 <HAL_GetTick>
 8002d26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe fa1d 	bl	8001168 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e169      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8084 	beq.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d07c      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	2301      	movs	r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	461a      	mov	r2, r3
 8002db6:	2300      	movs	r3, #0
 8002db8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dba:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04b      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe f9cd 	bl	8001168 <HAL_GetTick>
 8002dce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f9c9 	bl	8001168 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e113      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	2302      	movs	r3, #2
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8002e00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d108      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e16:	4b01      	ldr	r3, [pc, #4]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	e00d      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	10908100 	.word	0x10908100
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2202      	movs	r2, #2
 8002e3a:	613a      	str	r2, [r7, #16]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	60fa      	str	r2, [r7, #12]
  return result;
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0b7      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e62:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	496a      	ldr	r1, [pc, #424]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a65      	ldr	r2, [pc, #404]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f023 0203 	bic.w	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	495d      	ldr	r1, [pc, #372]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb2:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4956      	ldr	r1, [pc, #344]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ed0:	4b51      	ldr	r3, [pc, #324]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	494e      	ldr	r1, [pc, #312]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f023 0210 	bic.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4947      	ldr	r1, [pc, #284]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	493f      	ldr	r1, [pc, #252]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f023 0220 	bic.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4938      	ldr	r1, [pc, #224]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f48:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4930      	ldr	r1, [pc, #192]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4929      	ldr	r1, [pc, #164]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4921      	ldr	r1, [pc, #132]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	491a      	ldr	r1, [pc, #104]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	4912      	ldr	r1, [pc, #72]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	490b      	ldr	r1, [pc, #44]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3748      	adds	r7, #72	; 0x48
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000

0800301c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7f5b      	ldrb	r3, [r3, #29]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd ff9a 	bl	8000f7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d055      	beq.n	8003108 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	22ca      	movs	r2, #202	; 0xca
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2253      	movs	r2, #83	; 0x53
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f87f 	bl	8003170 <RTC_EnterInitMode>
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12c      	bne.n	80030d6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800308a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	041a      	lsls	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f886 	bl	80031de <RTC_ExitInitMode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d110      	bne.n	80030fe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
 8003106:	e001      	b.n	800310c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_RTC_WaitForSynchro+0x48>)
 8003136:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003138:	f7fe f816 	bl	8001168 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800313e:	e009      	b.n	8003154 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003140:	f7fe f812 	bl	8001168 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314e:	d901      	bls.n	8003154 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e007      	b.n	8003164 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	0001ff5f 	.word	0x0001ff5f

08003170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d122      	bne.n	80031d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800319c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800319e:	f7fd ffe3 	bl	8001168 <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031a4:	e00c      	b.n	80031c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031a6:	f7fd ffdf 	bl	8001168 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b4:	d904      	bls.n	80031c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <RTC_EnterInitMode+0x64>
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d1e8      	bne.n	80031a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff8b 	bl	8003124 <HAL_RTC_WaitForSynchro>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2204      	movs	r2, #4
 8003218:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5a      	ldr	r2, [pc, #360]	; (80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0adb      	lsrs	r3, r3, #11
 8003240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	7f1b      	ldrb	r3, [r3, #28]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8003252:	2302      	movs	r3, #2
 8003254:	e09d      	b.n	8003392 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2202      	movs	r2, #2
 8003260:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ca      	movs	r2, #202	; 0xca
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2253      	movs	r2, #83	; 0x53
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	3b01      	subs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2203      	movs	r2, #3
 8003298:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e076      	b.n	8003392 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e6      	bne.n	8003280 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032d2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0adb      	lsrs	r3, r3, #11
 80032e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e041      	b.n	8003392 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0e6      	beq.n	80032ea <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0207 	bic.w	r2, r2, #7
 800332a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335a:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800337a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000004 	.word	0x20000004
 80033a4:	10624dd3 	.word	0x10624dd3
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7f1b      	ldrb	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e047      	b.n	8003454 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	22ca      	movs	r2, #202	; 0xca
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2253      	movs	r2, #83	; 0x53
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ee:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033fe:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003400:	f7fd feb2 	bl	8001168 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003406:	e013      	b.n	8003430 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003408:	f7fd feae 	bl	8001168 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003416:	d90b      	bls.n	8003430 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e011      	b.n	8003454 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0e4      	beq.n	8003408 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800346a:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800348a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f809 	bl	80034a4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	775a      	strb	r2, [r3, #29]
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <memset>:
 80034b8:	4402      	add	r2, r0
 80034ba:	4603      	mov	r3, r0
 80034bc:	4293      	cmp	r3, r2
 80034be:	d100      	bne.n	80034c2 <memset+0xa>
 80034c0:	4770      	bx	lr
 80034c2:	f803 1b01 	strb.w	r1, [r3], #1
 80034c6:	e7f9      	b.n	80034bc <memset+0x4>

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	4d0d      	ldr	r5, [pc, #52]	; (8003500 <__libc_init_array+0x38>)
 80034cc:	4c0d      	ldr	r4, [pc, #52]	; (8003504 <__libc_init_array+0x3c>)
 80034ce:	1b64      	subs	r4, r4, r5
 80034d0:	10a4      	asrs	r4, r4, #2
 80034d2:	2600      	movs	r6, #0
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	4d0b      	ldr	r5, [pc, #44]	; (8003508 <__libc_init_array+0x40>)
 80034da:	4c0c      	ldr	r4, [pc, #48]	; (800350c <__libc_init_array+0x44>)
 80034dc:	f000 f826 	bl	800352c <_init>
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	2600      	movs	r6, #0
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	0800455c 	.word	0x0800455c
 8003504:	0800455c 	.word	0x0800455c
 8003508:	0800455c 	.word	0x0800455c
 800350c:	08004560 	.word	0x08004560

08003510 <memcpy>:
 8003510:	440a      	add	r2, r1
 8003512:	4291      	cmp	r1, r2
 8003514:	f100 33ff 	add.w	r3, r0, #4294967295
 8003518:	d100      	bne.n	800351c <memcpy+0xc>
 800351a:	4770      	bx	lr
 800351c:	b510      	push	{r4, lr}
 800351e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003526:	4291      	cmp	r1, r2
 8003528:	d1f9      	bne.n	800351e <memcpy+0xe>
 800352a:	bd10      	pop	{r4, pc}

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
 8003544:	0000      	movs	r0, r0
	...

08003548 <__bubble_main_ram_veneer>:
 8003548:	f85f f000 	ldr.w	pc, [pc]	; 800354c <__bubble_main_ram_veneer+0x4>
 800354c:	200000bd 	.word	0x200000bd

08003550 <__bubble_main_ccm_veneer>:
 8003550:	f85f f000 	ldr.w	pc, [pc]	; 8003554 <__bubble_main_ccm_veneer+0x4>
 8003554:	100000ad 	.word	0x100000ad

Disassembly of section .data:

20000000 <pll_on>:
20000000:	00000001                                ....

20000004 <SystemCoreClock>:
20000004:	007a1200                                ..z.

20000008 <uwTickPrio>:
20000008:	00000010                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <BubbleSortRAM>:
{
20000010:	b480      	push	{r7}
20000012:	b087      	sub	sp, #28
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
20000018:	2300      	movs	r3, #0
2000001a:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
2000001c:	2301      	movs	r3, #1
2000001e:	60fb      	str	r3, [r7, #12]
20000020:	e040      	b.n	200000a4 <BubbleSortRAM+0x94>
      Sorted = TRUE;
20000022:	2301      	movs	r3, #1
20000024:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20000026:	2300      	movs	r3, #0
20000028:	613b      	str	r3, [r7, #16]
2000002a:	e02f      	b.n	2000008c <BubbleSortRAM+0x7c>
         if (Index > NUMELEMS-i)
2000002c:	68fb      	ldr	r3, [r7, #12]
2000002e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
20000032:	693a      	ldr	r2, [r7, #16]
20000034:	429a      	cmp	r2, r3
20000036:	dc2e      	bgt.n	20000096 <BubbleSortRAM+0x86>
         if (Array[Index] > Array[Index + 1])
20000038:	693b      	ldr	r3, [r7, #16]
2000003a:	009b      	lsls	r3, r3, #2
2000003c:	687a      	ldr	r2, [r7, #4]
2000003e:	4413      	add	r3, r2
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	693b      	ldr	r3, [r7, #16]
20000044:	3301      	adds	r3, #1
20000046:	009b      	lsls	r3, r3, #2
20000048:	6879      	ldr	r1, [r7, #4]
2000004a:	440b      	add	r3, r1
2000004c:	681b      	ldr	r3, [r3, #0]
2000004e:	429a      	cmp	r2, r3
20000050:	dd19      	ble.n	20000086 <BubbleSortRAM+0x76>
            Temp = Array[Index];
20000052:	693b      	ldr	r3, [r7, #16]
20000054:	009b      	lsls	r3, r3, #2
20000056:	687a      	ldr	r2, [r7, #4]
20000058:	4413      	add	r3, r2
2000005a:	681b      	ldr	r3, [r3, #0]
2000005c:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
2000005e:	693b      	ldr	r3, [r7, #16]
20000060:	3301      	adds	r3, #1
20000062:	009b      	lsls	r3, r3, #2
20000064:	687a      	ldr	r2, [r7, #4]
20000066:	441a      	add	r2, r3
20000068:	693b      	ldr	r3, [r7, #16]
2000006a:	009b      	lsls	r3, r3, #2
2000006c:	6879      	ldr	r1, [r7, #4]
2000006e:	440b      	add	r3, r1
20000070:	6812      	ldr	r2, [r2, #0]
20000072:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
20000074:	693b      	ldr	r3, [r7, #16]
20000076:	3301      	adds	r3, #1
20000078:	009b      	lsls	r3, r3, #2
2000007a:	687a      	ldr	r2, [r7, #4]
2000007c:	4413      	add	r3, r2
2000007e:	68ba      	ldr	r2, [r7, #8]
20000080:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
20000082:	2300      	movs	r3, #0
20000084:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20000086:	693b      	ldr	r3, [r7, #16]
20000088:	3301      	adds	r3, #1
2000008a:	613b      	str	r3, [r7, #16]
2000008c:	693b      	ldr	r3, [r7, #16]
2000008e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000092:	dbcb      	blt.n	2000002c <BubbleSortRAM+0x1c>
20000094:	e000      	b.n	20000098 <BubbleSortRAM+0x88>
           break;
20000096:	bf00      	nop
      if (Sorted)
20000098:	697b      	ldr	r3, [r7, #20]
2000009a:	2b00      	cmp	r3, #0
2000009c:	d107      	bne.n	200000ae <BubbleSortRAM+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
2000009e:	68fb      	ldr	r3, [r7, #12]
200000a0:	3301      	adds	r3, #1
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200000aa:	dbba      	blt.n	20000022 <BubbleSortRAM+0x12>
}
200000ac:	e000      	b.n	200000b0 <BubbleSortRAM+0xa0>
         break;
200000ae:	bf00      	nop
}
200000b0:	bf00      	nop
200000b2:	371c      	adds	r7, #28
200000b4:	46bd      	mov	sp, r7
200000b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ba:	4770      	bx	lr

200000bc <bubble_main_ram>:
{
200000bc:	b580      	push	{r7, lr}
200000be:	af00      	add	r7, sp, #0
  BubbleSortRAM(srcArrayInRAM);
200000c0:	4802      	ldr	r0, [pc, #8]	; (200000cc <bubble_main_ram+0x10>)
200000c2:	f7ff ffa5 	bl	20000010 <BubbleSortRAM>
}
200000c6:	bf00      	nop
200000c8:	bd80      	pop	{r7, pc}
200000ca:	bf00      	nop
200000cc:	200000ec 	.word	0x200000ec

Disassembly of section .ccmram:

10000000 <BubbleSortCCM>:
{
10000000:	b480      	push	{r7}
10000002:	b087      	sub	sp, #28
10000004:	af00      	add	r7, sp, #0
10000006:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
10000008:	2300      	movs	r3, #0
1000000a:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
1000000c:	2301      	movs	r3, #1
1000000e:	60fb      	str	r3, [r7, #12]
10000010:	e040      	b.n	10000094 <BubbleSortCCM+0x94>
      Sorted = TRUE;
10000012:	2301      	movs	r3, #1
10000014:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000016:	2300      	movs	r3, #0
10000018:	613b      	str	r3, [r7, #16]
1000001a:	e02f      	b.n	1000007c <BubbleSortCCM+0x7c>
         if (Index > NUMELEMS-i)
1000001c:	68fb      	ldr	r3, [r7, #12]
1000001e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
10000022:	693a      	ldr	r2, [r7, #16]
10000024:	429a      	cmp	r2, r3
10000026:	dc2e      	bgt.n	10000086 <BubbleSortCCM+0x86>
         if (Array[Index] > Array[Index + 1])
10000028:	693b      	ldr	r3, [r7, #16]
1000002a:	009b      	lsls	r3, r3, #2
1000002c:	687a      	ldr	r2, [r7, #4]
1000002e:	4413      	add	r3, r2
10000030:	681a      	ldr	r2, [r3, #0]
10000032:	693b      	ldr	r3, [r7, #16]
10000034:	3301      	adds	r3, #1
10000036:	009b      	lsls	r3, r3, #2
10000038:	6879      	ldr	r1, [r7, #4]
1000003a:	440b      	add	r3, r1
1000003c:	681b      	ldr	r3, [r3, #0]
1000003e:	429a      	cmp	r2, r3
10000040:	dd19      	ble.n	10000076 <BubbleSortCCM+0x76>
            Temp = Array[Index];
10000042:	693b      	ldr	r3, [r7, #16]
10000044:	009b      	lsls	r3, r3, #2
10000046:	687a      	ldr	r2, [r7, #4]
10000048:	4413      	add	r3, r2
1000004a:	681b      	ldr	r3, [r3, #0]
1000004c:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
1000004e:	693b      	ldr	r3, [r7, #16]
10000050:	3301      	adds	r3, #1
10000052:	009b      	lsls	r3, r3, #2
10000054:	687a      	ldr	r2, [r7, #4]
10000056:	441a      	add	r2, r3
10000058:	693b      	ldr	r3, [r7, #16]
1000005a:	009b      	lsls	r3, r3, #2
1000005c:	6879      	ldr	r1, [r7, #4]
1000005e:	440b      	add	r3, r1
10000060:	6812      	ldr	r2, [r2, #0]
10000062:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
10000064:	693b      	ldr	r3, [r7, #16]
10000066:	3301      	adds	r3, #1
10000068:	009b      	lsls	r3, r3, #2
1000006a:	687a      	ldr	r2, [r7, #4]
1000006c:	4413      	add	r3, r2
1000006e:	68ba      	ldr	r2, [r7, #8]
10000070:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
10000072:	2300      	movs	r3, #0
10000074:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000076:	693b      	ldr	r3, [r7, #16]
10000078:	3301      	adds	r3, #1
1000007a:	613b      	str	r3, [r7, #16]
1000007c:	693b      	ldr	r3, [r7, #16]
1000007e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10000082:	dbcb      	blt.n	1000001c <BubbleSortCCM+0x1c>
10000084:	e000      	b.n	10000088 <BubbleSortCCM+0x88>
           break;
10000086:	bf00      	nop
      if (Sorted)
10000088:	697b      	ldr	r3, [r7, #20]
1000008a:	2b00      	cmp	r3, #0
1000008c:	d107      	bne.n	1000009e <BubbleSortCCM+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
1000008e:	68fb      	ldr	r3, [r7, #12]
10000090:	3301      	adds	r3, #1
10000092:	60fb      	str	r3, [r7, #12]
10000094:	68fb      	ldr	r3, [r7, #12]
10000096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000009a:	dbba      	blt.n	10000012 <BubbleSortCCM+0x12>
}
1000009c:	e000      	b.n	100000a0 <BubbleSortCCM+0xa0>
         break;
1000009e:	bf00      	nop
}
100000a0:	bf00      	nop
100000a2:	371c      	adds	r7, #28
100000a4:	46bd      	mov	sp, r7
100000a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100000aa:	4770      	bx	lr

100000ac <bubble_main_ccm>:
{
100000ac:	b580      	push	{r7, lr}
100000ae:	af00      	add	r7, sp, #0
  BubbleSortCCM(srcArrayInRAM);
100000b0:	4802      	ldr	r0, [pc, #8]	; (100000bc <bubble_main_ccm+0x10>)
100000b2:	f7ff ffa5 	bl	10000000 <BubbleSortCCM>
}
100000b6:	bf00      	nop
100000b8:	bd80      	pop	{r7, pc}
100000ba:	bf00      	nop
100000bc:	200000ec 	.word	0x200000ec
