
change_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004668  08004668  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004668  08004668  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000128  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b50  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e9  00000000  00000000  00030bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00033b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e195  00000000  00000000  00034968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f17  00000000  00000000  00052afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb3fd  00000000  00000000  00064a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fe11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041e4  00000000  00000000  0011fe64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045b8 	.word	0x080045b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080045b8 	.word	0x080045b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Sleep>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Sleep(int time)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  HAL_SuspendTick();
 8000278:	f000 fbd4 	bl	8000a24 <HAL_SuspendTick>
  uint32_t counter = time*2;/*divide by (16/32)*/
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	60fb      	str	r3, [r7, #12]
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000282:	2200      	movs	r2, #0
 8000284:	68f9      	ldr	r1, [r7, #12]
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <Sleep+0x38>)
 8000288:	f002 fbbe 	bl	8002a08 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* Enter sleep mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 800028c:	2101      	movs	r1, #1
 800028e:	2000      	movs	r0, #0
 8000290:	f000 fe74 	bl	8000f7c <HAL_PWR_EnterSLEEPMode>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <Sleep+0x38>)
 8000296:	f002 fc79 	bl	8002b8c <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 800029a:	f000 fbd3 	bl	8000a44 <HAL_ResumeTick>
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000008c 	.word	0x2000008c

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b097      	sub	sp, #92	; 0x5c
 80002b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fb51 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f869 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f96d 	bl	8000598 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002be:	f000 f8ed 	bl	800049c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80002c2:	f000 f939 	bl	8000538 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80002c6:	f000 f8b9 	bl	800043c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80002ca:	482b      	ldr	r0, [pc, #172]	; (8000378 <main+0xcc>)
 80002cc:	f002 fd3c 	bl	8002d48 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t msg[60] = {"\o"};
 80002d0:	236f      	movs	r3, #111	; 0x6f
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	2238      	movs	r2, #56	; 0x38
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 fcf5 	bl	8003ccc <memset>
  sprintf(msg, "\n START \n");
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4925      	ldr	r1, [pc, #148]	; (800037c <main+0xd0>)
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fcf8 	bl	8003cdc <siprintf>
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xFFFF);
 80002ec:	1d39      	adds	r1, r7, #4
 80002ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f2:	223c      	movs	r2, #60	; 0x3c
 80002f4:	4822      	ldr	r0, [pc, #136]	; (8000380 <main+0xd4>)
 80002f6:	f003 f84b 	bl	8003390 <HAL_UART_Transmit>
  int f1 = HAL_RCC_GetSysClockFreq();
 80002fa:	f002 f815 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80002fe:	4603      	mov	r3, r0
 8000300:	64fb      	str	r3, [r7, #76]	; 0x4c
  Sleep(200);
 8000302:	20c8      	movs	r0, #200	; 0xc8
 8000304:	f7ff ffb4 	bl	8000270 <Sleep>
  int t1 = TIM2 -> CNT;
 8000308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  SystemClockHSI_Config();
 8000310:	f000 f966 	bl	80005e0 <SystemClockHSI_Config>
  int t2 = TIM2 -> CNT;
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031a:	647b      	str	r3, [r7, #68]	; 0x44
  Sleep(200);
 800031c:	20c8      	movs	r0, #200	; 0xc8
 800031e:	f7ff ffa7 	bl	8000270 <Sleep>
  int f2 = HAL_RCC_GetSysClockFreq();
 8000322:	f002 f801 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8000326:	4603      	mov	r3, r0
 8000328:	643b      	str	r3, [r7, #64]	; 0x40
  MX_USART1_UART_Init();
 800032a:	f000 f905 	bl	8000538 <MX_USART1_UART_Init>
  sprintf(msg, "f1 : %d | f2 : %d | t : %d \n\n", f1/1000000, f2/1000000, t2-t1);
 800032e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000330:	4a14      	ldr	r2, [pc, #80]	; (8000384 <main+0xd8>)
 8000332:	fb82 1203 	smull	r1, r2, r2, r3
 8000336:	1492      	asrs	r2, r2, #18
 8000338:	17db      	asrs	r3, r3, #31
 800033a:	1ad1      	subs	r1, r2, r3
 800033c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800033e:	4a11      	ldr	r2, [pc, #68]	; (8000384 <main+0xd8>)
 8000340:	fb82 0203 	smull	r0, r2, r2, r3
 8000344:	1492      	asrs	r2, r2, #18
 8000346:	17db      	asrs	r3, r3, #31
 8000348:	1ad4      	subs	r4, r2, r3
 800034a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800034c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	1d38      	adds	r0, r7, #4
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4623      	mov	r3, r4
 8000356:	460a      	mov	r2, r1
 8000358:	490b      	ldr	r1, [pc, #44]	; (8000388 <main+0xdc>)
 800035a:	f003 fcbf 	bl	8003cdc <siprintf>
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xFFFF);
 800035e:	1d39      	adds	r1, r7, #4
 8000360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000364:	223c      	movs	r2, #60	; 0x3c
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <main+0xd4>)
 8000368:	f003 f812 	bl	8003390 <HAL_UART_Transmit>
 800036c:	2300      	movs	r3, #0
  //HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800036e:	4618      	mov	r0, r3
 8000370:	3754      	adds	r7, #84	; 0x54
 8000372:	46bd      	mov	sp, r7
 8000374:	bd90      	pop	{r4, r7, pc}
 8000376:	bf00      	nop
 8000378:	200000ac 	.word	0x200000ac
 800037c:	080045d0 	.word	0x080045d0
 8000380:	200000f8 	.word	0x200000f8
 8000384:	431bde83 	.word	0x431bde83
 8000388:	080045dc 	.word	0x080045dc

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09e      	sub	sp, #120	; 0x78
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fc96 	bl	8003ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	223c      	movs	r2, #60	; 0x3c
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fc88 	bl	8003ccc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003bc:	2309      	movs	r3, #9
 80003be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c6:	2301      	movs	r3, #1
 80003c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fdec 	bl	8000fb4 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80003e2:	f000 f95c 	bl	800069e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fe14 	bl	8002030 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800040e:	f000 f946 	bl	800069e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000412:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000416:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000418:	2300      	movs	r3, #0
 800041a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800041c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000420:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	463b      	mov	r3, r7
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f839 	bl	800249c <HAL_RCCEx_PeriphCLKConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000430:	f000 f935 	bl	800069e <Error_Handler>
  }
}
 8000434:	bf00      	nop
 8000436:	3778      	adds	r7, #120	; 0x78
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_RTC_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <MX_RTC_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_RTC_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_RTC_Init+0x58>)
 800044e:	227f      	movs	r2, #127	; 0x7f
 8000450:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_RTC_Init+0x58>)
 8000454:	22ff      	movs	r2, #255	; 0xff
 8000456:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_RTC_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <MX_RTC_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_RTC_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800046a:	480a      	ldr	r0, [pc, #40]	; (8000494 <MX_RTC_Init+0x58>)
 800046c:	f002 f9c6 	bl	80027fc <HAL_RTC_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000476:	f000 f912 	bl	800069e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_RTC_Init+0x58>)
 8000480:	f002 fac2 	bl	8002a08 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 f908 	bl	800069e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000008c 	.word	0x2000008c
 8000498:	40002800 	.word	0x40002800

0800049c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_TIM2_Init+0x98>)
 80004bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_TIM2_Init+0x98>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_TIM2_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_TIM2_Init+0x98>)
 80004d0:	f04f 32ff 	mov.w	r2, #4294967295
 80004d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_TIM2_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_TIM2_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <MX_TIM2_Init+0x98>)
 80004e4:	f002 fbd8 	bl	8002c98 <HAL_TIM_Base_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004ee:	f000 f8d6 	bl	800069e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_TIM2_Init+0x98>)
 8000500:	f002 fc84 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800050a:	f000 f8c8 	bl	800069e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_TIM2_Init+0x98>)
 800051c:	f002 fe6a 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000526:	f000 f8ba 	bl	800069e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000ac 	.word	0x200000ac

08000538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_USART1_UART_Init+0x58>)
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <MX_USART1_UART_Init+0x5c>)
 8000540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000544:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART1_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART1_UART_Init+0x58>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART1_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART1_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART1_UART_Init+0x58>)
 800057c:	f002 feba 	bl	80032f4 <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000586:	f000 f88a 	bl	800069e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000f8 	.word	0x200000f8
 8000594:	40013800 	.word	0x40013800

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_GPIO_Init+0x44>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <MX_GPIO_Init+0x44>)
 80005a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_GPIO_Init+0x44>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_GPIO_Init+0x44>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_GPIO_Init+0x44>)
 80005bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x44>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <SystemClockHSI_Config>:
  }
}


static void SystemClockHSI_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2228      	movs	r2, #40	; 0x28
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fb65 	bl	8003ccc <memset>

  /* -1- Select HSE  as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType       = RCC_CLOCKTYPE_SYSCLK;
 8000602:	2301      	movs	r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fd0d 	bl	8002030 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClockHSI_Config+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 800061c:	f000 f83f 	bl	800069e <Error_Handler>
  }

  /* -2- Enable HSI Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType    = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState      = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource     = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  /* PLL source is the HSI frequency divided by 2 */
  RCC_OscInitStruct.PLL.PLLMUL       = RCC_PLL_MUL16;
 8000634:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fcb9 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClockHSI_Config+0x6c>
  {
    /* Initialization Error */
    Error_Handler();
 8000648:	f000 f829 	bl	800069e <Error_Handler>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType       = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800064c:	230f      	movs	r3, #15
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_HCLK_DIV2;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider  = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fce1 	bl	8002030 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClockHSI_Config+0x98>
  {
    /* Initialization Error */
    Error_Handler();
 8000674:	f000 f813 	bl	800069e <Error_Handler>
  }

  /* -4- Optional: Disable HSE  Oscillator (if the HSE  is no more needed by the application) */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState        = RCC_HSE_OFF;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fc94 	bl	8000fb4 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClockHSI_Config+0xb6>
  {
    /* Initialization Error */
    Error_Handler();
 8000692:	f000 f804 	bl	800069e <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3740      	adds	r7, #64	; 0x40
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i
}
 80006a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <Error_Handler+0x8>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x44>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x44>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x44>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x44>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_RTC_MspInit+0x50>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d119      	bne.n	8000736 <HAL_RTC_MspInit+0x46>
 8000702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000706:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	fa93 f3a3 	rbit	r3, r3
 800070e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000710:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_RTC_MspInit+0x54>)
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	461a      	mov	r2, r3
 8000722:	2301      	movs	r3, #1
 8000724:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2003      	movs	r0, #3
 800072c:	f000 fa75 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 fa8e 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40002800 	.word	0x40002800
 8000744:	10908100 	.word	0x10908100

08000748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d10b      	bne.n	8000772 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_TIM_Base_MspInit+0x38>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_TIM_Base_MspInit+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_TIM_Base_MspInit+0x38>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_UART_MspInit+0x7c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d127      	bne.n	80007f6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007d6:	2330      	movs	r3, #48	; 0x30
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007f2:	f000 fa49 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40013800 	.word	0x40013800
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000858:	f000 f8c4 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <RTC_WKUP_IRQHandler+0x10>)
 8000866:	f002 f9e9 	bl	8002c3c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000008c 	.word	0x2000008c

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f003 f9e8 	bl	8003c78 <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000a000 	.word	0x2000a000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	20000180 	.word	0x20000180
 80008dc:	20000198 	.word	0x20000198

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000908:	f7ff ffea 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000932:	f003 f9a7 	bl	8003c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000936:	f7ff fcb9 	bl	80002ac <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800093c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000948:	08004670 	.word	0x08004670
  ldr r2, =_sbss
 800094c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000950:	20000198 	.word	0x20000198

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f94b 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fe98 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f963 	bl	8000c6e <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 f92b 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x20>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x24>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_IncTick+0x24>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000184 	.word	0x20000184

08000a0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000184 	.word	0x20000184

08000a24 <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_SuspendTick+0x1c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_SuspendTick+0x1c>)
 8000a2e:	f023 0302 	bic.w	r3, r3, #2
 8000a32:	6013      	str	r3, [r2, #0]
                                                   
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_ResumeTick+0x1c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_ResumeTick+0x1c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6013      	str	r3, [r2, #0]
  
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff3e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff31 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e154      	b.n	8000f42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8146 	beq.w	8000f3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80a0 	beq.w	8000f3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a57      	ldr	r2, [pc, #348]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b55      	ldr	r3, [pc, #340]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a53      	ldr	r2, [pc, #332]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3e:	d019      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d013      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d00d      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d101      	bne.n	8000e64 <HAL_GPIO_Init+0x1dc>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e008      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e64:	2305      	movs	r3, #5
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e74:	2300      	movs	r3, #0
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e86:	4937      	ldr	r1, [pc, #220]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f47f aea3 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48001000 	.word	0x48001000
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f8e:	f023 0304 	bic.w	r3, r3, #4
 8000f92:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f9a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000f9c:	e002      	b.n	8000fa4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8000f9e:	bf40      	sev
    __WFE();
 8000fa0:	bf20      	wfe
    __WFE();
 8000fa2:	bf20      	wfe
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f001 b823 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 817d 	beq.w	80012ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ff0:	4bbc      	ldr	r3, [pc, #752]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d00c      	beq.n	8001016 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ffc:	4bb9      	ldr	r3, [pc, #740]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b08      	cmp	r3, #8
 8001006:	d15c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x10e>
 8001008:	4bb6      	ldr	r3, [pc, #728]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d155      	bne.n	80010c2 <HAL_RCC_OscConfig+0x10e>
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800102a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x94>
 8001042:	4ba8      	ldr	r3, [pc, #672]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	e015      	b.n	8001074 <HAL_RCC_OscConfig+0xc0>
 8001048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001064:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001070:	4b9c      	ldr	r3, [pc, #624]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001078:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800107c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001080:	fa92 f2a2 	rbit	r2, r2
 8001084:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001088:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800108c:	fab2 f282 	clz	r2, r2
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	f002 021f 	and.w	r2, r2, #31
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 811f 	beq.w	80012e8 <HAL_RCC_OscConfig+0x334>
 80010aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 8116 	bne.w	80012e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	f000 bfaf 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12e>
 80010d4:	4b83      	ldr	r3, [pc, #524]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a82      	ldr	r2, [pc, #520]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e036      	b.n	8001150 <HAL_RCC_OscConfig+0x19c>
 80010e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x158>
 80010f2:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80010f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a78      	ldr	r2, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e021      	b.n	8001150 <HAL_RCC_OscConfig+0x19c>
 800110c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x184>
 800111e:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a70      	ldr	r2, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6d      	ldr	r2, [pc, #436]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0x19c>
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001150:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f023 020f 	bic.w	r2, r3, #15
 8001158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	495f      	ldr	r1, [pc, #380]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 8001166:	4313      	orrs	r3, r2
 8001168:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d059      	beq.n	800122e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc47 	bl	8000a0c <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc42 	bl	8000a0c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d902      	bls.n	800119a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	f000 bf43 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 800119a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x218>
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	e015      	b.n	80011f8 <HAL_RCC_OscConfig+0x244>
 80011cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001200:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001204:	fa92 f2a2 	rbit	r2, r2
 8001208:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800120c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f042 0220 	orr.w	r2, r2, #32
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f002 021f 	and.w	r2, r2, #31
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ab      	beq.n	8001184 <HAL_RCC_OscConfig+0x1d0>
 800122c:	e05d      	b.n	80012ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fbed 	bl	8000a0c <HAL_GetTick>
 8001232:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fbe8 	bl	8000a0c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d902      	bls.n	800124e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	f000 bee9 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 800124e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001252:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001262:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <HAL_RCC_OscConfig+0x2cc>
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	e015      	b.n	80012ac <HAL_RCC_OscConfig+0x2f8>
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001298:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800129c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012b8:	fa92 f2a2 	rbit	r2, r2
 80012bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012c4:	fab2 f282 	clz	r2, r2
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	f002 021f 	and.w	r2, r2, #31
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ab      	bne.n	8001238 <HAL_RCC_OscConfig+0x284>
 80012e0:	e003      	b.n	80012ea <HAL_RCC_OscConfig+0x336>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 817d 	beq.w	80015fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001300:	4ba6      	ldr	r3, [pc, #664]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800130c:	4ba3      	ldr	r3, [pc, #652]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d172      	bne.n	80013fe <HAL_RCC_OscConfig+0x44a>
 8001318:	4ba0      	ldr	r3, [pc, #640]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d16c      	bne.n	80013fe <HAL_RCC_OscConfig+0x44a>
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001336:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x3a0>
 800134e:	4b93      	ldr	r3, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e013      	b.n	800137c <HAL_RCC_OscConfig+0x3c8>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800136c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001378:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2202      	movs	r2, #2
 800137e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001382:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800138e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <HAL_RCC_OscConfig+0x410>
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 be2e 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b75      	ldr	r3, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	21f8      	movs	r1, #248	; 0xf8
 80013da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013e2:	fa91 f1a1 	rbit	r1, r1
 80013e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013ee:	fab1 f181 	clz	r1, r1
 80013f2:	b2c9      	uxtb	r1, r1
 80013f4:	408b      	lsls	r3, r1
 80013f6:	4969      	ldr	r1, [pc, #420]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fc:	e0fd      	b.n	80015fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8088 	beq.w	8001520 <HAL_RCC_OscConfig+0x56c>
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001422:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fae6 	bl	8000a0c <HAL_GetTick>
 8001440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fae1 	bl	8000a0c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d902      	bls.n	800145c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	f000 bde2 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800146e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x4d8>
 8001486:	4b45      	ldr	r3, [pc, #276]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	e013      	b.n	80014b4 <HAL_RCC_OscConfig+0x500>
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2202      	movs	r2, #2
 80014b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014be:	fa92 f2a2 	rbit	r2, r2
 80014c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f002 021f 	and.w	r2, r2, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0af      	beq.n	8001446 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	21f8      	movs	r1, #248	; 0xf8
 80014fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001504:	fa91 f1a1 	rbit	r1, r1
 8001508:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800150c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001510:	fab1 f181 	clz	r1, r1
 8001514:	b2c9      	uxtb	r1, r1
 8001516:	408b      	lsls	r3, r1
 8001518:	4920      	ldr	r1, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
 800151e:	e06c      	b.n	80015fa <HAL_RCC_OscConfig+0x646>
 8001520:	2301      	movs	r3, #1
 8001522:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	461a      	mov	r2, r3
 8001548:	2300      	movs	r3, #0
 800154a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fa5e 	bl	8000a0c <HAL_GetTick>
 8001550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fa59 	bl	8000a0c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d902      	bls.n	800156c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	f000 bd5a 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800157e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d104      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5ec>
 8001596:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_RCC_OscConfig+0x5e8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	e015      	b.n	80015c8 <HAL_RCC_OscConfig+0x614>
 800159c:	40021000 	.word	0x40021000
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015c4:	4bc8      	ldr	r3, [pc, #800]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	2202      	movs	r2, #2
 80015ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ad      	bne.n	8001556 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8110 	beq.w	8001830 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d079      	beq.n	8001714 <HAL_RCC_OscConfig+0x760>
 8001620:	2301      	movs	r3, #1
 8001622:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4bab      	ldr	r3, [pc, #684]	; (80018ec <HAL_RCC_OscConfig+0x938>)
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	461a      	mov	r2, r3
 8001646:	2301      	movs	r3, #1
 8001648:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f9df 	bl	8000a0c <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f9da 	bl	8000a0c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d902      	bls.n	800166a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	f000 bcdb 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001684:	2202      	movs	r2, #2
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 80016c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016d0:	2102      	movs	r1, #2
 80016d2:	6019      	str	r1, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f1a3 	rbit	r1, r3
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016ea:	6019      	str	r1, [r3, #0]
  return result;
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0a0      	beq.n	8001654 <HAL_RCC_OscConfig+0x6a0>
 8001712:	e08d      	b.n	8001830 <HAL_RCC_OscConfig+0x87c>
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001736:	601a      	str	r2, [r3, #0]
  return result;
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001740:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x938>)
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	461a      	mov	r2, r3
 8001752:	2300      	movs	r3, #0
 8001754:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff f959 	bl	8000a0c <HAL_GetTick>
 800175a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff f954 	bl	8000a0c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d902      	bls.n	8001776 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	f000 bc55 	b.w	8002020 <HAL_RCC_OscConfig+0x106c>
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 80017e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017ee:	2102      	movs	r1, #2
 80017f0:	6019      	str	r1, [r3, #0]
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f1a3 	rbit	r1, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001808:	6019      	str	r1, [r3, #0]
  return result;
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d197      	bne.n	8001760 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 81a1 	beq.w	8001b88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d116      	bne.n	8001886 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	61d3      	str	r3, [r2, #28]
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800187e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_OscConfig+0x93c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_RCC_OscConfig+0x93c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x93c>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff f8b5 	bl	8000a0c <HAL_GetTick>
 80018a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	e009      	b.n	80018bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7ff f8b0 	bl	8000a0c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e3b1      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x93c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_OscConfig+0x940>
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a02      	ldr	r2, [pc, #8]	; (80018e8 <HAL_RCC_OscConfig+0x934>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e03c      	b.n	8001960 <HAL_RCC_OscConfig+0x9ac>
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	10908120 	.word	0x10908120
 80018f0:	40007000 	.word	0x40007000
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x96a>
 8001904:	4bc1      	ldr	r3, [pc, #772]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4ac0      	ldr	r2, [pc, #768]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4bbe      	ldr	r3, [pc, #760]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4abd      	ldr	r2, [pc, #756]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e020      	b.n	8001960 <HAL_RCC_OscConfig+0x9ac>
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x994>
 800192e:	4bb7      	ldr	r3, [pc, #732]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4ab6      	ldr	r2, [pc, #728]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	4bb4      	ldr	r3, [pc, #720]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4ab3      	ldr	r2, [pc, #716]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0x9ac>
 8001948:	4bb0      	ldr	r3, [pc, #704]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4aaf      	ldr	r2, [pc, #700]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4bad      	ldr	r3, [pc, #692]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4aac      	ldr	r2, [pc, #688]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8081 	beq.w	8001a74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f84b 	bl	8000a0c <HAL_GetTick>
 8001976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff f846 	bl	8000a0c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e345      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019da:	601a      	str	r2, [r3, #0]
  return result;
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0xa4c>
 80019fa:	4b84      	ldr	r3, [pc, #528]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	e013      	b.n	8001a28 <HAL_RCC_OscConfig+0xa74>
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a30:	2102      	movs	r1, #2
 8001a32:	6011      	str	r1, [r2, #0]
 8001a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fa92 f1a2 	rbit	r1, r2
 8001a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a4a:	6011      	str	r1, [r2, #0]
  return result;
 8001a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d084      	beq.n	800197c <HAL_RCC_OscConfig+0x9c8>
 8001a72:	e07f      	b.n	8001b74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7fe ffca 	bl	8000a0c <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00b      	b.n	8001a96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7fe ffc5 	bl	8000a0c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e2c4      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001adc:	601a      	str	r2, [r3, #0]
  return result;
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ae6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0xb4e>
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	e013      	b.n	8001b2a <HAL_RCC_OscConfig+0xb76>
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b32:	2102      	movs	r1, #2
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fa92 f1a2 	rbit	r1, r2
 8001b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b4c:	6011      	str	r1, [r2, #0]
  return result;
 8001b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b52:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d184      	bne.n	8001a7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8242 	beq.w	800201e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_RCC_OscConfig+0xc58>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	f000 8213 	beq.w	8001fce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	f040 8162 	bne.w	8001e7e <HAL_RCC_OscConfig+0xeca>
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bde:	601a      	str	r2, [r3, #0]
  return result;
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001be8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff04 	bl	8000a0c <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e00c      	b.n	8001c24 <HAL_RCC_OscConfig+0xc70>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe fefc 	bl	8000a0c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1fd      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_OscConfig+0xcba>
 8001c68:	4bb0      	ldr	r3, [pc, #704]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_OscConfig+0xd0a>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	4b9c      	ldr	r3, [pc, #624]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cca:	6011      	str	r1, [r2, #0]
 8001ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	fa92 f1a2 	rbit	r1, r2
 8001cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cde:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ce2:	6011      	str	r1, [r2, #0]
  return result;
 8001ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	fab2 f282 	clz	r2, r2
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f002 021f 	and.w	r2, r2, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d182      	bne.n	8001c10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	497f      	ldr	r1, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	2301      	movs	r3, #1
 8001d76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe48 	bl	8000a0c <HAL_GetTick>
 8001d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fe43 	bl	8000a0c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e144      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe2c>
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e027      	b.n	8001e30 <HAL_RCC_OscConfig+0xe7c>
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e34:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e3c:	6011      	str	r1, [r2, #0]
 8001e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e42:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	fa92 f1a2 	rbit	r1, r2
 8001e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e54:	6011      	str	r1, [r2, #0]
  return result;
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d082      	beq.n	8001d82 <HAL_RCC_OscConfig+0xdce>
 8001e7c:	e0cf      	b.n	800201e <HAL_RCC_OscConfig+0x106a>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ea2:	601a      	str	r2, [r3, #0]
  return result;
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fda2 	bl	8000a0c <HAL_GetTick>
 8001ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fd9d 	bl	8000a0c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e09e      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f06:	601a      	str	r2, [r3, #0]
  return result;
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_RCC_OscConfig+0xf7c>
 8001f26:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <HAL_RCC_OscConfig+0xf78>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e029      	b.n	8001f80 <HAL_RCC_OscConfig+0xfcc>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x1078>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f84:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f92:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	fa92 f1a2 	rbit	r1, r2
 8001f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fa4:	6011      	str	r1, [r2, #0]
  return result;
 8001fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001faa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f042 0220 	orr.w	r2, r2, #32
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d180      	bne.n	8001ece <HAL_RCC_OscConfig+0xf1a>
 8001fcc:	e027      	b.n	800201e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01e      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x1078>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d10b      	bne.n	800201a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002002:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09e      	sub	sp, #120	; 0x78
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e162      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b90      	ldr	r3, [pc, #576]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	498b      	ldr	r1, [pc, #556]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b89      	ldr	r3, [pc, #548]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e14a      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b82      	ldr	r3, [pc, #520]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	497f      	ldr	r1, [pc, #508]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80dc 	beq.w	800225c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d13c      	bne.n	8002126 <HAL_RCC_ClockConfig+0xf6>
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xa6>
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e00f      	b.n	80020f6 <HAL_RCC_ClockConfig+0xc6>
 80020d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
 80020e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e8:	663b      	str	r3, [r7, #96]	; 0x60
 80020ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80020fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fe:	fa92 f2a2 	rbit	r2, r2
 8002102:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f042 0220 	orr.w	r2, r2, #32
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f002 021f 	and.w	r2, r2, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d17b      	bne.n	800221a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0f3      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d13c      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x178>
 800212e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800213c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_ClockConfig+0x128>
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e00f      	b.n	8002178 <HAL_RCC_ClockConfig+0x148>
 8002158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
 8002166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
 800216c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217c:	63ba      	str	r2, [r7, #56]	; 0x38
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	fa92 f2a2 	rbit	r2, r2
 8002184:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f042 0220 	orr.w	r2, r2, #32
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f002 021f 	and.w	r2, r2, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d13a      	bne.n	800221a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b2      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
 80021a8:	2302      	movs	r3, #2
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x1a0>
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_ClockConfig+0x1bc>
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2202      	movs	r2, #2
 80021ee:	61ba      	str	r2, [r7, #24]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	fa92 f2a2 	rbit	r2, r2
 80021f6:	617a      	str	r2, [r7, #20]
  return result;
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e079      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	491a      	ldr	r1, [pc, #104]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe fbee 	bl	8000a0c <HAL_GetTick>
 8002230:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fbea 	bl	8000a0c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e061      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_ClockConfig+0x260>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d214      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_ClockConfig+0x25c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e040      	b.n	800230e <HAL_RCC_ClockConfig+0x2de>
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_ClockConfig+0x2e8>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	491a      	ldr	r1, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x2e8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_RCC_ClockConfig+0x2e8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4912      	ldr	r1, [pc, #72]	; (8002318 <HAL_RCC_ClockConfig+0x2e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022d2:	f000 f829 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022d6:	4601      	mov	r1, r0
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_ClockConfig+0x2e8>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e0:	22f0      	movs	r2, #240	; 0xf0
 80022e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	fa92 f2a2 	rbit	r2, r2
 80022ea:	60fa      	str	r2, [r7, #12]
  return result;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	40d3      	lsrs	r3, r2
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	fa21 f303 	lsr.w	r3, r1, r3
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x2f0>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x2f4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fb3c 	bl	8000984 <HAL_InitTick>
  
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3778      	adds	r7, #120	; 0x78
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	080045fc 	.word	0x080045fc
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b08b      	sub	sp, #44	; 0x2c
 800232c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e03c      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e03c      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002364:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002368:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	fa92 f2a2 	rbit	r2, r2
 8002370:	607a      	str	r2, [r7, #4]
  return result;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	40d3      	lsrs	r3, r2
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	220f      	movs	r2, #15
 800238c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	fa92 f2a2 	rbit	r2, r2
 8002394:	60fa      	str	r2, [r7, #12]
  return result;
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	fab2 f282 	clz	r2, r2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	40d3      	lsrs	r3, r2
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e004      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	623b      	str	r3, [r7, #32]
      break;
 80023d0:	e002      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023d4:	623b      	str	r3, [r7, #32]
      break;
 80023d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	372c      	adds	r7, #44	; 0x2c
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	007a1200 	.word	0x007a1200
 80023f0:	08004614 	.word	0x08004614
 80023f4:	08004624 	.word	0x08004624
 80023f8:	003d0900 	.word	0x003d0900

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800241a:	f7ff ffef 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800241e:	4601      	mov	r1, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002428:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800242c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	fa92 f2a2 	rbit	r2, r2
 8002434:	603a      	str	r2, [r7, #0]
  return result;
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	fab2 f282 	clz	r2, r2
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	40d3      	lsrs	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	0800460c 	.word	0x0800460c

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800245e:	f7ff ffcd 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800246c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002470:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	603a      	str	r2, [r7, #0]
  return result;
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	0800460c 	.word	0x0800460c

0800249c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b092      	sub	sp, #72	; 0x48
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80d4 	beq.w	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c0:	4b4e      	ldr	r3, [pc, #312]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10e      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b48      	ldr	r3, [pc, #288]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b45      	ldr	r3, [pc, #276]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a41      	ldr	r2, [pc, #260]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7fe fa83 	bl	8000a0c <HAL_GetTick>
 8002506:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe fa7f 	bl	8000a0c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e169      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002530:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8084 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002544:	429a      	cmp	r2, r3
 8002546:	d07c      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	461a      	mov	r2, r3
 8002572:	2301      	movs	r3, #1
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	461a      	mov	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800259a:	4a18      	ldr	r2, [pc, #96]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d04b      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fa2f 	bl	8000a0c <HAL_GetTick>
 80025ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fa2b 	bl	8000a0c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e113      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	2302      	movs	r3, #2
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]
  return result;
 80025e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d108      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025f6:	4b01      	ldr	r3, [pc, #4]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	e00d      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025fc:	40021000 	.word	0x40021000
 8002600:	40007000 	.word	0x40007000
 8002604:	10908100 	.word	0x10908100
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2202      	movs	r2, #2
 800261a:	613a      	str	r2, [r7, #16]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	60fa      	str	r2, [r7, #12]
  return result;
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0b7      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	496a      	ldr	r1, [pc, #424]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002654:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002674:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f023 0203 	bic.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	495d      	ldr	r1, [pc, #372]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4956      	ldr	r1, [pc, #344]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026b0:	4b51      	ldr	r3, [pc, #324]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	494e      	ldr	r1, [pc, #312]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f023 0210 	bic.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4947      	ldr	r1, [pc, #284]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	493f      	ldr	r1, [pc, #252]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f023 0220 	bic.w	r2, r3, #32
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4938      	ldr	r1, [pc, #224]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002728:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	4930      	ldr	r1, [pc, #192]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4929      	ldr	r1, [pc, #164]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	4921      	ldr	r1, [pc, #132]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	4912      	ldr	r1, [pc, #72]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	490b      	ldr	r1, [pc, #44]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3748      	adds	r7, #72	; 0x48
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e073      	b.n	80028fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7f5b      	ldrb	r3, [r3, #29]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd ff64 	bl	80006f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b10      	cmp	r3, #16
 800283a:	d055      	beq.n	80028e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	22ca      	movs	r2, #202	; 0xca
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2253      	movs	r2, #83	; 0x53
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f87f 	bl	8002950 <RTC_EnterInitMode>
 8002852:	4603      	mov	r3, r0
 8002854:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12c      	bne.n	80028b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800286a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6919      	ldr	r1, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	041a      	lsls	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f886 	bl	80029be <RTC_ExitInitMode>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	22ff      	movs	r2, #255	; 0xff
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
 80028e6:	e001      	b.n	80028ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_RTC_WaitForSynchro+0x48>)
 8002916:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002918:	f7fe f878 	bl	8000a0c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800291e:	e009      	b.n	8002934 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002920:	f7fe f874 	bl	8000a0c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292e:	d901      	bls.n	8002934 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e007      	b.n	8002944 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ee      	beq.n	8002920 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0001ff5f 	.word	0x0001ff5f

08002950 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d122      	bne.n	80029b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800297c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800297e:	f7fe f845 	bl	8000a0c <HAL_GetTick>
 8002982:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002984:	e00c      	b.n	80029a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002986:	f7fe f841 	bl	8000a0c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002994:	d904      	bls.n	80029a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <RTC_EnterInitMode+0x64>
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d1e8      	bne.n	8002986 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff8b 	bl	8002904 <HAL_RTC_WaitForSynchro>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2204      	movs	r2, #4
 80029f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	7f1b      	ldrb	r3, [r3, #28]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e09d      	b.n	8002b72 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	22ca      	movs	r2, #202	; 0xca
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2253      	movs	r2, #83	; 0x53
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2203      	movs	r2, #3
 8002a78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e076      	b.n	8002b72 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e6      	bne.n	8002a60 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa0:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a32      	ldr	r2, [pc, #200]	; (8002b84 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e041      	b.n	8002b72 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0e6      	beq.n	8002aca <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0207 	bic.w	r2, r2, #7
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3a:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	10624dd3 	.word	0x10624dd3
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7f1b      	ldrb	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e047      	b.n	8002c34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	22ca      	movs	r2, #202	; 0xca
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2253      	movs	r2, #83	; 0x53
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bde:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be0:	f7fd ff14 	bl	8000a0c <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002be6:	e013      	b.n	8002c10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002be8:	f7fd ff10 	bl	8000a0c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf6:	d90b      	bls.n	8002c10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e011      	b.n	8002c34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0e4      	beq.n	8002be8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	22ff      	movs	r2, #255	; 0xff
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4a:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c6a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f809 	bl	8002c84 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	775a      	strb	r2, [r3, #29]
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e049      	b.n	8002d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fd42 	bl	8000748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 f962 	bl	8002fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e042      	b.n	8002de6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_TIM_Base_Start+0xac>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_TIM_Base_Start+0xb0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_TIM_Base_Start+0xb4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_TIM_Base_Start+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_TIM_Base_Start+0xbc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d115      	bne.n	8002dd0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_TIM_Base_Start+0xc0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d015      	beq.n	8002de2 <HAL_TIM_Base_Start+0x9a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d011      	beq.n	8002de2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e008      	b.n	8002de2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40013400 	.word	0x40013400
 8002e04:	40014000 	.word	0x40014000
 8002e08:	00010007 	.word	0x00010007

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b6      	b.n	8002f96 <HAL_TIM_ConfigClockSource+0x18a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e64:	d03e      	beq.n	8002ee4 <HAL_TIM_ConfigClockSource+0xd8>
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6a:	f200 8087 	bhi.w	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	f000 8086 	beq.w	8002f82 <HAL_TIM_ConfigClockSource+0x176>
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d87f      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d01a      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0xaa>
 8002e80:	2b70      	cmp	r3, #112	; 0x70
 8002e82:	d87b      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d050      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x11e>
 8002e88:	2b60      	cmp	r3, #96	; 0x60
 8002e8a:	d877      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d03c      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xfe>
 8002e90:	2b50      	cmp	r3, #80	; 0x50
 8002e92:	d873      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d058      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x13e>
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d86f      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d064      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x15e>
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	d86b      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d060      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x15e>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d867      	bhi.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x15e>
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d05a      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x15e>
 8002eb4:	e062      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f000 f975 	bl	80031b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]
      break;
 8002ee2:	e04f      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f000 f95e 	bl	80031b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	609a      	str	r2, [r3, #8]
      break;
 8002f08:	e03c      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 f8d2 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2150      	movs	r1, #80	; 0x50
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f92b 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002f28:	e02c      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f8f1 	bl	800311e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2160      	movs	r1, #96	; 0x60
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f91b 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002f48:	e01c      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8b2 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f90b 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002f68:	e00c      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f000 f902 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 8002f7a:	e003      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e000      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <TIM_Base_SetConfig+0x104>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00f      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a39      	ldr	r2, [pc, #228]	; (80030a8 <TIM_Base_SetConfig+0x108>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a38      	ldr	r2, [pc, #224]	; (80030ac <TIM_Base_SetConfig+0x10c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a37      	ldr	r2, [pc, #220]	; (80030b0 <TIM_Base_SetConfig+0x110>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <TIM_Base_SetConfig+0x104>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01b      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d017      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM_Base_SetConfig+0x108>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00f      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0x110>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00b      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0x114>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <TIM_Base_SetConfig+0x118>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a25      	ldr	r2, [pc, #148]	; (80030bc <TIM_Base_SetConfig+0x11c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d108      	bne.n	800303c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <TIM_Base_SetConfig+0x104>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <TIM_Base_SetConfig+0x110>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <TIM_Base_SetConfig+0x118>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <TIM_Base_SetConfig+0x11c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800

080030c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0210 	bic.w	r2, r3, #16
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	f043 0307 	orr.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e063      	b.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003246:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d013      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40013400 	.word	0x40013400
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40014000 	.word	0x40014000

080032f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e040      	b.n	8003388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd fa34 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8b6 	bl	80034a4 <UART_SetConfig>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e022      	b.n	8003388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa7e 	bl	800384c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb05 	bl	8003990 <UART_CheckIdleState>
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d178      	bne.n	800349a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit+0x24>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e071      	b.n	800349c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c6:	f7fd fb21 	bl	8000a0c <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d108      	bne.n	80033f8 <HAL_UART_Transmit+0x68>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003400:	e030      	b.n	8003464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fb67 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e03c      	b.n	800349c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	b292      	uxth	r2, r2
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	3302      	adds	r3, #2
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e008      	b.n	8003452 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b292      	uxth	r2, r2
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3301      	adds	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1c8      	bne.n	8003402 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fb30 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e005      	b.n	800349c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034d2:	f023 030c 	bic.w	r3, r3, #12
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	6979      	ldr	r1, [r7, #20]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4aa7      	ldr	r2, [pc, #668]	; (80037bc <UART_SetConfig+0x318>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d120      	bne.n	8003566 <UART_SetConfig+0xc2>
 8003524:	4ba6      	ldr	r3, [pc, #664]	; (80037c0 <UART_SetConfig+0x31c>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b03      	cmp	r3, #3
 800352e:	d817      	bhi.n	8003560 <UART_SetConfig+0xbc>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0x94>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	08003549 	.word	0x08003549
 800353c:	08003555 	.word	0x08003555
 8003540:	0800355b 	.word	0x0800355b
 8003544:	0800354f 	.word	0x0800354f
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e0b5      	b.n	80036ba <UART_SetConfig+0x216>
 800354e:	2302      	movs	r3, #2
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e0b2      	b.n	80036ba <UART_SetConfig+0x216>
 8003554:	2304      	movs	r3, #4
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e0af      	b.n	80036ba <UART_SetConfig+0x216>
 800355a:	2308      	movs	r3, #8
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e0ac      	b.n	80036ba <UART_SetConfig+0x216>
 8003560:	2310      	movs	r3, #16
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e0a9      	b.n	80036ba <UART_SetConfig+0x216>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a96      	ldr	r2, [pc, #600]	; (80037c4 <UART_SetConfig+0x320>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d124      	bne.n	80035ba <UART_SetConfig+0x116>
 8003570:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <UART_SetConfig+0x31c>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800357c:	d011      	beq.n	80035a2 <UART_SetConfig+0xfe>
 800357e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003582:	d817      	bhi.n	80035b4 <UART_SetConfig+0x110>
 8003584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003588:	d011      	beq.n	80035ae <UART_SetConfig+0x10a>
 800358a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358e:	d811      	bhi.n	80035b4 <UART_SetConfig+0x110>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <UART_SetConfig+0xf8>
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d006      	beq.n	80035a8 <UART_SetConfig+0x104>
 800359a:	e00b      	b.n	80035b4 <UART_SetConfig+0x110>
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e08b      	b.n	80036ba <UART_SetConfig+0x216>
 80035a2:	2302      	movs	r3, #2
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e088      	b.n	80036ba <UART_SetConfig+0x216>
 80035a8:	2304      	movs	r3, #4
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e085      	b.n	80036ba <UART_SetConfig+0x216>
 80035ae:	2308      	movs	r3, #8
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e082      	b.n	80036ba <UART_SetConfig+0x216>
 80035b4:	2310      	movs	r3, #16
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e07f      	b.n	80036ba <UART_SetConfig+0x216>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a82      	ldr	r2, [pc, #520]	; (80037c8 <UART_SetConfig+0x324>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d124      	bne.n	800360e <UART_SetConfig+0x16a>
 80035c4:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <UART_SetConfig+0x31c>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035d0:	d011      	beq.n	80035f6 <UART_SetConfig+0x152>
 80035d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035d6:	d817      	bhi.n	8003608 <UART_SetConfig+0x164>
 80035d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035dc:	d011      	beq.n	8003602 <UART_SetConfig+0x15e>
 80035de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035e2:	d811      	bhi.n	8003608 <UART_SetConfig+0x164>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <UART_SetConfig+0x14c>
 80035e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ec:	d006      	beq.n	80035fc <UART_SetConfig+0x158>
 80035ee:	e00b      	b.n	8003608 <UART_SetConfig+0x164>
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e061      	b.n	80036ba <UART_SetConfig+0x216>
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e05e      	b.n	80036ba <UART_SetConfig+0x216>
 80035fc:	2304      	movs	r3, #4
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e05b      	b.n	80036ba <UART_SetConfig+0x216>
 8003602:	2308      	movs	r3, #8
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e058      	b.n	80036ba <UART_SetConfig+0x216>
 8003608:	2310      	movs	r3, #16
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e055      	b.n	80036ba <UART_SetConfig+0x216>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <UART_SetConfig+0x328>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d124      	bne.n	8003662 <UART_SetConfig+0x1be>
 8003618:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <UART_SetConfig+0x31c>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003624:	d011      	beq.n	800364a <UART_SetConfig+0x1a6>
 8003626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800362a:	d817      	bhi.n	800365c <UART_SetConfig+0x1b8>
 800362c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003630:	d011      	beq.n	8003656 <UART_SetConfig+0x1b2>
 8003632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003636:	d811      	bhi.n	800365c <UART_SetConfig+0x1b8>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <UART_SetConfig+0x1a0>
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003640:	d006      	beq.n	8003650 <UART_SetConfig+0x1ac>
 8003642:	e00b      	b.n	800365c <UART_SetConfig+0x1b8>
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e037      	b.n	80036ba <UART_SetConfig+0x216>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e034      	b.n	80036ba <UART_SetConfig+0x216>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e031      	b.n	80036ba <UART_SetConfig+0x216>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e02e      	b.n	80036ba <UART_SetConfig+0x216>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e02b      	b.n	80036ba <UART_SetConfig+0x216>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5a      	ldr	r2, [pc, #360]	; (80037d0 <UART_SetConfig+0x32c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d124      	bne.n	80036b6 <UART_SetConfig+0x212>
 800366c:	4b54      	ldr	r3, [pc, #336]	; (80037c0 <UART_SetConfig+0x31c>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003678:	d011      	beq.n	800369e <UART_SetConfig+0x1fa>
 800367a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800367e:	d817      	bhi.n	80036b0 <UART_SetConfig+0x20c>
 8003680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003684:	d011      	beq.n	80036aa <UART_SetConfig+0x206>
 8003686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368a:	d811      	bhi.n	80036b0 <UART_SetConfig+0x20c>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <UART_SetConfig+0x1f4>
 8003690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003694:	d006      	beq.n	80036a4 <UART_SetConfig+0x200>
 8003696:	e00b      	b.n	80036b0 <UART_SetConfig+0x20c>
 8003698:	2300      	movs	r3, #0
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e00d      	b.n	80036ba <UART_SetConfig+0x216>
 800369e:	2302      	movs	r3, #2
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e00a      	b.n	80036ba <UART_SetConfig+0x216>
 80036a4:	2304      	movs	r3, #4
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e007      	b.n	80036ba <UART_SetConfig+0x216>
 80036aa:	2308      	movs	r3, #8
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e004      	b.n	80036ba <UART_SetConfig+0x216>
 80036b0:	2310      	movs	r3, #16
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e001      	b.n	80036ba <UART_SetConfig+0x216>
 80036b6:	2310      	movs	r3, #16
 80036b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c2:	d15b      	bne.n	800377c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d827      	bhi.n	800371a <UART_SetConfig+0x276>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0x22c>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fe8e 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61b8      	str	r0, [r7, #24]
        break;
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe feac 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8003700:	61b8      	str	r0, [r7, #24]
        break;
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <UART_SetConfig+0x330>)
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fe0d 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 800370e:	61b8      	str	r0, [r7, #24]
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	77bb      	strb	r3, [r7, #30]
        break;
 8003722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8082 	beq.w	8003830 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	005a      	lsls	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	441a      	add	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d916      	bls.n	8003776 <UART_SetConfig+0x2d2>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d212      	bcs.n	8003776 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f023 030f 	bic.w	r3, r3, #15
 8003758:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	b29b      	uxth	r3, r3
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	b29a      	uxth	r2, r3
 8003766:	89fb      	ldrh	r3, [r7, #14]
 8003768:	4313      	orrs	r3, r2
 800376a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	89fa      	ldrh	r2, [r7, #14]
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	e05c      	b.n	8003830 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	77bb      	strb	r3, [r7, #30]
 800377a:	e059      	b.n	8003830 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d835      	bhi.n	80037ee <UART_SetConfig+0x34a>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x2e4>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037d9 	.word	0x080037d9
 8003794:	080037ef 	.word	0x080037ef
 8003798:	080037df 	.word	0x080037df
 800379c:	080037ef 	.word	0x080037ef
 80037a0:	080037ef 	.word	0x080037ef
 80037a4:	080037ef 	.word	0x080037ef
 80037a8:	080037e7 	.word	0x080037e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe fe32 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e021      	b.n	80037f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe fe50 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 80037b8:	61b8      	str	r0, [r7, #24]
        break;
 80037ba:	e01d      	b.n	80037f8 <UART_SetConfig+0x354>
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40004400 	.word	0x40004400
 80037c8:	40004800 	.word	0x40004800
 80037cc:	40004c00 	.word	0x40004c00
 80037d0:	40005000 	.word	0x40005000
 80037d4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <UART_SetConfig+0x3a4>)
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e00c      	b.n	80037f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037de:	f7fe fda3 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80037e2:	61b8      	str	r0, [r7, #24]
        break;
 80037e4:	e008      	b.n	80037f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ea:	61bb      	str	r3, [r7, #24]
        break;
 80037ec:	e004      	b.n	80037f8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	77bb      	strb	r3, [r7, #30]
        break;
 80037f6:	bf00      	nop
    }

    if (pclk != 0U)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	085a      	lsrs	r2, r3, #1
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d909      	bls.n	800382c <UART_SetConfig+0x388>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d205      	bcs.n	800382c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	e001      	b.n	8003830 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800383c:	7fbb      	ldrb	r3, [r7, #30]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	007a1200 	.word	0x007a1200

0800384c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d10a      	bne.n	8003962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b098      	sub	sp, #96	; 0x60
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a0:	f7fd f834 	bl	8000a0c <HAL_GetTick>
 80039a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d12e      	bne.n	8003a12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f88c 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ec:	647b      	str	r3, [r7, #68]	; 0x44
 80039ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e6      	bne.n	80039ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e062      	b.n	8003ad8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d149      	bne.n	8003ab4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f856 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03c      	beq.n	8003ab4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	623b      	str	r3, [r7, #32]
   return(result);
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e6      	bne.n	8003a3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3308      	adds	r3, #8
 8003a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a8c:	61fa      	str	r2, [r7, #28]
 8003a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e011      	b.n	8003ad8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3758      	adds	r7, #88	; 0x58
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e049      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d045      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fc ff87 	bl	8000a0c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e048      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d031      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d110      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f838 	bl	8003bae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2208      	movs	r2, #8
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e029      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b60:	d111      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f81e 	bl	8003bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0a6      	beq.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b095      	sub	sp, #84	; 0x54
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d118      	bne.n	8003c56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f023 0310 	bic.w	r3, r3, #16
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e6      	bne.n	8003c24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c6a:	bf00      	nop
 8003c6c:	3754      	adds	r7, #84	; 0x54
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <__errno>:
 8003c78:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <__errno+0x8>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <__libc_init_array>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	4d0d      	ldr	r5, [pc, #52]	; (8003cbc <__libc_init_array+0x38>)
 8003c88:	4c0d      	ldr	r4, [pc, #52]	; (8003cc0 <__libc_init_array+0x3c>)
 8003c8a:	1b64      	subs	r4, r4, r5
 8003c8c:	10a4      	asrs	r4, r4, #2
 8003c8e:	2600      	movs	r6, #0
 8003c90:	42a6      	cmp	r6, r4
 8003c92:	d109      	bne.n	8003ca8 <__libc_init_array+0x24>
 8003c94:	4d0b      	ldr	r5, [pc, #44]	; (8003cc4 <__libc_init_array+0x40>)
 8003c96:	4c0c      	ldr	r4, [pc, #48]	; (8003cc8 <__libc_init_array+0x44>)
 8003c98:	f000 fc8e 	bl	80045b8 <_init>
 8003c9c:	1b64      	subs	r4, r4, r5
 8003c9e:	10a4      	asrs	r4, r4, #2
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	42a6      	cmp	r6, r4
 8003ca4:	d105      	bne.n	8003cb2 <__libc_init_array+0x2e>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cac:	4798      	blx	r3
 8003cae:	3601      	adds	r6, #1
 8003cb0:	e7ee      	b.n	8003c90 <__libc_init_array+0xc>
 8003cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb6:	4798      	blx	r3
 8003cb8:	3601      	adds	r6, #1
 8003cba:	e7f2      	b.n	8003ca2 <__libc_init_array+0x1e>
 8003cbc:	08004668 	.word	0x08004668
 8003cc0:	08004668 	.word	0x08004668
 8003cc4:	08004668 	.word	0x08004668
 8003cc8:	0800466c 	.word	0x0800466c

08003ccc <memset>:
 8003ccc:	4402      	add	r2, r0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <memset+0xa>
 8003cd4:	4770      	bx	lr
 8003cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cda:	e7f9      	b.n	8003cd0 <memset+0x4>

08003cdc <siprintf>:
 8003cdc:	b40e      	push	{r1, r2, r3}
 8003cde:	b500      	push	{lr}
 8003ce0:	b09c      	sub	sp, #112	; 0x70
 8003ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ce4:	9002      	str	r0, [sp, #8]
 8003ce6:	9006      	str	r0, [sp, #24]
 8003ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cec:	4809      	ldr	r0, [pc, #36]	; (8003d14 <siprintf+0x38>)
 8003cee:	9107      	str	r1, [sp, #28]
 8003cf0:	9104      	str	r1, [sp, #16]
 8003cf2:	4909      	ldr	r1, [pc, #36]	; (8003d18 <siprintf+0x3c>)
 8003cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf8:	9105      	str	r1, [sp, #20]
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	a902      	add	r1, sp, #8
 8003d00:	f000 f868 	bl	8003dd4 <_svfiprintf_r>
 8003d04:	9b02      	ldr	r3, [sp, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	b01c      	add	sp, #112	; 0x70
 8003d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d10:	b003      	add	sp, #12
 8003d12:	4770      	bx	lr
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	ffff0208 	.word	0xffff0208

08003d1c <__ssputs_r>:
 8003d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	688e      	ldr	r6, [r1, #8]
 8003d22:	429e      	cmp	r6, r3
 8003d24:	4682      	mov	sl, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4690      	mov	r8, r2
 8003d2a:	461f      	mov	r7, r3
 8003d2c:	d838      	bhi.n	8003da0 <__ssputs_r+0x84>
 8003d2e:	898a      	ldrh	r2, [r1, #12]
 8003d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d34:	d032      	beq.n	8003d9c <__ssputs_r+0x80>
 8003d36:	6825      	ldr	r5, [r4, #0]
 8003d38:	6909      	ldr	r1, [r1, #16]
 8003d3a:	eba5 0901 	sub.w	r9, r5, r1
 8003d3e:	6965      	ldr	r5, [r4, #20]
 8003d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d48:	3301      	adds	r3, #1
 8003d4a:	444b      	add	r3, r9
 8003d4c:	106d      	asrs	r5, r5, #1
 8003d4e:	429d      	cmp	r5, r3
 8003d50:	bf38      	it	cc
 8003d52:	461d      	movcc	r5, r3
 8003d54:	0553      	lsls	r3, r2, #21
 8003d56:	d531      	bpl.n	8003dbc <__ssputs_r+0xa0>
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f000 fb63 	bl	8004424 <_malloc_r>
 8003d5e:	4606      	mov	r6, r0
 8003d60:	b950      	cbnz	r0, 8003d78 <__ssputs_r+0x5c>
 8003d62:	230c      	movs	r3, #12
 8003d64:	f8ca 3000 	str.w	r3, [sl]
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6e:	81a3      	strh	r3, [r4, #12]
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d78:	6921      	ldr	r1, [r4, #16]
 8003d7a:	464a      	mov	r2, r9
 8003d7c:	f000 fabe 	bl	80042fc <memcpy>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	6126      	str	r6, [r4, #16]
 8003d8e:	6165      	str	r5, [r4, #20]
 8003d90:	444e      	add	r6, r9
 8003d92:	eba5 0509 	sub.w	r5, r5, r9
 8003d96:	6026      	str	r6, [r4, #0]
 8003d98:	60a5      	str	r5, [r4, #8]
 8003d9a:	463e      	mov	r6, r7
 8003d9c:	42be      	cmp	r6, r7
 8003d9e:	d900      	bls.n	8003da2 <__ssputs_r+0x86>
 8003da0:	463e      	mov	r6, r7
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	4632      	mov	r2, r6
 8003da6:	4641      	mov	r1, r8
 8003da8:	f000 fab6 	bl	8004318 <memmove>
 8003dac:	68a3      	ldr	r3, [r4, #8]
 8003dae:	1b9b      	subs	r3, r3, r6
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	4433      	add	r3, r6
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	2000      	movs	r0, #0
 8003dba:	e7db      	b.n	8003d74 <__ssputs_r+0x58>
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	f000 fba5 	bl	800450c <_realloc_r>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d1e1      	bne.n	8003d8c <__ssputs_r+0x70>
 8003dc8:	6921      	ldr	r1, [r4, #16]
 8003dca:	4650      	mov	r0, sl
 8003dcc:	f000 fabe 	bl	800434c <_free_r>
 8003dd0:	e7c7      	b.n	8003d62 <__ssputs_r+0x46>
	...

08003dd4 <_svfiprintf_r>:
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	4698      	mov	r8, r3
 8003dda:	898b      	ldrh	r3, [r1, #12]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	b09d      	sub	sp, #116	; 0x74
 8003de0:	4607      	mov	r7, r0
 8003de2:	460d      	mov	r5, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	d50e      	bpl.n	8003e06 <_svfiprintf_r+0x32>
 8003de8:	690b      	ldr	r3, [r1, #16]
 8003dea:	b963      	cbnz	r3, 8003e06 <_svfiprintf_r+0x32>
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	f000 fb19 	bl	8004424 <_malloc_r>
 8003df2:	6028      	str	r0, [r5, #0]
 8003df4:	6128      	str	r0, [r5, #16]
 8003df6:	b920      	cbnz	r0, 8003e02 <_svfiprintf_r+0x2e>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	e0d1      	b.n	8003fa6 <_svfiprintf_r+0x1d2>
 8003e02:	2340      	movs	r3, #64	; 0x40
 8003e04:	616b      	str	r3, [r5, #20]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e14:	2330      	movs	r3, #48	; 0x30
 8003e16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fc0 <_svfiprintf_r+0x1ec>
 8003e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e1e:	f04f 0901 	mov.w	r9, #1
 8003e22:	4623      	mov	r3, r4
 8003e24:	469a      	mov	sl, r3
 8003e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e2a:	b10a      	cbz	r2, 8003e30 <_svfiprintf_r+0x5c>
 8003e2c:	2a25      	cmp	r2, #37	; 0x25
 8003e2e:	d1f9      	bne.n	8003e24 <_svfiprintf_r+0x50>
 8003e30:	ebba 0b04 	subs.w	fp, sl, r4
 8003e34:	d00b      	beq.n	8003e4e <_svfiprintf_r+0x7a>
 8003e36:	465b      	mov	r3, fp
 8003e38:	4622      	mov	r2, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff ff6d 	bl	8003d1c <__ssputs_r>
 8003e42:	3001      	adds	r0, #1
 8003e44:	f000 80aa 	beq.w	8003f9c <_svfiprintf_r+0x1c8>
 8003e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e4a:	445a      	add	r2, fp
 8003e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a2 	beq.w	8003f9c <_svfiprintf_r+0x1c8>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e62:	f10a 0a01 	add.w	sl, sl, #1
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	9307      	str	r3, [sp, #28]
 8003e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e70:	4654      	mov	r4, sl
 8003e72:	2205      	movs	r2, #5
 8003e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e78:	4851      	ldr	r0, [pc, #324]	; (8003fc0 <_svfiprintf_r+0x1ec>)
 8003e7a:	f7fc f9a9 	bl	80001d0 <memchr>
 8003e7e:	9a04      	ldr	r2, [sp, #16]
 8003e80:	b9d8      	cbnz	r0, 8003eba <_svfiprintf_r+0xe6>
 8003e82:	06d0      	lsls	r0, r2, #27
 8003e84:	bf44      	itt	mi
 8003e86:	2320      	movmi	r3, #32
 8003e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e8c:	0711      	lsls	r1, r2, #28
 8003e8e:	bf44      	itt	mi
 8003e90:	232b      	movmi	r3, #43	; 0x2b
 8003e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e96:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9c:	d015      	beq.n	8003eca <_svfiprintf_r+0xf6>
 8003e9e:	9a07      	ldr	r2, [sp, #28]
 8003ea0:	4654      	mov	r4, sl
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f04f 0c0a 	mov.w	ip, #10
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eae:	3b30      	subs	r3, #48	; 0x30
 8003eb0:	2b09      	cmp	r3, #9
 8003eb2:	d94e      	bls.n	8003f52 <_svfiprintf_r+0x17e>
 8003eb4:	b1b0      	cbz	r0, 8003ee4 <_svfiprintf_r+0x110>
 8003eb6:	9207      	str	r2, [sp, #28]
 8003eb8:	e014      	b.n	8003ee4 <_svfiprintf_r+0x110>
 8003eba:	eba0 0308 	sub.w	r3, r0, r8
 8003ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	46a2      	mov	sl, r4
 8003ec8:	e7d2      	b.n	8003e70 <_svfiprintf_r+0x9c>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	9103      	str	r1, [sp, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbb      	ittet	lt
 8003ed6:	425b      	neglt	r3, r3
 8003ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8003edc:	9307      	strge	r3, [sp, #28]
 8003ede:	9307      	strlt	r3, [sp, #28]
 8003ee0:	bfb8      	it	lt
 8003ee2:	9204      	strlt	r2, [sp, #16]
 8003ee4:	7823      	ldrb	r3, [r4, #0]
 8003ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee8:	d10c      	bne.n	8003f04 <_svfiprintf_r+0x130>
 8003eea:	7863      	ldrb	r3, [r4, #1]
 8003eec:	2b2a      	cmp	r3, #42	; 0x2a
 8003eee:	d135      	bne.n	8003f5c <_svfiprintf_r+0x188>
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	1d1a      	adds	r2, r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	9203      	str	r2, [sp, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bfb8      	it	lt
 8003efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f00:	3402      	adds	r4, #2
 8003f02:	9305      	str	r3, [sp, #20]
 8003f04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fd0 <_svfiprintf_r+0x1fc>
 8003f08:	7821      	ldrb	r1, [r4, #0]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	f7fc f95f 	bl	80001d0 <memchr>
 8003f12:	b140      	cbz	r0, 8003f26 <_svfiprintf_r+0x152>
 8003f14:	2340      	movs	r3, #64	; 0x40
 8003f16:	eba0 000a 	sub.w	r0, r0, sl
 8003f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f1e:	9b04      	ldr	r3, [sp, #16]
 8003f20:	4303      	orrs	r3, r0
 8003f22:	3401      	adds	r4, #1
 8003f24:	9304      	str	r3, [sp, #16]
 8003f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2a:	4826      	ldr	r0, [pc, #152]	; (8003fc4 <_svfiprintf_r+0x1f0>)
 8003f2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f30:	2206      	movs	r2, #6
 8003f32:	f7fc f94d 	bl	80001d0 <memchr>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d038      	beq.n	8003fac <_svfiprintf_r+0x1d8>
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <_svfiprintf_r+0x1f4>)
 8003f3c:	bb1b      	cbnz	r3, 8003f86 <_svfiprintf_r+0x1b2>
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	3307      	adds	r3, #7
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	3308      	adds	r3, #8
 8003f48:	9303      	str	r3, [sp, #12]
 8003f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4c:	4433      	add	r3, r6
 8003f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f50:	e767      	b.n	8003e22 <_svfiprintf_r+0x4e>
 8003f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f56:	460c      	mov	r4, r1
 8003f58:	2001      	movs	r0, #1
 8003f5a:	e7a5      	b.n	8003ea8 <_svfiprintf_r+0xd4>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	3401      	adds	r4, #1
 8003f60:	9305      	str	r3, [sp, #20]
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 0c0a 	mov.w	ip, #10
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f6e:	3a30      	subs	r2, #48	; 0x30
 8003f70:	2a09      	cmp	r2, #9
 8003f72:	d903      	bls.n	8003f7c <_svfiprintf_r+0x1a8>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0c5      	beq.n	8003f04 <_svfiprintf_r+0x130>
 8003f78:	9105      	str	r1, [sp, #20]
 8003f7a:	e7c3      	b.n	8003f04 <_svfiprintf_r+0x130>
 8003f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f80:	4604      	mov	r4, r0
 8003f82:	2301      	movs	r3, #1
 8003f84:	e7f0      	b.n	8003f68 <_svfiprintf_r+0x194>
 8003f86:	ab03      	add	r3, sp, #12
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <_svfiprintf_r+0x1f8>)
 8003f8e:	a904      	add	r1, sp, #16
 8003f90:	4638      	mov	r0, r7
 8003f92:	f3af 8000 	nop.w
 8003f96:	1c42      	adds	r2, r0, #1
 8003f98:	4606      	mov	r6, r0
 8003f9a:	d1d6      	bne.n	8003f4a <_svfiprintf_r+0x176>
 8003f9c:	89ab      	ldrh	r3, [r5, #12]
 8003f9e:	065b      	lsls	r3, r3, #25
 8003fa0:	f53f af2c 	bmi.w	8003dfc <_svfiprintf_r+0x28>
 8003fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fa6:	b01d      	add	sp, #116	; 0x74
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	ab03      	add	r3, sp, #12
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <_svfiprintf_r+0x1f8>)
 8003fb4:	a904      	add	r1, sp, #16
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	f000 f87a 	bl	80040b0 <_printf_i>
 8003fbc:	e7eb      	b.n	8003f96 <_svfiprintf_r+0x1c2>
 8003fbe:	bf00      	nop
 8003fc0:	08004634 	.word	0x08004634
 8003fc4:	0800463e 	.word	0x0800463e
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	08003d1d 	.word	0x08003d1d
 8003fd0:	0800463a 	.word	0x0800463a

08003fd4 <_printf_common>:
 8003fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	4616      	mov	r6, r2
 8003fda:	4699      	mov	r9, r3
 8003fdc:	688a      	ldr	r2, [r1, #8]
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfb8      	it	lt
 8003fe8:	4613      	movlt	r3, r2
 8003fea:	6033      	str	r3, [r6, #0]
 8003fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b10a      	cbz	r2, 8003ffa <_printf_common+0x26>
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	6033      	str	r3, [r6, #0]
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	0699      	lsls	r1, r3, #26
 8003ffe:	bf42      	ittt	mi
 8004000:	6833      	ldrmi	r3, [r6, #0]
 8004002:	3302      	addmi	r3, #2
 8004004:	6033      	strmi	r3, [r6, #0]
 8004006:	6825      	ldr	r5, [r4, #0]
 8004008:	f015 0506 	ands.w	r5, r5, #6
 800400c:	d106      	bne.n	800401c <_printf_common+0x48>
 800400e:	f104 0a19 	add.w	sl, r4, #25
 8004012:	68e3      	ldr	r3, [r4, #12]
 8004014:	6832      	ldr	r2, [r6, #0]
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	42ab      	cmp	r3, r5
 800401a:	dc26      	bgt.n	800406a <_printf_common+0x96>
 800401c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004020:	1e13      	subs	r3, r2, #0
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	2301      	movne	r3, #1
 8004028:	0692      	lsls	r2, r2, #26
 800402a:	d42b      	bmi.n	8004084 <_printf_common+0xb0>
 800402c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004030:	4649      	mov	r1, r9
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d01e      	beq.n	8004078 <_printf_common+0xa4>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	68e5      	ldr	r5, [r4, #12]
 800403e:	6832      	ldr	r2, [r6, #0]
 8004040:	f003 0306 	and.w	r3, r3, #6
 8004044:	2b04      	cmp	r3, #4
 8004046:	bf08      	it	eq
 8004048:	1aad      	subeq	r5, r5, r2
 800404a:	68a3      	ldr	r3, [r4, #8]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	bf0c      	ite	eq
 8004050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004054:	2500      	movne	r5, #0
 8004056:	4293      	cmp	r3, r2
 8004058:	bfc4      	itt	gt
 800405a:	1a9b      	subgt	r3, r3, r2
 800405c:	18ed      	addgt	r5, r5, r3
 800405e:	2600      	movs	r6, #0
 8004060:	341a      	adds	r4, #26
 8004062:	42b5      	cmp	r5, r6
 8004064:	d11a      	bne.n	800409c <_printf_common+0xc8>
 8004066:	2000      	movs	r0, #0
 8004068:	e008      	b.n	800407c <_printf_common+0xa8>
 800406a:	2301      	movs	r3, #1
 800406c:	4652      	mov	r2, sl
 800406e:	4649      	mov	r1, r9
 8004070:	4638      	mov	r0, r7
 8004072:	47c0      	blx	r8
 8004074:	3001      	adds	r0, #1
 8004076:	d103      	bne.n	8004080 <_printf_common+0xac>
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	3501      	adds	r5, #1
 8004082:	e7c6      	b.n	8004012 <_printf_common+0x3e>
 8004084:	18e1      	adds	r1, r4, r3
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	2030      	movs	r0, #48	; 0x30
 800408a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800408e:	4422      	add	r2, r4
 8004090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004098:	3302      	adds	r3, #2
 800409a:	e7c7      	b.n	800402c <_printf_common+0x58>
 800409c:	2301      	movs	r3, #1
 800409e:	4622      	mov	r2, r4
 80040a0:	4649      	mov	r1, r9
 80040a2:	4638      	mov	r0, r7
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d0e6      	beq.n	8004078 <_printf_common+0xa4>
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7d9      	b.n	8004062 <_printf_common+0x8e>
	...

080040b0 <_printf_i>:
 80040b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	7e0f      	ldrb	r7, [r1, #24]
 80040b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b8:	2f78      	cmp	r7, #120	; 0x78
 80040ba:	4691      	mov	r9, r2
 80040bc:	4680      	mov	r8, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	469a      	mov	sl, r3
 80040c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040c6:	d807      	bhi.n	80040d8 <_printf_i+0x28>
 80040c8:	2f62      	cmp	r7, #98	; 0x62
 80040ca:	d80a      	bhi.n	80040e2 <_printf_i+0x32>
 80040cc:	2f00      	cmp	r7, #0
 80040ce:	f000 80d8 	beq.w	8004282 <_printf_i+0x1d2>
 80040d2:	2f58      	cmp	r7, #88	; 0x58
 80040d4:	f000 80a3 	beq.w	800421e <_printf_i+0x16e>
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040e0:	e03a      	b.n	8004158 <_printf_i+0xa8>
 80040e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040e6:	2b15      	cmp	r3, #21
 80040e8:	d8f6      	bhi.n	80040d8 <_printf_i+0x28>
 80040ea:	a101      	add	r1, pc, #4	; (adr r1, 80040f0 <_printf_i+0x40>)
 80040ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f0:	08004149 	.word	0x08004149
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	080040d9 	.word	0x080040d9
 80040fc:	080040d9 	.word	0x080040d9
 8004100:	080040d9 	.word	0x080040d9
 8004104:	080040d9 	.word	0x080040d9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040d9 	.word	0x080040d9
 8004110:	080040d9 	.word	0x080040d9
 8004114:	080040d9 	.word	0x080040d9
 8004118:	080040d9 	.word	0x080040d9
 800411c:	08004269 	.word	0x08004269
 8004120:	0800418d 	.word	0x0800418d
 8004124:	0800424b 	.word	0x0800424b
 8004128:	080040d9 	.word	0x080040d9
 800412c:	080040d9 	.word	0x080040d9
 8004130:	0800428b 	.word	0x0800428b
 8004134:	080040d9 	.word	0x080040d9
 8004138:	0800418d 	.word	0x0800418d
 800413c:	080040d9 	.word	0x080040d9
 8004140:	080040d9 	.word	0x080040d9
 8004144:	08004253 	.word	0x08004253
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004158:	2301      	movs	r3, #1
 800415a:	e0a3      	b.n	80042a4 <_printf_i+0x1f4>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	6829      	ldr	r1, [r5, #0]
 8004160:	0606      	lsls	r6, r0, #24
 8004162:	f101 0304 	add.w	r3, r1, #4
 8004166:	d50a      	bpl.n	800417e <_printf_i+0xce>
 8004168:	680e      	ldr	r6, [r1, #0]
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	2e00      	cmp	r6, #0
 800416e:	da03      	bge.n	8004178 <_printf_i+0xc8>
 8004170:	232d      	movs	r3, #45	; 0x2d
 8004172:	4276      	negs	r6, r6
 8004174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004178:	485e      	ldr	r0, [pc, #376]	; (80042f4 <_printf_i+0x244>)
 800417a:	230a      	movs	r3, #10
 800417c:	e019      	b.n	80041b2 <_printf_i+0x102>
 800417e:	680e      	ldr	r6, [r1, #0]
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004186:	bf18      	it	ne
 8004188:	b236      	sxthne	r6, r6
 800418a:	e7ef      	b.n	800416c <_printf_i+0xbc>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	6029      	str	r1, [r5, #0]
 8004194:	0601      	lsls	r1, r0, #24
 8004196:	d501      	bpl.n	800419c <_printf_i+0xec>
 8004198:	681e      	ldr	r6, [r3, #0]
 800419a:	e002      	b.n	80041a2 <_printf_i+0xf2>
 800419c:	0646      	lsls	r6, r0, #25
 800419e:	d5fb      	bpl.n	8004198 <_printf_i+0xe8>
 80041a0:	881e      	ldrh	r6, [r3, #0]
 80041a2:	4854      	ldr	r0, [pc, #336]	; (80042f4 <_printf_i+0x244>)
 80041a4:	2f6f      	cmp	r7, #111	; 0x6f
 80041a6:	bf0c      	ite	eq
 80041a8:	2308      	moveq	r3, #8
 80041aa:	230a      	movne	r3, #10
 80041ac:	2100      	movs	r1, #0
 80041ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b2:	6865      	ldr	r5, [r4, #4]
 80041b4:	60a5      	str	r5, [r4, #8]
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	bfa2      	ittt	ge
 80041ba:	6821      	ldrge	r1, [r4, #0]
 80041bc:	f021 0104 	bicge.w	r1, r1, #4
 80041c0:	6021      	strge	r1, [r4, #0]
 80041c2:	b90e      	cbnz	r6, 80041c8 <_printf_i+0x118>
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	d04d      	beq.n	8004264 <_printf_i+0x1b4>
 80041c8:	4615      	mov	r5, r2
 80041ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ce:	fb03 6711 	mls	r7, r3, r1, r6
 80041d2:	5dc7      	ldrb	r7, [r0, r7]
 80041d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041d8:	4637      	mov	r7, r6
 80041da:	42bb      	cmp	r3, r7
 80041dc:	460e      	mov	r6, r1
 80041de:	d9f4      	bls.n	80041ca <_printf_i+0x11a>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d10b      	bne.n	80041fc <_printf_i+0x14c>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07de      	lsls	r6, r3, #31
 80041e8:	d508      	bpl.n	80041fc <_printf_i+0x14c>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	6861      	ldr	r1, [r4, #4]
 80041ee:	4299      	cmp	r1, r3
 80041f0:	bfde      	ittt	le
 80041f2:	2330      	movle	r3, #48	; 0x30
 80041f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041fc:	1b52      	subs	r2, r2, r5
 80041fe:	6122      	str	r2, [r4, #16]
 8004200:	f8cd a000 	str.w	sl, [sp]
 8004204:	464b      	mov	r3, r9
 8004206:	aa03      	add	r2, sp, #12
 8004208:	4621      	mov	r1, r4
 800420a:	4640      	mov	r0, r8
 800420c:	f7ff fee2 	bl	8003fd4 <_printf_common>
 8004210:	3001      	adds	r0, #1
 8004212:	d14c      	bne.n	80042ae <_printf_i+0x1fe>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	b004      	add	sp, #16
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	4835      	ldr	r0, [pc, #212]	; (80042f4 <_printf_i+0x244>)
 8004220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004224:	6829      	ldr	r1, [r5, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f851 6b04 	ldr.w	r6, [r1], #4
 800422c:	6029      	str	r1, [r5, #0]
 800422e:	061d      	lsls	r5, r3, #24
 8004230:	d514      	bpl.n	800425c <_printf_i+0x1ac>
 8004232:	07df      	lsls	r7, r3, #31
 8004234:	bf44      	itt	mi
 8004236:	f043 0320 	orrmi.w	r3, r3, #32
 800423a:	6023      	strmi	r3, [r4, #0]
 800423c:	b91e      	cbnz	r6, 8004246 <_printf_i+0x196>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	f023 0320 	bic.w	r3, r3, #32
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	2310      	movs	r3, #16
 8004248:	e7b0      	b.n	80041ac <_printf_i+0xfc>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	2378      	movs	r3, #120	; 0x78
 8004254:	4828      	ldr	r0, [pc, #160]	; (80042f8 <_printf_i+0x248>)
 8004256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800425a:	e7e3      	b.n	8004224 <_printf_i+0x174>
 800425c:	0659      	lsls	r1, r3, #25
 800425e:	bf48      	it	mi
 8004260:	b2b6      	uxthmi	r6, r6
 8004262:	e7e6      	b.n	8004232 <_printf_i+0x182>
 8004264:	4615      	mov	r5, r2
 8004266:	e7bb      	b.n	80041e0 <_printf_i+0x130>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	6826      	ldr	r6, [r4, #0]
 800426c:	6961      	ldr	r1, [r4, #20]
 800426e:	1d18      	adds	r0, r3, #4
 8004270:	6028      	str	r0, [r5, #0]
 8004272:	0635      	lsls	r5, r6, #24
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	d501      	bpl.n	800427c <_printf_i+0x1cc>
 8004278:	6019      	str	r1, [r3, #0]
 800427a:	e002      	b.n	8004282 <_printf_i+0x1d2>
 800427c:	0670      	lsls	r0, r6, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0x1c8>
 8004280:	8019      	strh	r1, [r3, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	4615      	mov	r5, r2
 8004288:	e7ba      	b.n	8004200 <_printf_i+0x150>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	602a      	str	r2, [r5, #0]
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	2100      	movs	r1, #0
 8004296:	4628      	mov	r0, r5
 8004298:	f7fb ff9a 	bl	80001d0 <memchr>
 800429c:	b108      	cbz	r0, 80042a2 <_printf_i+0x1f2>
 800429e:	1b40      	subs	r0, r0, r5
 80042a0:	6060      	str	r0, [r4, #4]
 80042a2:	6863      	ldr	r3, [r4, #4]
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	2300      	movs	r3, #0
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	e7a8      	b.n	8004200 <_printf_i+0x150>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4649      	mov	r1, r9
 80042b4:	4640      	mov	r0, r8
 80042b6:	47d0      	blx	sl
 80042b8:	3001      	adds	r0, #1
 80042ba:	d0ab      	beq.n	8004214 <_printf_i+0x164>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	079b      	lsls	r3, r3, #30
 80042c0:	d413      	bmi.n	80042ea <_printf_i+0x23a>
 80042c2:	68e0      	ldr	r0, [r4, #12]
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	4298      	cmp	r0, r3
 80042c8:	bfb8      	it	lt
 80042ca:	4618      	movlt	r0, r3
 80042cc:	e7a4      	b.n	8004218 <_printf_i+0x168>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4632      	mov	r2, r6
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	47d0      	blx	sl
 80042d8:	3001      	adds	r0, #1
 80042da:	d09b      	beq.n	8004214 <_printf_i+0x164>
 80042dc:	3501      	adds	r5, #1
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	9903      	ldr	r1, [sp, #12]
 80042e2:	1a5b      	subs	r3, r3, r1
 80042e4:	42ab      	cmp	r3, r5
 80042e6:	dcf2      	bgt.n	80042ce <_printf_i+0x21e>
 80042e8:	e7eb      	b.n	80042c2 <_printf_i+0x212>
 80042ea:	2500      	movs	r5, #0
 80042ec:	f104 0619 	add.w	r6, r4, #25
 80042f0:	e7f5      	b.n	80042de <_printf_i+0x22e>
 80042f2:	bf00      	nop
 80042f4:	08004645 	.word	0x08004645
 80042f8:	08004656 	.word	0x08004656

080042fc <memcpy>:
 80042fc:	440a      	add	r2, r1
 80042fe:	4291      	cmp	r1, r2
 8004300:	f100 33ff 	add.w	r3, r0, #4294967295
 8004304:	d100      	bne.n	8004308 <memcpy+0xc>
 8004306:	4770      	bx	lr
 8004308:	b510      	push	{r4, lr}
 800430a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800430e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004312:	4291      	cmp	r1, r2
 8004314:	d1f9      	bne.n	800430a <memcpy+0xe>
 8004316:	bd10      	pop	{r4, pc}

08004318 <memmove>:
 8004318:	4288      	cmp	r0, r1
 800431a:	b510      	push	{r4, lr}
 800431c:	eb01 0402 	add.w	r4, r1, r2
 8004320:	d902      	bls.n	8004328 <memmove+0x10>
 8004322:	4284      	cmp	r4, r0
 8004324:	4623      	mov	r3, r4
 8004326:	d807      	bhi.n	8004338 <memmove+0x20>
 8004328:	1e43      	subs	r3, r0, #1
 800432a:	42a1      	cmp	r1, r4
 800432c:	d008      	beq.n	8004340 <memmove+0x28>
 800432e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004336:	e7f8      	b.n	800432a <memmove+0x12>
 8004338:	4402      	add	r2, r0
 800433a:	4601      	mov	r1, r0
 800433c:	428a      	cmp	r2, r1
 800433e:	d100      	bne.n	8004342 <memmove+0x2a>
 8004340:	bd10      	pop	{r4, pc}
 8004342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800434a:	e7f7      	b.n	800433c <memmove+0x24>

0800434c <_free_r>:
 800434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800434e:	2900      	cmp	r1, #0
 8004350:	d044      	beq.n	80043dc <_free_r+0x90>
 8004352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004356:	9001      	str	r0, [sp, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f1a1 0404 	sub.w	r4, r1, #4
 800435e:	bfb8      	it	lt
 8004360:	18e4      	addlt	r4, r4, r3
 8004362:	f000 f913 	bl	800458c <__malloc_lock>
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <_free_r+0x94>)
 8004368:	9801      	ldr	r0, [sp, #4]
 800436a:	6813      	ldr	r3, [r2, #0]
 800436c:	b933      	cbnz	r3, 800437c <_free_r+0x30>
 800436e:	6063      	str	r3, [r4, #4]
 8004370:	6014      	str	r4, [r2, #0]
 8004372:	b003      	add	sp, #12
 8004374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004378:	f000 b90e 	b.w	8004598 <__malloc_unlock>
 800437c:	42a3      	cmp	r3, r4
 800437e:	d908      	bls.n	8004392 <_free_r+0x46>
 8004380:	6825      	ldr	r5, [r4, #0]
 8004382:	1961      	adds	r1, r4, r5
 8004384:	428b      	cmp	r3, r1
 8004386:	bf01      	itttt	eq
 8004388:	6819      	ldreq	r1, [r3, #0]
 800438a:	685b      	ldreq	r3, [r3, #4]
 800438c:	1949      	addeq	r1, r1, r5
 800438e:	6021      	streq	r1, [r4, #0]
 8004390:	e7ed      	b.n	800436e <_free_r+0x22>
 8004392:	461a      	mov	r2, r3
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b10b      	cbz	r3, 800439c <_free_r+0x50>
 8004398:	42a3      	cmp	r3, r4
 800439a:	d9fa      	bls.n	8004392 <_free_r+0x46>
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	1855      	adds	r5, r2, r1
 80043a0:	42a5      	cmp	r5, r4
 80043a2:	d10b      	bne.n	80043bc <_free_r+0x70>
 80043a4:	6824      	ldr	r4, [r4, #0]
 80043a6:	4421      	add	r1, r4
 80043a8:	1854      	adds	r4, r2, r1
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	6011      	str	r1, [r2, #0]
 80043ae:	d1e0      	bne.n	8004372 <_free_r+0x26>
 80043b0:	681c      	ldr	r4, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	6053      	str	r3, [r2, #4]
 80043b6:	4421      	add	r1, r4
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	e7da      	b.n	8004372 <_free_r+0x26>
 80043bc:	d902      	bls.n	80043c4 <_free_r+0x78>
 80043be:	230c      	movs	r3, #12
 80043c0:	6003      	str	r3, [r0, #0]
 80043c2:	e7d6      	b.n	8004372 <_free_r+0x26>
 80043c4:	6825      	ldr	r5, [r4, #0]
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	428b      	cmp	r3, r1
 80043ca:	bf04      	itt	eq
 80043cc:	6819      	ldreq	r1, [r3, #0]
 80043ce:	685b      	ldreq	r3, [r3, #4]
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	bf04      	itt	eq
 80043d4:	1949      	addeq	r1, r1, r5
 80043d6:	6021      	streq	r1, [r4, #0]
 80043d8:	6054      	str	r4, [r2, #4]
 80043da:	e7ca      	b.n	8004372 <_free_r+0x26>
 80043dc:	b003      	add	sp, #12
 80043de:	bd30      	pop	{r4, r5, pc}
 80043e0:	20000188 	.word	0x20000188

080043e4 <sbrk_aligned>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4e0e      	ldr	r6, [pc, #56]	; (8004420 <sbrk_aligned+0x3c>)
 80043e8:	460c      	mov	r4, r1
 80043ea:	6831      	ldr	r1, [r6, #0]
 80043ec:	4605      	mov	r5, r0
 80043ee:	b911      	cbnz	r1, 80043f6 <sbrk_aligned+0x12>
 80043f0:	f000 f8bc 	bl	800456c <_sbrk_r>
 80043f4:	6030      	str	r0, [r6, #0]
 80043f6:	4621      	mov	r1, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f8b7 	bl	800456c <_sbrk_r>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	d00a      	beq.n	8004418 <sbrk_aligned+0x34>
 8004402:	1cc4      	adds	r4, r0, #3
 8004404:	f024 0403 	bic.w	r4, r4, #3
 8004408:	42a0      	cmp	r0, r4
 800440a:	d007      	beq.n	800441c <sbrk_aligned+0x38>
 800440c:	1a21      	subs	r1, r4, r0
 800440e:	4628      	mov	r0, r5
 8004410:	f000 f8ac 	bl	800456c <_sbrk_r>
 8004414:	3001      	adds	r0, #1
 8004416:	d101      	bne.n	800441c <sbrk_aligned+0x38>
 8004418:	f04f 34ff 	mov.w	r4, #4294967295
 800441c:	4620      	mov	r0, r4
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	2000018c 	.word	0x2000018c

08004424 <_malloc_r>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	1ccd      	adds	r5, r1, #3
 800442a:	f025 0503 	bic.w	r5, r5, #3
 800442e:	3508      	adds	r5, #8
 8004430:	2d0c      	cmp	r5, #12
 8004432:	bf38      	it	cc
 8004434:	250c      	movcc	r5, #12
 8004436:	2d00      	cmp	r5, #0
 8004438:	4607      	mov	r7, r0
 800443a:	db01      	blt.n	8004440 <_malloc_r+0x1c>
 800443c:	42a9      	cmp	r1, r5
 800443e:	d905      	bls.n	800444c <_malloc_r+0x28>
 8004440:	230c      	movs	r3, #12
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	2600      	movs	r6, #0
 8004446:	4630      	mov	r0, r6
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444c:	4e2e      	ldr	r6, [pc, #184]	; (8004508 <_malloc_r+0xe4>)
 800444e:	f000 f89d 	bl	800458c <__malloc_lock>
 8004452:	6833      	ldr	r3, [r6, #0]
 8004454:	461c      	mov	r4, r3
 8004456:	bb34      	cbnz	r4, 80044a6 <_malloc_r+0x82>
 8004458:	4629      	mov	r1, r5
 800445a:	4638      	mov	r0, r7
 800445c:	f7ff ffc2 	bl	80043e4 <sbrk_aligned>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	4604      	mov	r4, r0
 8004464:	d14d      	bne.n	8004502 <_malloc_r+0xde>
 8004466:	6834      	ldr	r4, [r6, #0]
 8004468:	4626      	mov	r6, r4
 800446a:	2e00      	cmp	r6, #0
 800446c:	d140      	bne.n	80044f0 <_malloc_r+0xcc>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	4631      	mov	r1, r6
 8004472:	4638      	mov	r0, r7
 8004474:	eb04 0803 	add.w	r8, r4, r3
 8004478:	f000 f878 	bl	800456c <_sbrk_r>
 800447c:	4580      	cmp	r8, r0
 800447e:	d13a      	bne.n	80044f6 <_malloc_r+0xd2>
 8004480:	6821      	ldr	r1, [r4, #0]
 8004482:	3503      	adds	r5, #3
 8004484:	1a6d      	subs	r5, r5, r1
 8004486:	f025 0503 	bic.w	r5, r5, #3
 800448a:	3508      	adds	r5, #8
 800448c:	2d0c      	cmp	r5, #12
 800448e:	bf38      	it	cc
 8004490:	250c      	movcc	r5, #12
 8004492:	4629      	mov	r1, r5
 8004494:	4638      	mov	r0, r7
 8004496:	f7ff ffa5 	bl	80043e4 <sbrk_aligned>
 800449a:	3001      	adds	r0, #1
 800449c:	d02b      	beq.n	80044f6 <_malloc_r+0xd2>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	442b      	add	r3, r5
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	e00e      	b.n	80044c4 <_malloc_r+0xa0>
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	1b52      	subs	r2, r2, r5
 80044aa:	d41e      	bmi.n	80044ea <_malloc_r+0xc6>
 80044ac:	2a0b      	cmp	r2, #11
 80044ae:	d916      	bls.n	80044de <_malloc_r+0xba>
 80044b0:	1961      	adds	r1, r4, r5
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	6025      	str	r5, [r4, #0]
 80044b6:	bf18      	it	ne
 80044b8:	6059      	strne	r1, [r3, #4]
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	bf08      	it	eq
 80044be:	6031      	streq	r1, [r6, #0]
 80044c0:	5162      	str	r2, [r4, r5]
 80044c2:	604b      	str	r3, [r1, #4]
 80044c4:	4638      	mov	r0, r7
 80044c6:	f104 060b 	add.w	r6, r4, #11
 80044ca:	f000 f865 	bl	8004598 <__malloc_unlock>
 80044ce:	f026 0607 	bic.w	r6, r6, #7
 80044d2:	1d23      	adds	r3, r4, #4
 80044d4:	1af2      	subs	r2, r6, r3
 80044d6:	d0b6      	beq.n	8004446 <_malloc_r+0x22>
 80044d8:	1b9b      	subs	r3, r3, r6
 80044da:	50a3      	str	r3, [r4, r2]
 80044dc:	e7b3      	b.n	8004446 <_malloc_r+0x22>
 80044de:	6862      	ldr	r2, [r4, #4]
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	bf0c      	ite	eq
 80044e4:	6032      	streq	r2, [r6, #0]
 80044e6:	605a      	strne	r2, [r3, #4]
 80044e8:	e7ec      	b.n	80044c4 <_malloc_r+0xa0>
 80044ea:	4623      	mov	r3, r4
 80044ec:	6864      	ldr	r4, [r4, #4]
 80044ee:	e7b2      	b.n	8004456 <_malloc_r+0x32>
 80044f0:	4634      	mov	r4, r6
 80044f2:	6876      	ldr	r6, [r6, #4]
 80044f4:	e7b9      	b.n	800446a <_malloc_r+0x46>
 80044f6:	230c      	movs	r3, #12
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4638      	mov	r0, r7
 80044fc:	f000 f84c 	bl	8004598 <__malloc_unlock>
 8004500:	e7a1      	b.n	8004446 <_malloc_r+0x22>
 8004502:	6025      	str	r5, [r4, #0]
 8004504:	e7de      	b.n	80044c4 <_malloc_r+0xa0>
 8004506:	bf00      	nop
 8004508:	20000188 	.word	0x20000188

0800450c <_realloc_r>:
 800450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004510:	4680      	mov	r8, r0
 8004512:	4614      	mov	r4, r2
 8004514:	460e      	mov	r6, r1
 8004516:	b921      	cbnz	r1, 8004522 <_realloc_r+0x16>
 8004518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800451c:	4611      	mov	r1, r2
 800451e:	f7ff bf81 	b.w	8004424 <_malloc_r>
 8004522:	b92a      	cbnz	r2, 8004530 <_realloc_r+0x24>
 8004524:	f7ff ff12 	bl	800434c <_free_r>
 8004528:	4625      	mov	r5, r4
 800452a:	4628      	mov	r0, r5
 800452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004530:	f000 f838 	bl	80045a4 <_malloc_usable_size_r>
 8004534:	4284      	cmp	r4, r0
 8004536:	4607      	mov	r7, r0
 8004538:	d802      	bhi.n	8004540 <_realloc_r+0x34>
 800453a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800453e:	d812      	bhi.n	8004566 <_realloc_r+0x5a>
 8004540:	4621      	mov	r1, r4
 8004542:	4640      	mov	r0, r8
 8004544:	f7ff ff6e 	bl	8004424 <_malloc_r>
 8004548:	4605      	mov	r5, r0
 800454a:	2800      	cmp	r0, #0
 800454c:	d0ed      	beq.n	800452a <_realloc_r+0x1e>
 800454e:	42bc      	cmp	r4, r7
 8004550:	4622      	mov	r2, r4
 8004552:	4631      	mov	r1, r6
 8004554:	bf28      	it	cs
 8004556:	463a      	movcs	r2, r7
 8004558:	f7ff fed0 	bl	80042fc <memcpy>
 800455c:	4631      	mov	r1, r6
 800455e:	4640      	mov	r0, r8
 8004560:	f7ff fef4 	bl	800434c <_free_r>
 8004564:	e7e1      	b.n	800452a <_realloc_r+0x1e>
 8004566:	4635      	mov	r5, r6
 8004568:	e7df      	b.n	800452a <_realloc_r+0x1e>
	...

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_sbrk_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc f97c 	bl	8000874 <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000190 	.word	0x20000190

0800458c <__malloc_lock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_lock+0x8>)
 800458e:	f000 b811 	b.w	80045b4 <__retarget_lock_acquire_recursive>
 8004592:	bf00      	nop
 8004594:	20000194 	.word	0x20000194

08004598 <__malloc_unlock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_unlock+0x8>)
 800459a:	f000 b80c 	b.w	80045b6 <__retarget_lock_release_recursive>
 800459e:	bf00      	nop
 80045a0:	20000194 	.word	0x20000194

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f18      	subs	r0, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbc      	itt	lt
 80045ae:	580b      	ldrlt	r3, [r1, r0]
 80045b0:	18c0      	addlt	r0, r0, r3
 80045b2:	4770      	bx	lr

080045b4 <__retarget_lock_acquire_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_release_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
