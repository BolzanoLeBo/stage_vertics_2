
test_32g.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a78  08002a78  000303a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002a78  08002a78  000303a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a78  08002a78  000303a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e1c  20000000  08002a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000003a4  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .ccmramdata   00000000  100003a4  100003a4  000303a4  2**0
                  CONTENTS
 11 .bss          000040bc  20000e1c  20000e1c  00030e1c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004ed8  20004ed8  00030e1c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096dc  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d54  00000000  00000000  00039ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000938  00000000  00000000  0003c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c6a3  00000000  00000000  0003cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009d78  00000000  00000000  0005921b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b72df  00000000  00000000  00062f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0011a272  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002788  00000000  00000000  0011a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000e1c 	.word	0x20000e1c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029c8 	.word	0x080029c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000e20 	.word	0x20000e20
 8000214:	080029c8 	.word	0x080029c8

08000218 <dijkstra_init>:
struct _QITEM dijkstra_queueItems[ QUEUE_SIZE ];

int dijkstra_checksum = 0;

void dijkstra_init( void )
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
  int i, k;
  volatile int x = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]

  for ( i = 0; i < NUM_NODES; i++ ) {
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	e026      	b.n	8000276 <dijkstra_init+0x5e>

    for ( k = 0; k < NUM_NODES; k++ )
 8000228:	2300      	movs	r3, #0
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	e01d      	b.n	800026a <dijkstra_init+0x52>
      dijkstra_AdjMatrix[ i ][ k ] ^= x;
 800022e:	6878      	ldr	r0, [r7, #4]
 8000230:	491b      	ldr	r1, [pc, #108]	; (80002a0 <dijkstra_init+0x88>)
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	4613      	mov	r3, r2
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	1a9b      	subs	r3, r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	18ca      	adds	r2, r1, r3
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b25a      	sxtb	r2, r3
 8000246:	b243      	sxtb	r3, r0
 8000248:	4053      	eors	r3, r2
 800024a:	b25b      	sxtb	r3, r3
 800024c:	b2d8      	uxtb	r0, r3
 800024e:	4914      	ldr	r1, [pc, #80]	; (80002a0 <dijkstra_init+0x88>)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	4613      	mov	r3, r2
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	1a9b      	subs	r3, r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	18ca      	adds	r2, r1, r3
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	4413      	add	r3, r2
 8000260:	4602      	mov	r2, r0
 8000262:	701a      	strb	r2, [r3, #0]
    for ( k = 0; k < NUM_NODES; k++ )
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	3301      	adds	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	2b3b      	cmp	r3, #59	; 0x3b
 800026e:	ddde      	ble.n	800022e <dijkstra_init+0x16>
  for ( i = 0; i < NUM_NODES; i++ ) {
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	3301      	adds	r3, #1
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	2b3b      	cmp	r3, #59	; 0x3b
 800027a:	ddd5      	ble.n	8000228 <dijkstra_init+0x10>
  }

  dijkstra_queueCount = 0;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <dijkstra_init+0x8c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
  dijkstra_queueNext = 0;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <dijkstra_init+0x90>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
  dijkstra_queueHead = ( struct _QITEM * )0;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <dijkstra_init+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]

  dijkstra_checksum = 0;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <dijkstra_init+0x98>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20001018 	.word	0x20001018
 80002a8:	2000101c 	.word	0x2000101c
 80002ac:	20001020 	.word	0x20001020
 80002b0:	20004ea4 	.word	0x20004ea4

080002b4 <dijkstra_return>:

int dijkstra_return( void )
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return ( ( dijkstra_checksum == 25 ) ? 0 : -1 );
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <dijkstra_return+0x20>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b19      	cmp	r3, #25
 80002be:	d101      	bne.n	80002c4 <dijkstra_return+0x10>
 80002c0:	2300      	movs	r3, #0
 80002c2:	e001      	b.n	80002c8 <dijkstra_return+0x14>
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20004ea4 	.word	0x20004ea4

080002d8 <dijkstra_enqueue>:

int dijkstra_enqueue( int node, int dist, int prev )
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  struct _QITEM *newItem = &dijkstra_queueItems[ dijkstra_queueNext ];
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <dijkstra_enqueue+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <dijkstra_enqueue+0x90>)
 80002ec:	4413      	add	r3, r2
 80002ee:	613b      	str	r3, [r7, #16]
  struct _QITEM *last = dijkstra_queueHead;
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <dijkstra_enqueue+0x94>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	617b      	str	r3, [r7, #20]

  if ( ++dijkstra_queueNext >= QUEUE_SIZE )
 80002f6:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <dijkstra_enqueue+0x8c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a19      	ldr	r2, [pc, #100]	; (8000364 <dijkstra_enqueue+0x8c>)
 80002fe:	6013      	str	r3, [r2, #0]
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <dijkstra_enqueue+0x8c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000308:	db02      	blt.n	8000310 <dijkstra_enqueue+0x38>
    return OUT_OF_MEMORY;
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	e022      	b.n	8000356 <dijkstra_enqueue+0x7e>
  newItem->node = node;
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	601a      	str	r2, [r3, #0]
  newItem->dist = dist;
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	605a      	str	r2, [r3, #4]
  newItem->prev = prev;
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	609a      	str	r2, [r3, #8]
  newItem->next = 0;
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if ( !last )
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d106      	bne.n	800033c <dijkstra_enqueue+0x64>
    dijkstra_queueHead = newItem;
 800032e:	4a0f      	ldr	r2, [pc, #60]	; (800036c <dijkstra_enqueue+0x94>)
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	6013      	str	r3, [r2, #0]
 8000334:	e009      	b.n	800034a <dijkstra_enqueue+0x72>
  else {
    /* TODO: where does this magic loop bound come from? */

    while ( last->next )
      last = last->next;
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	617b      	str	r3, [r7, #20]
    while ( last->next )
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f8      	bne.n	8000336 <dijkstra_enqueue+0x5e>
    last->next = newItem;
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	693a      	ldr	r2, [r7, #16]
 8000348:	60da      	str	r2, [r3, #12]
  }
  dijkstra_queueCount++;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <dijkstra_enqueue+0x98>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <dijkstra_enqueue+0x98>)
 8000352:	6013      	str	r3, [r2, #0]
  return 0;
 8000354:	2300      	movs	r3, #0
}
 8000356:	4618      	mov	r0, r3
 8000358:	371c      	adds	r7, #28
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	2000101c 	.word	0x2000101c
 8000368:	20001024 	.word	0x20001024
 800036c:	20001020 	.word	0x20001020
 8000370:	20001018 	.word	0x20001018

08000374 <dijkstra_dequeue>:

void dijkstra_dequeue( int *node, int *dist, int *prev )
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  if ( dijkstra_queueHead ) {
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <dijkstra_dequeue+0x54>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d018      	beq.n	80003ba <dijkstra_dequeue+0x46>
    *node = dijkstra_queueHead->node;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <dijkstra_dequeue+0x54>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	601a      	str	r2, [r3, #0]
    *dist = dijkstra_queueHead->dist;
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <dijkstra_dequeue+0x54>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	601a      	str	r2, [r3, #0]
    *prev = dijkstra_queueHead->prev;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <dijkstra_dequeue+0x54>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
    dijkstra_queueHead = dijkstra_queueHead->next;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <dijkstra_dequeue+0x54>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <dijkstra_dequeue+0x54>)
 80003ae:	6013      	str	r3, [r2, #0]
    dijkstra_queueCount--;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <dijkstra_dequeue+0x58>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <dijkstra_dequeue+0x58>)
 80003b8:	6013      	str	r3, [r2, #0]
  }
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20001020 	.word	0x20001020
 80003cc:	20001018 	.word	0x20001018

080003d0 <dijkstra_qcount>:

int dijkstra_qcount( void )
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ( dijkstra_queueCount );
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <dijkstra_qcount+0x14>)
 80003d6:	681b      	ldr	r3, [r3, #0]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20001018 	.word	0x20001018

080003e8 <dijkstra_find>:

int dijkstra_find( int chStart, int chEnd )
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  int ch;
  int prev, node = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  int cost, dist = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  int i;


  for ( ch = 0; ch < NUM_NODES; ch++ ) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
 80003fe:	e00f      	b.n	8000420 <dijkstra_find+0x38>
    dijkstra_rgnNodes[ ch ].dist = NONE;
 8000400:	4a44      	ldr	r2, [pc, #272]	; (8000514 <dijkstra_find+0x12c>)
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	f242 710f 	movw	r1, #9999	; 0x270f
 8000408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    dijkstra_rgnNodes[ ch ].prev = NONE;
 800040c:	4a41      	ldr	r2, [pc, #260]	; (8000514 <dijkstra_find+0x12c>)
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	4413      	add	r3, r2
 8000414:	f242 720f 	movw	r2, #9999	; 0x270f
 8000418:	605a      	str	r2, [r3, #4]
  for ( ch = 0; ch < NUM_NODES; ch++ ) {
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	3301      	adds	r3, #1
 800041e:	61fb      	str	r3, [r7, #28]
 8000420:	69fb      	ldr	r3, [r7, #28]
 8000422:	2b3b      	cmp	r3, #59	; 0x3b
 8000424:	ddec      	ble.n	8000400 <dijkstra_find+0x18>
  }

  if ( chStart == chEnd ) {
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	429a      	cmp	r2, r3
 800042c:	d06c      	beq.n	8000508 <dijkstra_find+0x120>
  } else {
    dijkstra_rgnNodes[ chStart ].dist = 0;
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <dijkstra_find+0x12c>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2100      	movs	r1, #0
 8000434:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    dijkstra_rgnNodes[ chStart ].prev = NONE;
 8000438:	4a36      	ldr	r2, [pc, #216]	; (8000514 <dijkstra_find+0x12c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4413      	add	r3, r2
 8000440:	f242 720f 	movw	r2, #9999	; 0x270f
 8000444:	605a      	str	r2, [r3, #4]

    if ( dijkstra_enqueue ( chStart, 0, NONE ) == OUT_OF_MEMORY )
 8000446:	f242 720f 	movw	r2, #9999	; 0x270f
 800044a:	2100      	movs	r1, #0
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ff43 	bl	80002d8 <dijkstra_enqueue>
 8000452:	4603      	mov	r3, r0
 8000454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000458:	d151      	bne.n	80004fe <dijkstra_find+0x116>
      return OUT_OF_MEMORY;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	e054      	b.n	800050a <dijkstra_find+0x122>

    /* TODO: where does this magic loop bound come from? */

    while ( dijkstra_qcount() > 0 ) {
      dijkstra_dequeue ( &node, &dist, &prev );
 8000460:	f107 0210 	add.w	r2, r7, #16
 8000464:	f107 0108 	add.w	r1, r7, #8
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff81 	bl	8000374 <dijkstra_dequeue>

      for ( i = 0; i < NUM_NODES; i++ ) {
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
 8000476:	e03f      	b.n	80004f8 <dijkstra_find+0x110>
        if ( ( cost = dijkstra_AdjMatrix[ node ][ i ] ) != NONE ) {
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	4927      	ldr	r1, [pc, #156]	; (8000518 <dijkstra_find+0x130>)
 800047c:	4613      	mov	r3, r2
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	18ca      	adds	r2, r1, r3
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f242 720f 	movw	r2, #9999	; 0x270f
 8000494:	4293      	cmp	r3, r2
 8000496:	d02c      	beq.n	80004f2 <dijkstra_find+0x10a>
          if ( ( NONE == dijkstra_rgnNodes[ i ].dist ) ||
 8000498:	4a1e      	ldr	r2, [pc, #120]	; (8000514 <dijkstra_find+0x12c>)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d008      	beq.n	80004ba <dijkstra_find+0xd2>
               ( dijkstra_rgnNodes[ i ].dist > ( cost + dist ) ) ) {
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <dijkstra_find+0x12c>)
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80004b0:	68b9      	ldr	r1, [r7, #8]
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	440b      	add	r3, r1
          if ( ( NONE == dijkstra_rgnNodes[ i ].dist ) ||
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dd1b      	ble.n	80004f2 <dijkstra_find+0x10a>
            dijkstra_rgnNodes[ i ].dist = dist + cost;
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	441a      	add	r2, r3
 80004c0:	4914      	ldr	r1, [pc, #80]	; (8000514 <dijkstra_find+0x12c>)
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            dijkstra_rgnNodes[ i ].prev = node;
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	4912      	ldr	r1, [pc, #72]	; (8000514 <dijkstra_find+0x12c>)
 80004cc:	69bb      	ldr	r3, [r7, #24]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	440b      	add	r3, r1
 80004d2:	605a      	str	r2, [r3, #4]
            if ( dijkstra_enqueue ( i, dist + cost, node ) == OUT_OF_MEMORY )
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	4413      	add	r3, r2
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4619      	mov	r1, r3
 80004de:	69b8      	ldr	r0, [r7, #24]
 80004e0:	f7ff fefa 	bl	80002d8 <dijkstra_enqueue>
 80004e4:	4603      	mov	r3, r0
 80004e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ea:	d102      	bne.n	80004f2 <dijkstra_find+0x10a>
              return OUT_OF_MEMORY;
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	e00b      	b.n	800050a <dijkstra_find+0x122>
      for ( i = 0; i < NUM_NODES; i++ ) {
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2b3b      	cmp	r3, #59	; 0x3b
 80004fc:	ddbc      	ble.n	8000478 <dijkstra_find+0x90>
    while ( dijkstra_qcount() > 0 ) {
 80004fe:	f7ff ff67 	bl	80003d0 <dijkstra_qcount>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	dcab      	bgt.n	8000460 <dijkstra_find+0x78>
          }
        }
      }
    }
  }
  return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000e38 	.word	0x20000e38
 8000518:	20000000 	.word	0x20000000

0800051c <dijkstra_main>:

void  dijkstra_main( void )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  int i, j;

  /* finds 20 shortest paths between nodes */
  for ( i = 0, j = NUM_NODES / 2; i < 20; i++, j++ ) {
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	231e      	movs	r3, #30
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	e02d      	b.n	8000588 <dijkstra_main+0x6c>
    j = j % NUM_NODES;
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <dijkstra_main+0x78>)
 8000530:	fb83 1302 	smull	r1, r3, r3, r2
 8000534:	4413      	add	r3, r2
 8000536:	1159      	asrs	r1, r3, #5
 8000538:	17d3      	asrs	r3, r2, #31
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	460b      	mov	r3, r1
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	1a5b      	subs	r3, r3, r1
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	603b      	str	r3, [r7, #0]
    if ( dijkstra_find( i, j ) == OUT_OF_MEMORY ) {
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ff4c 	bl	80003e8 <dijkstra_find>
 8000550:	4603      	mov	r3, r0
 8000552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000556:	d105      	bne.n	8000564 <dijkstra_main+0x48>
      dijkstra_checksum += OUT_OF_MEMORY;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <dijkstra_main+0x7c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3b01      	subs	r3, #1
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <dijkstra_main+0x7c>)
 8000560:	6013      	str	r3, [r2, #0]
      return;
 8000562:	e014      	b.n	800058e <dijkstra_main+0x72>
    } else
      dijkstra_checksum += dijkstra_rgnNodes[ j ].dist;
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <dijkstra_main+0x80>)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <dijkstra_main+0x7c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4413      	add	r3, r2
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <dijkstra_main+0x7c>)
 8000574:	6013      	str	r3, [r2, #0]
    dijkstra_queueNext = 0;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <dijkstra_main+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
  for ( i = 0, j = NUM_NODES / 2; i < 20; i++, j++ ) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b13      	cmp	r3, #19
 800058c:	ddce      	ble.n	800052c <dijkstra_main+0x10>
  }
}
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	88888889 	.word	0x88888889
 8000598:	20004ea4 	.word	0x20004ea4
 800059c:	20000e38 	.word	0x20000e38
 80005a0:	2000101c 	.word	0x2000101c

080005a4 <main_dij>:

int main_dij( void )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  dijkstra_init();
 80005a8:	f7ff fe36 	bl	8000218 <dijkstra_init>
  dijkstra_main();
 80005ac:	f7ff ffb6 	bl	800051c <dijkstra_main>

  return ( dijkstra_return() );
 80005b0:	f7ff fe80 	bl	80002b4 <dijkstra_return>
 80005b4:	4603      	mov	r3, r0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <tested_code>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int current_frequency;
void tested_code()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  //CACHE ON PREFETCH OFF CODE FLASH
  main_dij();
 80005c0:	f7ff fff0 	bl	80005a4 <main_dij>
  Sleep(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 f9f1 	bl	80009ac <Sleep>

  //CACHE ON PREFETCH OFF CODE CCM
  main_dij_ccm();
 80005ca:	f002 fa09 	bl	80029e0 <__main_dij_ccm_veneer>
  Sleep(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 f9ec 	bl	80009ac <Sleep>

  //CACHE OFF PREFETCH OFF CODE FLASH
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <tested_code+0x70>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <tested_code+0x70>)
 80005da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005de:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <tested_code+0x70>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <tested_code+0x70>)
 80005e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ea:	6013      	str	r3, [r2, #0]
  main_dij();
 80005ec:	f7ff ffda 	bl	80005a4 <main_dij>
  Sleep(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f000 f9db 	bl	80009ac <Sleep>

  //CACHE OFF PREFETCH ON CODE FLASH
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <tested_code+0x70>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <tested_code+0x70>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6013      	str	r3, [r2, #0]
  main_dij();
 8000602:	f7ff ffcf 	bl	80005a4 <main_dij>
  Sleep(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 f9d0 	bl	80009ac <Sleep>

  //CACHE ON PREFETCH ON CODE FLASH
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <tested_code+0x70>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <tested_code+0x70>)
 8000612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000616:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <tested_code+0x70>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <tested_code+0x70>)
 800061e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000622:	6013      	str	r3, [r2, #0]
  main_dij();
 8000624:	f7ff ffbe 	bl	80005a4 <main_dij>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40022000 	.word	0x40022000

08000630 <empty_cache>:

void empty_cache()
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <empty_cache+0x70>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <empty_cache+0x70>)
 800063a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800063e:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <empty_cache+0x70>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <empty_cache+0x70>)
 8000646:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800064a:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <empty_cache+0x70>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <empty_cache+0x70>)
 8000652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <empty_cache+0x70>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <empty_cache+0x70>)
 800065e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000662:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <empty_cache+0x70>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <empty_cache+0x70>)
 800066a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <empty_cache+0x70>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <empty_cache+0x70>)
 8000676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800067a:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <empty_cache+0x70>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <empty_cache+0x70>)
 8000682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000686:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <empty_cache+0x70>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <empty_cache+0x70>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <init_cache>:

void init_cache()
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <init_cache+0x34>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <init_cache+0x34>)
 80006ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <init_cache+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <init_cache+0x34>)
 80006ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006be:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <init_cache+0x34>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <init_cache+0x34>)
 80006c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ca:	6013      	str	r3, [r2, #0]

}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b090      	sub	sp, #64	; 0x40
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fbd2 	bl	8000e8a <HAL_Init>

  /* USER CODE BEGIN Init */

  int f_table[NF] = {16,26, 16,26,30,60,90,120,150,170,150,170};
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0xac>)
 80006e8:	463c      	mov	r4, r7
 80006ea:	461d      	mov	r5, r3
 80006ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int nb_range2 = 2; //the n first are in range 2
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  int nb_boost = 2; //the n last are in boost mode
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f842 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 f8c4 	bl	8000894 <MX_GPIO_Init>
  MX_RTC_Init();
 800070c:	f000 f88c 	bl	8000828 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int f;
  range1_to_range2();
 8000710:	f000 fa5a 	bl	8000bc8 <range1_to_range2>
  for (int i =0; i < NF; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000718:	e026      	b.n	8000768 <main+0x8c>
  {
    empty_cache();
 800071a:	f7ff ff89 	bl	8000630 <empty_cache>
    if (i == nb_range2 )
 800071e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000722:	429a      	cmp	r2, r3
 8000724:	d101      	bne.n	800072a <main+0x4e>
    {
      range2_to_range1();
 8000726:	f000 fa8f 	bl	8000c48 <range2_to_range1>
    }
    if (i == NF-nb_boost)
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	f1c3 030c 	rsb	r3, r3, #12
 8000730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000732:	429a      	cmp	r2, r3
 8000734:	d101      	bne.n	800073a <main+0x5e>
    {
      boost_mode();
 8000736:	f000 fab3 	bl	8000ca0 <boost_mode>
    }
    f = f_table[i];
 800073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3340      	adds	r3, #64	; 0x40
 8000740:	443b      	add	r3, r7
 8000742:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
    change_freq(f);
 8000748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800074a:	f000 f95b 	bl	8000a04 <change_freq>
    init_cache();
 800074e:	f7ff ffa9 	bl	80006a4 <init_cache>
    Sleep(200);
 8000752:	20c8      	movs	r0, #200	; 0xc8
 8000754:	f000 f92a 	bl	80009ac <Sleep>
    tested_code();
 8000758:	f7ff ff30 	bl	80005bc <tested_code>
    Sleep(200);
 800075c:	20c8      	movs	r0, #200	; 0xc8
 800075e:	f000 f925 	bl	80009ac <Sleep>
  for (int i =0; i < NF; i++)
 8000762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000764:	3301      	adds	r3, #1
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800076a:	2b0b      	cmp	r3, #11
 800076c:	ddd5      	ble.n	800071a <main+0x3e>
  }
  HAL_SuspendTick();
 800076e:	f000 fbfd 	bl	8000f6c <HAL_SuspendTick>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000772:	2101      	movs	r1, #1
 8000774:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000778:	f000 feaa 	bl	80014d0 <HAL_PWR_EnterSTOPMode>
 800077c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}
 8000786:	bf00      	nop
 8000788:	080029e8 	.word	0x080029e8

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2238      	movs	r2, #56	; 0x38
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f90c 	bl	80029b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b2:	f000 fea5 	bl	8001500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007b6:	230a      	movs	r3, #10
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 80007d4:	230f      	movs	r3, #15
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff83 	bl	80016f4 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007f4:	f000 fa6c 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2103      	movs	r1, #3
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa87 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fa58 	bl	8000cd0 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_RTC_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_RTC_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_RTC_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_RTC_Init+0x64>)
 800083a:	227f      	movs	r2, #127	; 0x7f
 800083c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_RTC_Init+0x64>)
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_RTC_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_RTC_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_RTC_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_RTC_Init+0x64>)
 8000858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_RTC_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_RTC_Init+0x64>)
 8000866:	f001 fe63 	bl	8002530 <HAL_RTC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 fa2e 	bl	8000cd0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_RTC_Init+0x64>)
 800087a:	f001 ff6d 	bl	8002758 <HAL_RTCEx_SetWakeUpTimer_IT>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 fa24 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20004ea8 	.word	0x20004ea8
 8000890:	40002800 	.word	0x40002800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <MX_GPIO_Init+0x108>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <MX_GPIO_Init+0x108>)
 80008b0:	f043 0320 	orr.w	r3, r3, #32
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_GPIO_Init+0x108>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0320 	and.w	r3, r3, #32
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_GPIO_Init+0x108>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <MX_GPIO_Init+0x108>)
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_GPIO_Init+0x108>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_GPIO_Init+0x108>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <MX_GPIO_Init+0x108>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0x108>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0x108>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <MX_GPIO_Init+0x108>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0x108>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800090a:	2303      	movs	r3, #3
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <MX_GPIO_Init+0x10c>)
 800091e:	f000 fc55 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x110>)
 8000938:	f000 fc48 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800093c:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000940:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000942:	2303      	movs	r3, #3
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fc3a 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000958:	230c      	movs	r3, #12
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000968:	2307      	movs	r3, #7
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fc29 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800097a:	f240 13f1 	movw	r3, #497	; 0x1f1
 800097e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x114>)
 8000990:	f000 fc1c 	bl	80011cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	48001400 	.word	0x48001400
 80009a4:	48001800 	.word	0x48001800
 80009a8:	48000400 	.word	0x48000400

080009ac <Sleep>:

/* USER CODE BEGIN 4 */
void Sleep(int time)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t counter = (uint32_t) ((float) time*2);/*divide by (16/32)*/
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c6:	ee17 3a90 	vmov	r3, s15
 80009ca:	60fb      	str	r3, [r7, #12]

  HAL_SuspendTick();
 80009cc:	f000 face 	bl	8000f6c <HAL_SuspendTick>

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80009d0:	2200      	movs	r2, #0
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <Sleep+0x50>)
 80009d6:	f001 febf 	bl	8002758 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Enter sleep or stop mode */
  //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fe5e 	bl	800169c <HAL_PWREx_EnterSTOP1Mode>
  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* Wake up*/
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <Sleep+0x50>)
 80009e2:	f001 ff3f 	bl	8002864 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 80009e6:	f000 fad1 	bl	8000f8c <HAL_ResumeTick>
  //When wake up from STOP Sysclk source is HSI
  change_freq(current_frequency);
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <Sleep+0x54>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f808 	bl	8000a04 <change_freq>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20004ea8 	.word	0x20004ea8
 8000a00:	20004ed0 	.word	0x20004ed0

08000a04 <change_freq>:
void change_freq(int f)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b0ae      	sub	sp, #184	; 0xb8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  int latency = FLASH_LATENCY_4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  int latency_tab[5] = {FLASH_LATENCY_0,FLASH_LATENCY_1,FLASH_LATENCY_2,FLASH_LATENCY_3,FLASH_LATENCY_4};
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <change_freq+0x1ac>)
 8000a14:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000a18:	461d      	mov	r5, r3
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	6023      	str	r3, [r4, #0]
  int freq_scale_boost[5] = {34,68,102,136,85};
 8000a22:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <change_freq+0x1b0>)
 8000a24:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000a28:	461d      	mov	r5, r3
 8000a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	682b      	ldr	r3, [r5, #0]
 8000a30:	6023      	str	r3, [r4, #0]
  int freq_scale_normal[5] = {30,60,90,120,150};
 8000a32:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <change_freq+0x1b4>)
 8000a34:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	6023      	str	r3, [r4, #0]
  int freq_scale_low[5] = {12,24,26,26,26};
 8000a42:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <change_freq+0x1b8>)
 8000a44:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000a48:	461d      	mov	r5, r3
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	682b      	ldr	r3, [r5, #0]
 8000a50:	6023      	str	r3, [r4, #0]
  //if we are in boost mode there is not the same wait states
  int* selector;
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a52:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <change_freq+0x1bc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a5e:	d10a      	bne.n	8000a76 <change_freq+0x72>
  {
    if (f <= 26)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b1a      	cmp	r3, #26
 8000a64:	dc04      	bgt.n	8000a70 <change_freq+0x6c>
    {
      selector = freq_scale_low;
 8000a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a6e:	e012      	b.n	8000a96 <change_freq+0x92>
    }
    else
    {
      Error_Handler();
 8000a70:	f000 f92e 	bl	8000cd0 <Error_Handler>
 8000a74:	e00f      	b.n	8000a96 <change_freq+0x92>
    }
  }

  else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE))
 8000a76:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <change_freq+0x1bc>)
 8000a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <change_freq+0x8a>
  {
    selector = freq_scale_normal;
 8000a84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a8c:	e003      	b.n	8000a96 <change_freq+0x92>
  }
  else
  {
    selector = freq_scale_boost;
 8000a8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  }

  int mul = f/2;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0fda      	lsrs	r2, r3, #31
 8000a9a:	4413      	add	r3, r2
 8000a9c:	105b      	asrs	r3, r3, #1
 8000a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2238      	movs	r2, #56	; 0x38
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 ff7c 	bl	80029b8 <memset>
  for (int i = 4; i >= 0; i--)
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000ac6:	e018      	b.n	8000afa <change_freq+0xf6>
  {
    if (mul <= selector[i])
 8000ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ad2:	4413      	add	r3, r2
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dc08      	bgt.n	8000af0 <change_freq+0xec>
    {
      latency = latency_tab[i];
 8000ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	33b8      	adds	r3, #184	; 0xb8
 8000ae6:	443b      	add	r3, r7
 8000ae8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  for (int i = 4; i >= 0; i--)
 8000af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000af4:	3b01      	subs	r3, #1
 8000af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	dae2      	bge.n	8000ac8 <change_freq+0xc4>
    }
  }

  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000b02:	2301      	movs	r3, #1
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b06:	2301      	movs	r3, #1
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 8000b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 f905 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <change_freq+0x120>
  {
    /* Initialization Error */
    Error_Handler();
 8000b20:	f000 f8d6 	bl	8000cd0 <Error_Handler>
  }
  /* -2- Enable HSE  Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (f <= 42)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b3e:	dc04      	bgt.n	8000b4a <change_freq+0x146>
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
 8000b48:	e003      	b.n	8000b52 <change_freq+0x14e>
  }
  else
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  }
  RCC_OscInitStruct.PLL.PLLN = mul;
 8000b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fdc5 	bl	80016f4 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <change_freq+0x170>
  {
    /* Initialization Error */
    Error_Handler();
 8000b70:	f000 f8ae 	bl	8000cd0 <Error_Handler>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 8000b88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f8c6 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <change_freq+0x19e>
  {
    /* Initialization Error */
    Error_Handler();
 8000b9e:	f000 f897 	bl	8000cd0 <Error_Handler>
  }
  current_frequency = f;
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <change_freq+0x1c0>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	37b8      	adds	r7, #184	; 0xb8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb0:	08002a18 	.word	0x08002a18
 8000bb4:	08002a2c 	.word	0x08002a2c
 8000bb8:	08002a40 	.word	0x08002a40
 8000bbc:	08002a54 	.word	0x08002a54
 8000bc0:	40007000 	.word	0x40007000
 8000bc4:	20004ed0 	.word	0x20004ed0

08000bc8 <range1_to_range2>:

void range1_to_range2()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <range1_to_range2+0x7c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d02e      	beq.n	8000c3a <range1_to_range2+0x72>
  {
    //Reduce the system frequency to a value lower than 26 MHz
    change_freq(26);
 8000bdc:	201a      	movs	r0, #26
 8000bde:	f7ff ff11 	bl	8000a04 <change_freq>
    //the system clock must be divided by 2 using the AHB prescaler
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_0 );
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fa33 	bl	8002060 <HAL_RCC_GetClockConfig>
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	60fb      	str	r3, [r7, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f88e 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <range1_to_range2+0x4a>
    {
      /* Initialization Error */
      Error_Handler();
 8000c0e:	f000 f85f 	bl	8000cd0 <Error_Handler>
    }
    //Program the VOS bits to “10�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <range1_to_range2+0x7c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <range1_to_range2+0x7c>)
 8000c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c20:	6013      	str	r3, [r2, #0]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
    //Adjust number of wait states according new frequency target in Range 2
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 f87a 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <range1_to_range2+0x72>
    {
      /* Initialization Error */
      Error_Handler();
 8000c36:	f000 f84b 	bl	8000cd0 <Error_Handler>
    }
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40007000 	.word	0x40007000

08000c48 <range2_to_range1>:

void range2_to_range1()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <range2_to_range1+0x50>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c58:	d11b      	bne.n	8000c92 <range2_to_range1+0x4a>
  {
    //Program the VOS bits to “01�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <range2_to_range1+0x50>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <range2_to_range1+0x50>)
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6013      	str	r3, [r2, #0]
    //Wait until the VOSF flag is cleared in the PWR_SR2 register
    while (READ_BIT(PWR->SR2, PWR_SR2_VOSF))
 8000c6a:	bf00      	nop
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <range2_to_range1+0x50>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f9      	bne.n	8000c6c <range2_to_range1+0x24>
    {
      ;
    }
    //Adjust number of wait states according new frequency target in Range 1
    SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <range2_to_range1+0x50>)
 8000c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <range2_to_range1+0x50>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    change_freq(current_frequency);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <range2_to_range1+0x54>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff feb9 	bl	8000a04 <change_freq>
  }
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40007000 	.word	0x40007000
 8000c9c:	20004ed0 	.word	0x20004ed0

08000ca0 <boost_mode>:

void boost_mode()
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <boost_mode+0x2c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb0:	d107      	bne.n	8000cc2 <boost_mode+0x22>
  {
    CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <boost_mode+0x2c>)
 8000cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <boost_mode+0x2c>)
 8000cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2244      	movs	r2, #68	; 0x44
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fe3f 	bl	80029b8 <memset>
  if(hrtc->Instance==RTC)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_RTC_MspInit+0x80>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d12b      	bne.n	8000d9c <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 f9fb 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d60:	f7ff ffb6 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_RTC_MspInit+0x84>)
 8000d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_RTC_MspInit+0x84>)
 8000d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_RTC_MspInit+0x84>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_RTC_MspInit+0x84>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_RTC_MspInit+0x84>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f9e6 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f9fd 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	; 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40002800 	.word	0x40002800
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f89a 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <RTC_WKUP_IRQHandler+0x10>)
 8000e06:	f001 fd89 	bl	800291c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20004ea8 	.word	0x20004ea8

08000e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f001 fd83 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fc37 	bl	80006dc <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20005800 	.word	0x20005800
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000e1c 	.word	0x20000e1c
  ldr r2, =_sidata
 8000e7c:	08002a80 	.word	0x08002a80
  ldr r2, =_sbss
 8000e80:	20000e1c 	.word	0x20000e1c
  ldr r4, =_ebss
 8000e84:	20004ed8 	.word	0x20004ed8

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>

08000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f959 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f80e 	bl	8000ebc <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e001      	b.n	8000eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eac:	f7ff ff16 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_InitTick+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d022      	beq.n	8000f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_InitTick+0x68>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f964 	bl	80011b2 <HAL_SYSTICK_Config>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10f      	bne.n	8000f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d809      	bhi.n	8000f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295
 8000efe:	f000 f930 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_InitTick+0x70>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e004      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e001      	b.n	8000f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000e18 	.word	0x20000e18
 8000f28:	20000e10 	.word	0x20000e10
 8000f2c:	20000e14 	.word	0x20000e14

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20004ed4 	.word	0x20004ed4
 8000f50:	20000e18 	.word	0x20000e18

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20004ed4 	.word	0x20004ed4

08000f6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_SuspendTick+0x1c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_SuspendTick+0x1c>)
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_ResumeTick+0x1c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_ResumeTick+0x1c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff40 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff33 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa4 	bl	8001108 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011da:	e15a      	b.n	8001492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 814c 	beq.w	800148c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d005      	beq.n	800120c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001208:	2b02      	cmp	r3, #2
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 0201 	and.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b03      	cmp	r3, #3
 8001278:	d017      	beq.n	80012aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d123      	bne.n	80012fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0203 	and.w	r2, r3, #3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a6 	beq.w	800148c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_GPIO_Init+0x2e4>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001344:	4a5a      	ldr	r2, [pc, #360]	; (80014b0 <HAL_GPIO_Init+0x2e4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6613      	str	r3, [r2, #96]	; 0x60
 800134c:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <HAL_GPIO_Init+0x2e4>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001358:	4a56      	ldr	r2, [pc, #344]	; (80014b4 <HAL_GPIO_Init+0x2e8>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001382:	d01f      	beq.n	80013c4 <HAL_GPIO_Init+0x1f8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x2ec>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d019      	beq.n	80013c0 <HAL_GPIO_Init+0x1f4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_GPIO_Init+0x1f0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_GPIO_Init+0x2f4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_GPIO_Init+0x2f8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_GPIO_Init+0x2fc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_GPIO_Init+0x1e4>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e00a      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e008      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013b8:	2303      	movs	r3, #3
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1fa>
 80013c4:	2300      	movs	r3, #0
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d6:	4937      	ldr	r1, [pc, #220]	; (80014b4 <HAL_GPIO_Init+0x2e8>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_GPIO_Init+0x300>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001408:	4a30      	ldr	r2, [pc, #192]	; (80014cc <HAL_GPIO_Init+0x300>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x300>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001432:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_GPIO_Init+0x300>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_GPIO_Init+0x300>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_GPIO_Init+0x300>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_GPIO_Init+0x300>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_GPIO_Init+0x300>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f ae9d 	bne.w	80011dc <HAL_GPIO_Init+0x10>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	48001000 	.word	0x48001000
 80014c8:	48001400 	.word	0x48001400
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014e2:	d104      	bne.n	80014ee <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f8d8 	bl	800169c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f8a9 	bl	8001648 <HAL_PWREx_EnterSTOP0Mode>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d141      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151a:	d131      	bne.n	8001580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800151c:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001522:	4a46      	ldr	r2, [pc, #280]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001534:	4a41      	ldr	r2, [pc, #260]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2232      	movs	r2, #50	; 0x32
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001552:	e002      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3b01      	subs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d102      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f2      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d158      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e057      	b.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001586:	4a2d      	ldr	r2, [pc, #180]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800158c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001590:	e04d      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001598:	d141      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a6:	d131      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015de:	e002      	b.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d102      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f2      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001606:	d112      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e011      	b.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800161c:	e007      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40007000 	.word	0x40007000
 8001640:	20000e10 	.word	0x20000e10
 8001644:	431bde83 	.word	0x431bde83

08001648 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001658:	f023 0307 	bic.w	r3, r3, #7
 800165c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001670:	bf30      	wfi
 8001672:	e002      	b.n	800167a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001674:	bf40      	sev
    __WFE();
 8001676:	bf20      	wfe
    __WFE();
 8001678:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6113      	str	r3, [r2, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40007000 	.word	0x40007000
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0307 	bic.w	r3, r3, #7
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80016c8:	bf30      	wfi
 80016ca:	e002      	b.n	80016d2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80016cc:	bf40      	sev
    __WFE();
 80016ce:	bf20      	wfe
    __WFE();
 80016d0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6113      	str	r3, [r2, #16]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40007000 	.word	0x40007000
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e306      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d075      	beq.n	80017fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001712:	4b97      	ldr	r3, [pc, #604]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171c:	4b94      	ldr	r3, [pc, #592]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d102      	bne.n	8001732 <HAL_RCC_OscConfig+0x3e>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d002      	beq.n	8001738 <HAL_RCC_OscConfig+0x44>
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d10b      	bne.n	8001750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d05b      	beq.n	80017fc <HAL_RCC_OscConfig+0x108>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d157      	bne.n	80017fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e2e1      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x74>
 800175a:	4b85      	ldr	r3, [pc, #532]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a84      	ldr	r2, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7e      	ldr	r2, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 800178c:	4b78      	ldr	r3, [pc, #480]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b75      	ldr	r3, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a74      	ldr	r2, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbd2 	bl	8000f54 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fbce 	bl	8000f54 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e2a6      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xc0>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fbbe 	bl	8000f54 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbba 	bl	8000f54 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e292      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	4b60      	ldr	r3, [pc, #384]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0xe8>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d075      	beq.n	80018f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d102      	bne.n	800182a <HAL_RCC_OscConfig+0x136>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d002      	beq.n	8001830 <HAL_RCC_OscConfig+0x13c>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d11f      	bne.n	8001870 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x154>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e265      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	4946      	ldr	r1, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb2b 	bl	8000ebc <HAL_InitTick>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d043      	beq.n	80018f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e251      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3c      	ldr	r2, [pc, #240]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb66 	bl	8000f54 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fb62 	bl	8000f54 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e23a      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	061b      	lsls	r3, r3, #24
 80018b8:	492d      	ldr	r1, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb42 	bl	8000f54 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb3e 	bl	8000f54 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e216      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1e0>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d041      	beq.n	8001986 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fb1b 	bl	8000f54 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff fb17 	bl	8000f54 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1ef      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ef      	beq.n	8001922 <HAL_RCC_OscConfig+0x22e>
 8001942:	e020      	b.n	8001986 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fafe 	bl	8000f54 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195a:	e00d      	b.n	8001978 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fafa 	bl	8000f54 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d906      	bls.n	8001978 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1d2      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	20000e14 	.word	0x20000e14
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ea      	bne.n	800195c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80a6 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001998:	4b84      	ldr	r3, [pc, #528]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2b4>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x2b6>
 80019a8:	2300      	movs	r3, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	4a7e      	ldr	r2, [pc, #504]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ba:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_RCC_OscConfig+0x4bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x4bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a75      	ldr	r2, [pc, #468]	; (8001bb0 <HAL_RCC_OscConfig+0x4bc>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fab7 	bl	8000f54 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff fab3 	bl	8000f54 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e18b      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x4bc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_RCC_OscConfig+0x32e>
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a16:	4a65      	ldr	r2, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a20:	e024      	b.n	8001a6c <HAL_RCC_OscConfig+0x378>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d110      	bne.n	8001a4c <HAL_RCC_OscConfig+0x358>
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x378>
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a56      	ldr	r2, [pc, #344]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fa6e 	bl	8000f54 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fa6a 	bl	8000f54 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e140      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ed      	beq.n	8001a7c <HAL_RCC_OscConfig+0x388>
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fa57 	bl	8000f54 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fa53 	bl	8000f54 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e129      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ed      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fa26 	bl	8000f54 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0c:	f7ff fa22 	bl	8000f54 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0fa      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x418>
 8001b2c:	e01b      	b.n	8001b66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fa09 	bl	8000f54 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b46:	f7ff fa05 	bl	8000f54 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e0dd      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80d1 	beq.w	8001d12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	f000 808b 	beq.w	8001c94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d15e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f9df 	bl	8000f54 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e00c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f9db 	bl	8000f54 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d905      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0b3      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ec      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_RCC_OscConfig+0x62c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6a11      	ldr	r1, [r2, #32]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bda:	0212      	lsls	r2, r2, #8
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be2:	0852      	lsrs	r2, r2, #1
 8001be4:	3a01      	subs	r2, #1
 8001be6:	0552      	lsls	r2, r2, #21
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bee:	0852      	lsrs	r2, r2, #1
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	0652      	lsls	r2, r2, #25
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bfa:	06d2      	lsls	r2, r2, #27
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4947      	ldr	r1, [pc, #284]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a44      	ldr	r2, [pc, #272]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a41      	ldr	r2, [pc, #260]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f99a 	bl	8000f54 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f996 	bl	8000f54 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e06e      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x530>
 8001c42:	e066      	b.n	8001d12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f972 	bl	8000f54 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f96e 	bl	8000f54 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e046      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x580>
 8001c92:	e03e      	b.n	8001d12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e039      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d12c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d123      	bne.n	8001d0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d113      	bne.n	8001d0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	019f800c 	.word	0x019f800c

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e11e      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	498c      	ldr	r1, [pc, #560]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e106      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d073      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d129      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0f4      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d90:	f000 f998 	bl	80020c4 <RCC_GetSysClockFreqFromPLLSource>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4a7c      	ldr	r2, [pc, #496]	; (8001f8c <HAL_RCC_ClockConfig+0x268>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d93f      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d033      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d12f      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc6:	4a70      	ldr	r2, [pc, #448]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e024      	b.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0c6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0be      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dfc:	f000 f8ce 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_RCC_ClockConfig+0x268>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d909      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4957      	ldr	r1, [pc, #348]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff f890 	bl	8000f54 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f88c 	bl	8000f54 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e095      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e98:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4936      	ldr	r1, [pc, #216]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d21d      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 020f 	bic.w	r2, r3, #15
 8001edc:	4929      	ldr	r1, [pc, #164]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff f836 	bl	8000f54 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7ff f832 	bl	8000f54 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e03b      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ed      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4917      	ldr	r1, [pc, #92]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490f      	ldr	r1, [pc, #60]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4e:	f000 f825 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490c      	ldr	r1, [pc, #48]	; (8001f90 <HAL_RCC_ClockConfig+0x26c>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffa2 	bl	8000ebc <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	04c4b400 	.word	0x04c4b400
 8001f90:	08002a68 	.word	0x08002a68
 8001f94:	20000e10 	.word	0x20000e10
 8001f98:	20000e14 	.word	0x20000e14

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e047      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e03e      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d136      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	0a12      	lsrs	r2, r2, #8
 8001ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e00c      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	0a12      	lsrs	r2, r2, #8
 8002018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0e5b      	lsrs	r3, r3, #25
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e001      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002044:	693b      	ldr	r3, [r7, #16]
}
 8002046:	4618      	mov	r0, r3
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	220f      	movs	r2, #15
 800206e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_RCC_GetClockConfig+0x5c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_GetClockConfig+0x5c>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_GetClockConfig+0x5c>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RCC_GetClockConfig+0x60>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	601a      	str	r2, [r3, #0]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40022000 	.word	0x40022000

080020c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d10c      	bne.n	8002102 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f2:	68d2      	ldr	r2, [r2, #12]
 80020f4:	0a12      	lsrs	r2, r2, #8
 80020f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
    break;
 8002100:	e00c      	b.n	800211c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	0a12      	lsrs	r2, r2, #8
 8002110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    break;
 800211a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0e5b      	lsrs	r3, r3, #25
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	3301      	adds	r3, #1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002136:	687b      	ldr	r3, [r7, #4]
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	00f42400 	.word	0x00f42400

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002158:	2300      	movs	r3, #0
 800215a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800215c:	2300      	movs	r3, #0
 800215e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8098 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219a:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a39      	ldr	r2, [pc, #228]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a6:	f7fe fed5 	bl	8000f54 <HAL_GetTick>
 80021aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ac:	e009      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7fe fed1 	bl	8000f54 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d902      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	74fb      	strb	r3, [r7, #19]
        break;
 80021c0:	e005      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ef      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d159      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01e      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d019      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fe91 	bl	8000f54 <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002234:	e00b      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fe8d 	bl	8000f54 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d902      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	74fb      	strb	r3, [r7, #19]
            break;
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ec      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10b      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002278:	e008      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	74bb      	strb	r3, [r7, #18]
 800227e:	e005      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228c:	7c7b      	ldrb	r3, [r7, #17]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4ba6      	ldr	r3, [pc, #664]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4aa5      	ldr	r2, [pc, #660]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4ba0      	ldr	r3, [pc, #640]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	499c      	ldr	r1, [pc, #624]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022cc:	4b97      	ldr	r3, [pc, #604]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4994      	ldr	r1, [pc, #592]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ee:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	498b      	ldr	r1, [pc, #556]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4b86      	ldr	r3, [pc, #536]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4983      	ldr	r1, [pc, #524]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002332:	4b7e      	ldr	r3, [pc, #504]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	497a      	ldr	r1, [pc, #488]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4972      	ldr	r1, [pc, #456]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4969      	ldr	r1, [pc, #420]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4961      	ldr	r1, [pc, #388]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ba:	4b5c      	ldr	r3, [pc, #368]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	4958      	ldr	r1, [pc, #352]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	4950      	ldr	r1, [pc, #320]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	4942      	ldr	r1, [pc, #264]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002432:	d105      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a3c      	ldr	r2, [pc, #240]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	4926      	ldr	r1, [pc, #152]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	4918      	ldr	r1, [pc, #96]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002512:	d105      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002520:	7cbb      	ldrb	r3, [r7, #18]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d066      	beq.n	8002610 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe fbe4 	bl	8000d24 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	22ca      	movs	r2, #202	; 0xca
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2253      	movs	r2, #83	; 0x53
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f876 	bl	8002666 <RTC_EnterInitMode>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13a      	bne.n	80025fa <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002596:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6999      	ldr	r1, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f882 	bl	80026d2 <RTC_ExitInitMode>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d110      	bne.n	80025fa <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0220 	bic.w	r2, r2, #32
 8002630:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002632:	f7fe fc8f 	bl	8000f54 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002638:	e009      	b.n	800264e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800263a:	f7fe fc8b 	bl	8000f54 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002648:	d901      	bls.n	800264e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e007      	b.n	800265e <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d123      	bne.n	80026c8 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002690:	f7fe fc60 	bl	8000f54 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002696:	e00d      	b.n	80026b4 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002698:	f7fe fc5c 	bl	8000f54 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d905      	bls.n	80026b4 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <RTC_EnterInitMode+0x62>
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d1e7      	bne.n	8002698 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10c      	bne.n	8002716 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff8c 	bl	800261a <HAL_RTC_WaitForSynchro>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d022      	beq.n	800274e <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2203      	movs	r2, #3
 800270c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e01b      	b.n	800274e <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0220 	bic.w	r2, r2, #32
 8002724:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff77 	bl	800261a <HAL_RTC_WaitForSynchro>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800276e:	2302      	movs	r3, #2
 8002770:	e072      	b.n	8002858 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	22ca      	movs	r2, #202	; 0xca
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2253      	movs	r2, #83	; 0x53
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2204      	movs	r2, #4
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d120      	bne.n	80027fa <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
  {
    tickstart = HAL_GetTick();
 80027b8:	f7fe fbcc 	bl	8000f54 <HAL_GetTick>
 80027bc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80027be:	e015      	b.n	80027ec <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027c0:	f7fe fbc8 	bl	8000f54 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ce:	d90d      	bls.n	80027ec <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2203      	movs	r2, #3
 80027dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e035      	b.n	8002858 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0e2      	beq.n	80027c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f023 0107 	bic.w	r1, r3, #7
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	430a      	orrs	r2, r1
 8002814:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002820:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282c:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(hrtc->Instance->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 4288 	orr.w	r2, r2, #17408	; 0x4400
 800283c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002876:	2302      	movs	r3, #2
 8002878:	e049      	b.n	800290e <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	22ca      	movs	r2, #202	; 0xca
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2253      	movs	r2, #83	; 0x53
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 4288 	bic.w	r2, r2, #17408	; 0x4400
 80028a8:	619a      	str	r2, [r3, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>)
 80028ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028b0:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 80028b2:	f7fe fb4f 	bl	8000f54 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80028b8:	e015      	b.n	80028e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028ba:	f7fe fb4b 	bl	8000f54 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c8:	d90d      	bls.n	80028e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e013      	b.n	800290e <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0e2      	beq.n	80028ba <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(hrtc->Instance->SR, RTC_SR_WUTF) != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CWUTF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2204      	movs	r2, #4
 8002938:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 800293c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002940:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f80a 	bl	800295c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4d0d      	ldr	r5, [pc, #52]	; (80029a8 <__libc_init_array+0x38>)
 8002974:	4c0d      	ldr	r4, [pc, #52]	; (80029ac <__libc_init_array+0x3c>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	2600      	movs	r6, #0
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	4d0b      	ldr	r5, [pc, #44]	; (80029b0 <__libc_init_array+0x40>)
 8002982:	4c0c      	ldr	r4, [pc, #48]	; (80029b4 <__libc_init_array+0x44>)
 8002984:	f000 f820 	bl	80029c8 <_init>
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	2600      	movs	r6, #0
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f855 3b04 	ldr.w	r3, [r5], #4
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	08002a78 	.word	0x08002a78
 80029ac:	08002a78 	.word	0x08002a78
 80029b0:	08002a78 	.word	0x08002a78
 80029b4:	08002a7c 	.word	0x08002a7c

080029b8 <memset>:
 80029b8:	4402      	add	r2, r0
 80029ba:	4603      	mov	r3, r0
 80029bc:	4293      	cmp	r3, r2
 80029be:	d100      	bne.n	80029c2 <memset+0xa>
 80029c0:	4770      	bx	lr
 80029c2:	f803 1b01 	strb.w	r1, [r3], #1
 80029c6:	e7f9      	b.n	80029bc <memset+0x4>

080029c8 <_init>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	bf00      	nop
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr

080029d4 <_fini>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <__main_dij_ccm_veneer>:
 80029e0:	f85f f000 	ldr.w	pc, [pc]	; 80029e4 <__main_dij_ccm_veneer+0x4>
 80029e4:	1000038d 	.word	0x1000038d

Disassembly of section .ccmram:

10000000 <dijkstra_init_ccm>:

//---------CCM----------------------


void dijkstra_init_ccm( void )
{
10000000:	b480      	push	{r7}
10000002:	b085      	sub	sp, #20
10000004:	af00      	add	r7, sp, #0
  int i, k;
  volatile int x = 0;
10000006:	2300      	movs	r3, #0
10000008:	607b      	str	r3, [r7, #4]

  for ( i = 0; i < NUM_NODES; i++ ) {
1000000a:	2300      	movs	r3, #0
1000000c:	60fb      	str	r3, [r7, #12]
1000000e:	e026      	b.n	1000005e <dijkstra_init_ccm+0x5e>

    for ( k = 0; k < NUM_NODES; k++ )
10000010:	2300      	movs	r3, #0
10000012:	60bb      	str	r3, [r7, #8]
10000014:	e01d      	b.n	10000052 <dijkstra_init_ccm+0x52>
      dijkstra_AdjMatrix[ i ][ k ] ^= x;
10000016:	6878      	ldr	r0, [r7, #4]
10000018:	491b      	ldr	r1, [pc, #108]	; (10000088 <dijkstra_init_ccm+0x88>)
1000001a:	68fa      	ldr	r2, [r7, #12]
1000001c:	4613      	mov	r3, r2
1000001e:	011b      	lsls	r3, r3, #4
10000020:	1a9b      	subs	r3, r3, r2
10000022:	009b      	lsls	r3, r3, #2
10000024:	18ca      	adds	r2, r1, r3
10000026:	68bb      	ldr	r3, [r7, #8]
10000028:	4413      	add	r3, r2
1000002a:	781b      	ldrb	r3, [r3, #0]
1000002c:	b25a      	sxtb	r2, r3
1000002e:	b243      	sxtb	r3, r0
10000030:	4053      	eors	r3, r2
10000032:	b25b      	sxtb	r3, r3
10000034:	b2d8      	uxtb	r0, r3
10000036:	4914      	ldr	r1, [pc, #80]	; (10000088 <dijkstra_init_ccm+0x88>)
10000038:	68fa      	ldr	r2, [r7, #12]
1000003a:	4613      	mov	r3, r2
1000003c:	011b      	lsls	r3, r3, #4
1000003e:	1a9b      	subs	r3, r3, r2
10000040:	009b      	lsls	r3, r3, #2
10000042:	18ca      	adds	r2, r1, r3
10000044:	68bb      	ldr	r3, [r7, #8]
10000046:	4413      	add	r3, r2
10000048:	4602      	mov	r2, r0
1000004a:	701a      	strb	r2, [r3, #0]
    for ( k = 0; k < NUM_NODES; k++ )
1000004c:	68bb      	ldr	r3, [r7, #8]
1000004e:	3301      	adds	r3, #1
10000050:	60bb      	str	r3, [r7, #8]
10000052:	68bb      	ldr	r3, [r7, #8]
10000054:	2b3b      	cmp	r3, #59	; 0x3b
10000056:	ddde      	ble.n	10000016 <dijkstra_init_ccm+0x16>
  for ( i = 0; i < NUM_NODES; i++ ) {
10000058:	68fb      	ldr	r3, [r7, #12]
1000005a:	3301      	adds	r3, #1
1000005c:	60fb      	str	r3, [r7, #12]
1000005e:	68fb      	ldr	r3, [r7, #12]
10000060:	2b3b      	cmp	r3, #59	; 0x3b
10000062:	ddd5      	ble.n	10000010 <dijkstra_init_ccm+0x10>
  }

  dijkstra_queueCount = 0;
10000064:	4b09      	ldr	r3, [pc, #36]	; (1000008c <dijkstra_init_ccm+0x8c>)
10000066:	2200      	movs	r2, #0
10000068:	601a      	str	r2, [r3, #0]
  dijkstra_queueNext = 0;
1000006a:	4b09      	ldr	r3, [pc, #36]	; (10000090 <dijkstra_init_ccm+0x90>)
1000006c:	2200      	movs	r2, #0
1000006e:	601a      	str	r2, [r3, #0]
  dijkstra_queueHead = ( struct _QITEM * )0;
10000070:	4b08      	ldr	r3, [pc, #32]	; (10000094 <dijkstra_init_ccm+0x94>)
10000072:	2200      	movs	r2, #0
10000074:	601a      	str	r2, [r3, #0]

  dijkstra_checksum = 0;
10000076:	4b08      	ldr	r3, [pc, #32]	; (10000098 <dijkstra_init_ccm+0x98>)
10000078:	2200      	movs	r2, #0
1000007a:	601a      	str	r2, [r3, #0]
}
1000007c:	bf00      	nop
1000007e:	3714      	adds	r7, #20
10000080:	46bd      	mov	sp, r7
10000082:	f85d 7b04 	ldr.w	r7, [sp], #4
10000086:	4770      	bx	lr
10000088:	20000000 	.word	0x20000000
1000008c:	20001018 	.word	0x20001018
10000090:	2000101c 	.word	0x2000101c
10000094:	20001020 	.word	0x20001020
10000098:	20004ea4 	.word	0x20004ea4

1000009c <dijkstra_return_ccm>:

int dijkstra_return_ccm( void )
{
1000009c:	b480      	push	{r7}
1000009e:	af00      	add	r7, sp, #0
  return ( ( dijkstra_checksum == 25 ) ? 0 : -1 );
100000a0:	4b06      	ldr	r3, [pc, #24]	; (100000bc <dijkstra_return_ccm+0x20>)
100000a2:	681b      	ldr	r3, [r3, #0]
100000a4:	2b19      	cmp	r3, #25
100000a6:	d101      	bne.n	100000ac <dijkstra_return_ccm+0x10>
100000a8:	2300      	movs	r3, #0
100000aa:	e001      	b.n	100000b0 <dijkstra_return_ccm+0x14>
100000ac:	f04f 33ff 	mov.w	r3, #4294967295
}
100000b0:	4618      	mov	r0, r3
100000b2:	46bd      	mov	sp, r7
100000b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100000b8:	4770      	bx	lr
100000ba:	bf00      	nop
100000bc:	20004ea4 	.word	0x20004ea4

100000c0 <dijkstra_enqueue_ccm>:

int dijkstra_enqueue_ccm( int node, int dist, int prev )
{
100000c0:	b480      	push	{r7}
100000c2:	b087      	sub	sp, #28
100000c4:	af00      	add	r7, sp, #0
100000c6:	60f8      	str	r0, [r7, #12]
100000c8:	60b9      	str	r1, [r7, #8]
100000ca:	607a      	str	r2, [r7, #4]
  struct _QITEM *newItem = &dijkstra_queueItems[ dijkstra_queueNext ];
100000cc:	4b1f      	ldr	r3, [pc, #124]	; (1000014c <dijkstra_enqueue_ccm+0x8c>)
100000ce:	681b      	ldr	r3, [r3, #0]
100000d0:	011b      	lsls	r3, r3, #4
100000d2:	4a1f      	ldr	r2, [pc, #124]	; (10000150 <dijkstra_enqueue_ccm+0x90>)
100000d4:	4413      	add	r3, r2
100000d6:	613b      	str	r3, [r7, #16]
  struct _QITEM *last = dijkstra_queueHead;
100000d8:	4b1e      	ldr	r3, [pc, #120]	; (10000154 <dijkstra_enqueue_ccm+0x94>)
100000da:	681b      	ldr	r3, [r3, #0]
100000dc:	617b      	str	r3, [r7, #20]

  if ( ++dijkstra_queueNext >= QUEUE_SIZE )
100000de:	4b1b      	ldr	r3, [pc, #108]	; (1000014c <dijkstra_enqueue_ccm+0x8c>)
100000e0:	681b      	ldr	r3, [r3, #0]
100000e2:	3301      	adds	r3, #1
100000e4:	4a19      	ldr	r2, [pc, #100]	; (1000014c <dijkstra_enqueue_ccm+0x8c>)
100000e6:	6013      	str	r3, [r2, #0]
100000e8:	4b18      	ldr	r3, [pc, #96]	; (1000014c <dijkstra_enqueue_ccm+0x8c>)
100000ea:	681b      	ldr	r3, [r3, #0]
100000ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100000f0:	db02      	blt.n	100000f8 <dijkstra_enqueue_ccm+0x38>
    return OUT_OF_MEMORY;
100000f2:	f04f 33ff 	mov.w	r3, #4294967295
100000f6:	e022      	b.n	1000013e <dijkstra_enqueue_ccm+0x7e>
  newItem->node = node;
100000f8:	693b      	ldr	r3, [r7, #16]
100000fa:	68fa      	ldr	r2, [r7, #12]
100000fc:	601a      	str	r2, [r3, #0]
  newItem->dist = dist;
100000fe:	693b      	ldr	r3, [r7, #16]
10000100:	68ba      	ldr	r2, [r7, #8]
10000102:	605a      	str	r2, [r3, #4]
  newItem->prev = prev;
10000104:	693b      	ldr	r3, [r7, #16]
10000106:	687a      	ldr	r2, [r7, #4]
10000108:	609a      	str	r2, [r3, #8]
  newItem->next = 0;
1000010a:	693b      	ldr	r3, [r7, #16]
1000010c:	2200      	movs	r2, #0
1000010e:	60da      	str	r2, [r3, #12]

  if ( !last )
10000110:	697b      	ldr	r3, [r7, #20]
10000112:	2b00      	cmp	r3, #0
10000114:	d106      	bne.n	10000124 <dijkstra_enqueue_ccm+0x64>
    dijkstra_queueHead = newItem;
10000116:	4a0f      	ldr	r2, [pc, #60]	; (10000154 <dijkstra_enqueue_ccm+0x94>)
10000118:	693b      	ldr	r3, [r7, #16]
1000011a:	6013      	str	r3, [r2, #0]
1000011c:	e009      	b.n	10000132 <dijkstra_enqueue_ccm+0x72>
  else {
    /* TODO: where does this magic loop bound come from? */

    while ( last->next )
      last = last->next;
1000011e:	697b      	ldr	r3, [r7, #20]
10000120:	68db      	ldr	r3, [r3, #12]
10000122:	617b      	str	r3, [r7, #20]
    while ( last->next )
10000124:	697b      	ldr	r3, [r7, #20]
10000126:	68db      	ldr	r3, [r3, #12]
10000128:	2b00      	cmp	r3, #0
1000012a:	d1f8      	bne.n	1000011e <dijkstra_enqueue_ccm+0x5e>
    last->next = newItem;
1000012c:	697b      	ldr	r3, [r7, #20]
1000012e:	693a      	ldr	r2, [r7, #16]
10000130:	60da      	str	r2, [r3, #12]
  }
  dijkstra_queueCount++;
10000132:	4b09      	ldr	r3, [pc, #36]	; (10000158 <dijkstra_enqueue_ccm+0x98>)
10000134:	681b      	ldr	r3, [r3, #0]
10000136:	3301      	adds	r3, #1
10000138:	4a07      	ldr	r2, [pc, #28]	; (10000158 <dijkstra_enqueue_ccm+0x98>)
1000013a:	6013      	str	r3, [r2, #0]
  return 0;
1000013c:	2300      	movs	r3, #0
}
1000013e:	4618      	mov	r0, r3
10000140:	371c      	adds	r7, #28
10000142:	46bd      	mov	sp, r7
10000144:	f85d 7b04 	ldr.w	r7, [sp], #4
10000148:	4770      	bx	lr
1000014a:	bf00      	nop
1000014c:	2000101c 	.word	0x2000101c
10000150:	20001024 	.word	0x20001024
10000154:	20001020 	.word	0x20001020
10000158:	20001018 	.word	0x20001018

1000015c <dijkstra_dequeue_ccm>:

void dijkstra_dequeue_ccm( int *node, int *dist, int *prev )
{
1000015c:	b480      	push	{r7}
1000015e:	b085      	sub	sp, #20
10000160:	af00      	add	r7, sp, #0
10000162:	60f8      	str	r0, [r7, #12]
10000164:	60b9      	str	r1, [r7, #8]
10000166:	607a      	str	r2, [r7, #4]
  if ( dijkstra_queueHead ) {
10000168:	4b11      	ldr	r3, [pc, #68]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
1000016a:	681b      	ldr	r3, [r3, #0]
1000016c:	2b00      	cmp	r3, #0
1000016e:	d018      	beq.n	100001a2 <dijkstra_dequeue_ccm+0x46>
    *node = dijkstra_queueHead->node;
10000170:	4b0f      	ldr	r3, [pc, #60]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
10000172:	681b      	ldr	r3, [r3, #0]
10000174:	681a      	ldr	r2, [r3, #0]
10000176:	68fb      	ldr	r3, [r7, #12]
10000178:	601a      	str	r2, [r3, #0]
    *dist = dijkstra_queueHead->dist;
1000017a:	4b0d      	ldr	r3, [pc, #52]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
1000017c:	681b      	ldr	r3, [r3, #0]
1000017e:	685a      	ldr	r2, [r3, #4]
10000180:	68bb      	ldr	r3, [r7, #8]
10000182:	601a      	str	r2, [r3, #0]
    *prev = dijkstra_queueHead->prev;
10000184:	4b0a      	ldr	r3, [pc, #40]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
10000186:	681b      	ldr	r3, [r3, #0]
10000188:	689a      	ldr	r2, [r3, #8]
1000018a:	687b      	ldr	r3, [r7, #4]
1000018c:	601a      	str	r2, [r3, #0]
    dijkstra_queueHead = dijkstra_queueHead->next;
1000018e:	4b08      	ldr	r3, [pc, #32]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
10000190:	681b      	ldr	r3, [r3, #0]
10000192:	68db      	ldr	r3, [r3, #12]
10000194:	4a06      	ldr	r2, [pc, #24]	; (100001b0 <dijkstra_dequeue_ccm+0x54>)
10000196:	6013      	str	r3, [r2, #0]
    dijkstra_queueCount--;
10000198:	4b06      	ldr	r3, [pc, #24]	; (100001b4 <dijkstra_dequeue_ccm+0x58>)
1000019a:	681b      	ldr	r3, [r3, #0]
1000019c:	3b01      	subs	r3, #1
1000019e:	4a05      	ldr	r2, [pc, #20]	; (100001b4 <dijkstra_dequeue_ccm+0x58>)
100001a0:	6013      	str	r3, [r2, #0]
  }
}
100001a2:	bf00      	nop
100001a4:	3714      	adds	r7, #20
100001a6:	46bd      	mov	sp, r7
100001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100001ac:	4770      	bx	lr
100001ae:	bf00      	nop
100001b0:	20001020 	.word	0x20001020
100001b4:	20001018 	.word	0x20001018

100001b8 <dijkstra_qcount_ccm>:

int dijkstra_qcount_ccm( void )
{
100001b8:	b480      	push	{r7}
100001ba:	af00      	add	r7, sp, #0
  return ( dijkstra_queueCount );
100001bc:	4b03      	ldr	r3, [pc, #12]	; (100001cc <dijkstra_qcount_ccm+0x14>)
100001be:	681b      	ldr	r3, [r3, #0]
}
100001c0:	4618      	mov	r0, r3
100001c2:	46bd      	mov	sp, r7
100001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100001c8:	4770      	bx	lr
100001ca:	bf00      	nop
100001cc:	20001018 	.word	0x20001018

100001d0 <dijkstra_find_ccm>:

int dijkstra_find_ccm( int chStart, int chEnd )
{
100001d0:	b580      	push	{r7, lr}
100001d2:	b088      	sub	sp, #32
100001d4:	af00      	add	r7, sp, #0
100001d6:	6078      	str	r0, [r7, #4]
100001d8:	6039      	str	r1, [r7, #0]
  int ch;
  int prev, node = 0;
100001da:	2300      	movs	r3, #0
100001dc:	60fb      	str	r3, [r7, #12]
  int cost, dist = 0;
100001de:	2300      	movs	r3, #0
100001e0:	60bb      	str	r3, [r7, #8]
  int i;


  for ( ch = 0; ch < NUM_NODES; ch++ ) {
100001e2:	2300      	movs	r3, #0
100001e4:	61fb      	str	r3, [r7, #28]
100001e6:	e00f      	b.n	10000208 <dijkstra_find_ccm+0x38>
    dijkstra_rgnNodes[ ch ].dist = NONE;
100001e8:	4a44      	ldr	r2, [pc, #272]	; (100002fc <dijkstra_find_ccm+0x12c>)
100001ea:	69fb      	ldr	r3, [r7, #28]
100001ec:	f242 710f 	movw	r1, #9999	; 0x270f
100001f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    dijkstra_rgnNodes[ ch ].prev = NONE;
100001f4:	4a41      	ldr	r2, [pc, #260]	; (100002fc <dijkstra_find_ccm+0x12c>)
100001f6:	69fb      	ldr	r3, [r7, #28]
100001f8:	00db      	lsls	r3, r3, #3
100001fa:	4413      	add	r3, r2
100001fc:	f242 720f 	movw	r2, #9999	; 0x270f
10000200:	605a      	str	r2, [r3, #4]
  for ( ch = 0; ch < NUM_NODES; ch++ ) {
10000202:	69fb      	ldr	r3, [r7, #28]
10000204:	3301      	adds	r3, #1
10000206:	61fb      	str	r3, [r7, #28]
10000208:	69fb      	ldr	r3, [r7, #28]
1000020a:	2b3b      	cmp	r3, #59	; 0x3b
1000020c:	ddec      	ble.n	100001e8 <dijkstra_find_ccm+0x18>
  }

  if ( chStart == chEnd ) {
1000020e:	687a      	ldr	r2, [r7, #4]
10000210:	683b      	ldr	r3, [r7, #0]
10000212:	429a      	cmp	r2, r3
10000214:	d06c      	beq.n	100002f0 <dijkstra_find_ccm+0x120>
  } else {
    dijkstra_rgnNodes[ chStart ].dist = 0;
10000216:	4a39      	ldr	r2, [pc, #228]	; (100002fc <dijkstra_find_ccm+0x12c>)
10000218:	687b      	ldr	r3, [r7, #4]
1000021a:	2100      	movs	r1, #0
1000021c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    dijkstra_rgnNodes[ chStart ].prev = NONE;
10000220:	4a36      	ldr	r2, [pc, #216]	; (100002fc <dijkstra_find_ccm+0x12c>)
10000222:	687b      	ldr	r3, [r7, #4]
10000224:	00db      	lsls	r3, r3, #3
10000226:	4413      	add	r3, r2
10000228:	f242 720f 	movw	r2, #9999	; 0x270f
1000022c:	605a      	str	r2, [r3, #4]

    if ( dijkstra_enqueue_ccm ( chStart, 0, NONE ) == OUT_OF_MEMORY )
1000022e:	f242 720f 	movw	r2, #9999	; 0x270f
10000232:	2100      	movs	r1, #0
10000234:	6878      	ldr	r0, [r7, #4]
10000236:	f7ff ff43 	bl	100000c0 <dijkstra_enqueue_ccm>
1000023a:	4603      	mov	r3, r0
1000023c:	f1b3 3fff 	cmp.w	r3, #4294967295
10000240:	d151      	bne.n	100002e6 <dijkstra_find_ccm+0x116>
      return OUT_OF_MEMORY;
10000242:	f04f 33ff 	mov.w	r3, #4294967295
10000246:	e054      	b.n	100002f2 <dijkstra_find_ccm+0x122>

    /* TODO: where does this magic loop bound come from? */

    while ( dijkstra_qcount_ccm() > 0 ) {
      dijkstra_dequeue_ccm ( &node, &dist, &prev );
10000248:	f107 0210 	add.w	r2, r7, #16
1000024c:	f107 0108 	add.w	r1, r7, #8
10000250:	f107 030c 	add.w	r3, r7, #12
10000254:	4618      	mov	r0, r3
10000256:	f7ff ff81 	bl	1000015c <dijkstra_dequeue_ccm>

      for ( i = 0; i < NUM_NODES; i++ ) {
1000025a:	2300      	movs	r3, #0
1000025c:	61bb      	str	r3, [r7, #24]
1000025e:	e03f      	b.n	100002e0 <dijkstra_find_ccm+0x110>
        if ( ( cost = dijkstra_AdjMatrix[ node ][ i ] ) != NONE ) {
10000260:	68fa      	ldr	r2, [r7, #12]
10000262:	4927      	ldr	r1, [pc, #156]	; (10000300 <dijkstra_find_ccm+0x130>)
10000264:	4613      	mov	r3, r2
10000266:	011b      	lsls	r3, r3, #4
10000268:	1a9b      	subs	r3, r3, r2
1000026a:	009b      	lsls	r3, r3, #2
1000026c:	18ca      	adds	r2, r1, r3
1000026e:	69bb      	ldr	r3, [r7, #24]
10000270:	4413      	add	r3, r2
10000272:	781b      	ldrb	r3, [r3, #0]
10000274:	617b      	str	r3, [r7, #20]
10000276:	697b      	ldr	r3, [r7, #20]
10000278:	f242 720f 	movw	r2, #9999	; 0x270f
1000027c:	4293      	cmp	r3, r2
1000027e:	d02c      	beq.n	100002da <dijkstra_find_ccm+0x10a>
          if ( ( NONE == dijkstra_rgnNodes[ i ].dist ) ||
10000280:	4a1e      	ldr	r2, [pc, #120]	; (100002fc <dijkstra_find_ccm+0x12c>)
10000282:	69bb      	ldr	r3, [r7, #24]
10000284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
10000288:	f242 720f 	movw	r2, #9999	; 0x270f
1000028c:	4293      	cmp	r3, r2
1000028e:	d008      	beq.n	100002a2 <dijkstra_find_ccm+0xd2>
               ( dijkstra_rgnNodes[ i ].dist > ( cost + dist ) ) ) {
10000290:	4a1a      	ldr	r2, [pc, #104]	; (100002fc <dijkstra_find_ccm+0x12c>)
10000292:	69bb      	ldr	r3, [r7, #24]
10000294:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
10000298:	68b9      	ldr	r1, [r7, #8]
1000029a:	697b      	ldr	r3, [r7, #20]
1000029c:	440b      	add	r3, r1
          if ( ( NONE == dijkstra_rgnNodes[ i ].dist ) ||
1000029e:	429a      	cmp	r2, r3
100002a0:	dd1b      	ble.n	100002da <dijkstra_find_ccm+0x10a>
            dijkstra_rgnNodes[ i ].dist = dist + cost;
100002a2:	68ba      	ldr	r2, [r7, #8]
100002a4:	697b      	ldr	r3, [r7, #20]
100002a6:	441a      	add	r2, r3
100002a8:	4914      	ldr	r1, [pc, #80]	; (100002fc <dijkstra_find_ccm+0x12c>)
100002aa:	69bb      	ldr	r3, [r7, #24]
100002ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            dijkstra_rgnNodes[ i ].prev = node;
100002b0:	68fa      	ldr	r2, [r7, #12]
100002b2:	4912      	ldr	r1, [pc, #72]	; (100002fc <dijkstra_find_ccm+0x12c>)
100002b4:	69bb      	ldr	r3, [r7, #24]
100002b6:	00db      	lsls	r3, r3, #3
100002b8:	440b      	add	r3, r1
100002ba:	605a      	str	r2, [r3, #4]
            if ( dijkstra_enqueue_ccm ( i, dist + cost, node ) == OUT_OF_MEMORY )
100002bc:	68ba      	ldr	r2, [r7, #8]
100002be:	697b      	ldr	r3, [r7, #20]
100002c0:	4413      	add	r3, r2
100002c2:	68fa      	ldr	r2, [r7, #12]
100002c4:	4619      	mov	r1, r3
100002c6:	69b8      	ldr	r0, [r7, #24]
100002c8:	f7ff fefa 	bl	100000c0 <dijkstra_enqueue_ccm>
100002cc:	4603      	mov	r3, r0
100002ce:	f1b3 3fff 	cmp.w	r3, #4294967295
100002d2:	d102      	bne.n	100002da <dijkstra_find_ccm+0x10a>
              return OUT_OF_MEMORY;
100002d4:	f04f 33ff 	mov.w	r3, #4294967295
100002d8:	e00b      	b.n	100002f2 <dijkstra_find_ccm+0x122>
      for ( i = 0; i < NUM_NODES; i++ ) {
100002da:	69bb      	ldr	r3, [r7, #24]
100002dc:	3301      	adds	r3, #1
100002de:	61bb      	str	r3, [r7, #24]
100002e0:	69bb      	ldr	r3, [r7, #24]
100002e2:	2b3b      	cmp	r3, #59	; 0x3b
100002e4:	ddbc      	ble.n	10000260 <dijkstra_find_ccm+0x90>
    while ( dijkstra_qcount_ccm() > 0 ) {
100002e6:	f7ff ff67 	bl	100001b8 <dijkstra_qcount_ccm>
100002ea:	4603      	mov	r3, r0
100002ec:	2b00      	cmp	r3, #0
100002ee:	dcab      	bgt.n	10000248 <dijkstra_find_ccm+0x78>
          }
        }
      }
    }
  }
  return 0;
100002f0:	2300      	movs	r3, #0
}
100002f2:	4618      	mov	r0, r3
100002f4:	3720      	adds	r7, #32
100002f6:	46bd      	mov	sp, r7
100002f8:	bd80      	pop	{r7, pc}
100002fa:	bf00      	nop
100002fc:	20000e38 	.word	0x20000e38
10000300:	20000000 	.word	0x20000000

10000304 <dijkstra_main_ccm>:

void  dijkstra_main_ccm( void )
{
10000304:	b580      	push	{r7, lr}
10000306:	b082      	sub	sp, #8
10000308:	af00      	add	r7, sp, #0
  int i, j;

  /* finds 20 shortest paths between nodes */
  for ( i = 0, j = NUM_NODES / 2; i < 20; i++, j++ ) {
1000030a:	2300      	movs	r3, #0
1000030c:	607b      	str	r3, [r7, #4]
1000030e:	231e      	movs	r3, #30
10000310:	603b      	str	r3, [r7, #0]
10000312:	e02d      	b.n	10000370 <dijkstra_main_ccm+0x6c>
    j = j % NUM_NODES;
10000314:	683a      	ldr	r2, [r7, #0]
10000316:	4b19      	ldr	r3, [pc, #100]	; (1000037c <dijkstra_main_ccm+0x78>)
10000318:	fb83 1302 	smull	r1, r3, r3, r2
1000031c:	4413      	add	r3, r2
1000031e:	1159      	asrs	r1, r3, #5
10000320:	17d3      	asrs	r3, r2, #31
10000322:	1ac9      	subs	r1, r1, r3
10000324:	460b      	mov	r3, r1
10000326:	011b      	lsls	r3, r3, #4
10000328:	1a5b      	subs	r3, r3, r1
1000032a:	009b      	lsls	r3, r3, #2
1000032c:	1ad3      	subs	r3, r2, r3
1000032e:	603b      	str	r3, [r7, #0]
    if ( dijkstra_find_ccm( i, j ) == OUT_OF_MEMORY ) {
10000330:	6839      	ldr	r1, [r7, #0]
10000332:	6878      	ldr	r0, [r7, #4]
10000334:	f7ff ff4c 	bl	100001d0 <dijkstra_find_ccm>
10000338:	4603      	mov	r3, r0
1000033a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000033e:	d105      	bne.n	1000034c <dijkstra_main_ccm+0x48>
      dijkstra_checksum += OUT_OF_MEMORY;
10000340:	4b0f      	ldr	r3, [pc, #60]	; (10000380 <dijkstra_main_ccm+0x7c>)
10000342:	681b      	ldr	r3, [r3, #0]
10000344:	3b01      	subs	r3, #1
10000346:	4a0e      	ldr	r2, [pc, #56]	; (10000380 <dijkstra_main_ccm+0x7c>)
10000348:	6013      	str	r3, [r2, #0]
      return;
1000034a:	e014      	b.n	10000376 <dijkstra_main_ccm+0x72>
    } else
      dijkstra_checksum += dijkstra_rgnNodes[ j ].dist;
1000034c:	4a0d      	ldr	r2, [pc, #52]	; (10000384 <dijkstra_main_ccm+0x80>)
1000034e:	683b      	ldr	r3, [r7, #0]
10000350:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
10000354:	4b0a      	ldr	r3, [pc, #40]	; (10000380 <dijkstra_main_ccm+0x7c>)
10000356:	681b      	ldr	r3, [r3, #0]
10000358:	4413      	add	r3, r2
1000035a:	4a09      	ldr	r2, [pc, #36]	; (10000380 <dijkstra_main_ccm+0x7c>)
1000035c:	6013      	str	r3, [r2, #0]
    dijkstra_queueNext = 0;
1000035e:	4b0a      	ldr	r3, [pc, #40]	; (10000388 <dijkstra_main_ccm+0x84>)
10000360:	2200      	movs	r2, #0
10000362:	601a      	str	r2, [r3, #0]
  for ( i = 0, j = NUM_NODES / 2; i < 20; i++, j++ ) {
10000364:	687b      	ldr	r3, [r7, #4]
10000366:	3301      	adds	r3, #1
10000368:	607b      	str	r3, [r7, #4]
1000036a:	683b      	ldr	r3, [r7, #0]
1000036c:	3301      	adds	r3, #1
1000036e:	603b      	str	r3, [r7, #0]
10000370:	687b      	ldr	r3, [r7, #4]
10000372:	2b13      	cmp	r3, #19
10000374:	ddce      	ble.n	10000314 <dijkstra_main_ccm+0x10>
  }
}
10000376:	3708      	adds	r7, #8
10000378:	46bd      	mov	sp, r7
1000037a:	bd80      	pop	{r7, pc}
1000037c:	88888889 	.word	0x88888889
10000380:	20004ea4 	.word	0x20004ea4
10000384:	20000e38 	.word	0x20000e38
10000388:	2000101c 	.word	0x2000101c

1000038c <main_dij_ccm>:

int main_dij_ccm( void )
{
1000038c:	b580      	push	{r7, lr}
1000038e:	af00      	add	r7, sp, #0
  dijkstra_init_ccm();
10000390:	f7ff fe36 	bl	10000000 <dijkstra_init_ccm>
  dijkstra_main_ccm();
10000394:	f7ff ffb6 	bl	10000304 <dijkstra_main_ccm>

  return ( dijkstra_return_ccm() );
10000398:	f7ff fe80 	bl	1000009c <dijkstra_return_ccm>
1000039c:	4603      	mov	r3, r0
}
1000039e:	4618      	mov	r0, r3
100003a0:	bd80      	pop	{r7, pc}
100003a2:	bf00      	nop
