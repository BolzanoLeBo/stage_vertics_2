
bubble_sort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002818  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a24  08003a24  000300c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003a24  08003a24  000300c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a24  08003a24  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .ram2         00001060  20004000  08003af8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 10 .ccmram       000000c0  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .ccmramdata   00000000  100000c0  100000c0  000300c0  2**0
                  CONTENTS
 12 .bss          00000050  200000cc  200000cc  000300cc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000011c  2000011c  000300cc  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000091a3  00000000  00000000  00030133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001e92  00000000  00000000  000392d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000a10  00000000  00000000  0003b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000077e  00000000  00000000  0003bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001d3a9  00000000  00000000  0003c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000af97  00000000  00000000  0005969f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b6d1d  00000000  00000000  00064636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000026fc  00000000  00000000  0011b354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  0011da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029bc 	.word	0x080029bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	080029bc 	.word	0x080029bc

08000218 <BubbleSort>:
}
void BubbleSort(int Array[])
/*
 * Sorts an array of integers of size NUMELEMS in ascending order.
 */
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]
   int Temp, Index, i;
   for (i = 1; i <= NUMELEMS-1; i++)
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e040      	b.n	80002ac <BubbleSort+0x94>
   {
      Sorted = TRUE;
 800022a:	2301      	movs	r3, #1
 800022c:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	e02f      	b.n	8000294 <BubbleSort+0x7c>
         if (Index > NUMELEMS-i)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800023a:	693a      	ldr	r2, [r7, #16]
 800023c:	429a      	cmp	r2, r3
 800023e:	dc2e      	bgt.n	800029e <BubbleSort+0x86>
         {
           break;
         }
         if (Array[Index] > Array[Index + 1])
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	3301      	adds	r3, #1
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	440b      	add	r3, r1
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	429a      	cmp	r2, r3
 8000258:	dd19      	ble.n	800028e <BubbleSort+0x76>
         {
            Temp = Array[Index];
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	441a      	add	r2, r3
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	6879      	ldr	r1, [r7, #4]
 8000276:	440b      	add	r3, r1
 8000278:	6812      	ldr	r2, [r2, #0]
 800027a:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	3301      	adds	r3, #1
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	3301      	adds	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800029a:	dbcb      	blt.n	8000234 <BubbleSort+0x1c>
 800029c:	e000      	b.n	80002a0 <BubbleSort+0x88>
           break;
 800029e:	bf00      	nop
         }
      }

      if (Sorted)
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d107      	bne.n	80002b6 <BubbleSort+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b2:	dbba      	blt.n	800022a <BubbleSort+0x12>
      {
         break;
      }
   }
}
 80002b4:	e000      	b.n	80002b8 <BubbleSort+0xa0>
         break;
 80002b6:	bf00      	nop
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <bubble_main>:
{
  BubbleSortRAM2(srcArrayInRAM);
}

void bubble_main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  BubbleSort(srcArrayInRAM);
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <bubble_main+0x10>)
 80002ca:	f7ff ffa5 	bl	8000218 <BubbleSort>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200040c0 	.word	0x200040c0

080002d8 <init_tab>:
void init_tab()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  memcpy(srcArrayInRAM, srcArrayInFlash, NUMELEMS*sizeof(int));
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <init_tab+0x1c>)
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <init_tab+0x20>)
 80002e0:	4610      	mov	r0, r2
 80002e2:	4619      	mov	r1, r3
 80002e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80002e8:	461a      	mov	r2, r3
 80002ea:	f002 fb59 	bl	80029a0 <memcpy>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200040c0 	.word	0x200040c0
 80002f8:	08002a74 	.word	0x08002a74

080002fc <Error>:
#include "freq_manage.h"
int current_frequency;
int pll_on;

void Error(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
}
 8000302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000304:	e7fe      	b.n	8000304 <Error+0x8>
	...

08000308 <Sleep>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void Sleep(int time, RTC_HandleTypeDef* hrtc_addr)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  uint32_t counter = (uint32_t) ((float) time*2);/*divide by (16/32)*/
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	ee07 3a90 	vmov	s15, r3
 8000318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800031c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000324:	ee17 3a90 	vmov	r3, s15
 8000328:	60fb      	str	r3, [r7, #12]

  HAL_SuspendTick();
 800032a:	f000 fe0b 	bl	8000f44 <HAL_SuspendTick>

  HAL_RTCEx_SetWakeUpTimer_IT(hrtc_addr, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800032e:	2200      	movs	r2, #0
 8000330:	68f9      	ldr	r1, [r7, #12]
 8000332:	6838      	ldr	r0, [r7, #0]
 8000334:	f002 f9fc 	bl	8002730 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Enter sleep or stop mode */
  //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000338:	2001      	movs	r0, #1
 800033a:	f001 f99b 	bl	8001674 <HAL_PWREx_EnterSTOP1Mode>
  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* Wake up*/
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc_addr);
 800033e:	6838      	ldr	r0, [r7, #0]
 8000340:	f002 fa7c 	bl	800283c <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 8000344:	f000 fe0e 	bl	8000f64 <HAL_ResumeTick>
  //When wake up from STOP Sysclk source is HSI
  if (pll_on)
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <Sleep+0x60>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d005      	beq.n	800035c <Sleep+0x54>
    {
      change_freq(current_frequency);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <Sleep+0x64>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f80b 	bl	8000370 <change_freq>
    }
  else
    {
      disable_pll();
    }
}
 800035a:	e001      	b.n	8000360 <Sleep+0x58>
      disable_pll();
 800035c:	f000 f974 	bl	8000648 <disable_pll>
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200000ec 	.word	0x200000ec
 800036c:	200000e8 	.word	0x200000e8

08000370 <change_freq>:
void change_freq(int f)
{
 8000370:	b5b0      	push	{r4, r5, r7, lr}
 8000372:	b0ae      	sub	sp, #184	; 0xb8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  pll_on = 1;
 8000378:	4b6a      	ldr	r3, [pc, #424]	; (8000524 <change_freq+0x1b4>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
  int latency = FLASH_LATENCY_4;
 800037e:	2304      	movs	r3, #4
 8000380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  int latency_tab[5] = {FLASH_LATENCY_0,FLASH_LATENCY_1,FLASH_LATENCY_2,FLASH_LATENCY_3,FLASH_LATENCY_4};
 8000384:	4b68      	ldr	r3, [pc, #416]	; (8000528 <change_freq+0x1b8>)
 8000386:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800038a:	461d      	mov	r5, r3
 800038c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000390:	682b      	ldr	r3, [r5, #0]
 8000392:	6023      	str	r3, [r4, #0]
  int freq_scale_boost[5] = {34,68,102,136,85};
 8000394:	4b65      	ldr	r3, [pc, #404]	; (800052c <change_freq+0x1bc>)
 8000396:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	682b      	ldr	r3, [r5, #0]
 80003a2:	6023      	str	r3, [r4, #0]
  int freq_scale_normal[5] = {30,60,90,120,150};
 80003a4:	4b62      	ldr	r3, [pc, #392]	; (8000530 <change_freq+0x1c0>)
 80003a6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80003aa:	461d      	mov	r5, r3
 80003ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b0:	682b      	ldr	r3, [r5, #0]
 80003b2:	6023      	str	r3, [r4, #0]
  int freq_scale_low[5] = {12,24,26,26,26};
 80003b4:	4b5f      	ldr	r3, [pc, #380]	; (8000534 <change_freq+0x1c4>)
 80003b6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80003ba:	461d      	mov	r5, r3
 80003bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c0:	682b      	ldr	r3, [r5, #0]
 80003c2:	6023      	str	r3, [r4, #0]
  //if we are in boost mode there is not the same wait states
  int* selector;
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80003c4:	4b5c      	ldr	r3, [pc, #368]	; (8000538 <change_freq+0x1c8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80003cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003d0:	d10a      	bne.n	80003e8 <change_freq+0x78>
  {
    if (f <= 26)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b1a      	cmp	r3, #26
 80003d6:	dc04      	bgt.n	80003e2 <change_freq+0x72>
    {
      selector = freq_scale_low;
 80003d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80003e0:	e012      	b.n	8000408 <change_freq+0x98>
    }
    else
    {
      Error();
 80003e2:	f7ff ff8b 	bl	80002fc <Error>
 80003e6:	e00f      	b.n	8000408 <change_freq+0x98>
    }
  }

  else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE))
 80003e8:	4b53      	ldr	r3, [pc, #332]	; (8000538 <change_freq+0x1c8>)
 80003ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d004      	beq.n	8000400 <change_freq+0x90>
  {
    selector = freq_scale_normal;
 80003f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80003fe:	e003      	b.n	8000408 <change_freq+0x98>
  }
  else
  {
    selector = freq_scale_boost;
 8000400:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  }

  int mul = f/2;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	0fda      	lsrs	r2, r3, #31
 800040c:	4413      	add	r3, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000424:	f107 030c 	add.w	r3, r7, #12
 8000428:	2238      	movs	r2, #56	; 0x38
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fa8b 	bl	8002948 <memset>
  for (int i = 4; i >= 0; i--)
 8000432:	2304      	movs	r3, #4
 8000434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000438:	e018      	b.n	800046c <change_freq+0xfc>
  {
    if (mul <= selector[i])
 800043a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000444:	4413      	add	r3, r2
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800044c:	429a      	cmp	r2, r3
 800044e:	dc08      	bgt.n	8000462 <change_freq+0xf2>
    {
      latency = latency_tab[i];
 8000450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	33b8      	adds	r3, #184	; 0xb8
 8000458:	443b      	add	r3, r7
 800045a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  for (int i = 4; i >= 0; i--)
 8000462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000466:	3b01      	subs	r3, #1
 8000468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800046c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000470:	2b00      	cmp	r3, #0
 8000472:	dae2      	bge.n	800043a <change_freq+0xca>
    }
  }

  /* -1- Select HSI as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000474:	2301      	movs	r3, #1
 8000476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000478:	2301      	movs	r3, #1
 800047a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 800047c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000480:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fc38 	bl	8001cfc <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <change_freq+0x126>
  {
    /* Initialization Error */
    Error();
 8000492:	f7ff ff33 	bl	80002fc <Error>
  }
  /* -2- Enable HSI  Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	2302      	movs	r3, #2
 8000498:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800049e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a0:	2340      	movs	r3, #64	; 0x40
 80004a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	2302      	movs	r3, #2
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a8:	2302      	movs	r3, #2
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (f <= 42)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b2a      	cmp	r3, #42	; 0x2a
 80004b0:	dc04      	bgt.n	80004bc <change_freq+0x14c>
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80004b2:	2308      	movs	r3, #8
 80004b4:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	633b      	str	r3, [r7, #48]	; 0x30
 80004ba:	e003      	b.n	80004c4 <change_freq+0x154>
  }
  else
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004bc:	2302      	movs	r3, #2
 80004be:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80004c0:	2304      	movs	r3, #4
 80004c2:	633b      	str	r3, [r7, #48]	; 0x30
  }
  RCC_OscInitStruct.PLL.PLLN = mul;
 80004c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 f8f8 	bl	80016cc <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <change_freq+0x176>
  {
    /* Initialization Error */
    Error();
 80004e2:	f7ff ff0b 	bl	80002fc <Error>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2303      	movs	r3, #3
 80004ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 80004fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80004fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fbf9 	bl	8001cfc <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <change_freq+0x1a4>
  {
    /* Initialization Error */
    Error();
 8000510:	f7ff fef4 	bl	80002fc <Error>
  }
  current_frequency = f;
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <change_freq+0x1cc>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]
}
 800051a:	bf00      	nop
 800051c:	37b8      	adds	r7, #184	; 0xb8
 800051e:	46bd      	mov	sp, r7
 8000520:	bdb0      	pop	{r4, r5, r7, pc}
 8000522:	bf00      	nop
 8000524:	200000ec 	.word	0x200000ec
 8000528:	080029f0 	.word	0x080029f0
 800052c:	08002a04 	.word	0x08002a04
 8000530:	08002a18 	.word	0x08002a18
 8000534:	08002a2c 	.word	0x08002a2c
 8000538:	40007000 	.word	0x40007000
 800053c:	200000e8 	.word	0x200000e8

08000540 <range1_to_range2>:

void range1_to_range2()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <range1_to_range2+0x7c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800054e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000552:	d02e      	beq.n	80005b2 <range1_to_range2+0x72>
  {
    //Reduce the system frequency to a value lower than 26 MHz
    change_freq(26);
 8000554:	201a      	movs	r0, #26
 8000556:	f7ff ff0b 	bl	8000370 <change_freq>
    //the system clock must be divided by 2 using the AHB prescaler
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_0 );
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fd63 	bl	8002038 <HAL_RCC_GetClockConfig>
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	60fb      	str	r3, [r7, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fbbe 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <range1_to_range2+0x4a>
    {
      /* Initialization Error */
      Error();
 8000586:	f7ff feb9 	bl	80002fc <Error>
    }
    //Program the VOS bits to “10�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <range1_to_range2+0x7c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <range1_to_range2+0x7c>)
 8000594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000598:	6013      	str	r3, [r2, #0]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
    //Adjust number of wait states according new frequency target in Range 2
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2102      	movs	r1, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fbaa 	bl	8001cfc <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <range1_to_range2+0x72>
    {
      /* Initialization Error */
      Error();
 80005ae:	f7ff fea5 	bl	80002fc <Error>
    }
  }
}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40007000 	.word	0x40007000

080005c0 <range2_to_range1>:

void range2_to_range1()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <range2_to_range1+0x50>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d0:	d11b      	bne.n	800060a <range2_to_range1+0x4a>
  {
    //Program the VOS bits to “01�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <range2_to_range1+0x50>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <range2_to_range1+0x50>)
 80005dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e0:	6013      	str	r3, [r2, #0]
    //Wait until the VOSF flag is cleared in the PWR_SR2 register
    while (READ_BIT(PWR->SR2, PWR_SR2_VOSF))
 80005e2:	bf00      	nop
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <range2_to_range1+0x50>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f9      	bne.n	80005e4 <range2_to_range1+0x24>
    {
      ;
    }
    //Adjust number of wait states according new frequency target in Range 1
    SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <range2_to_range1+0x50>)
 80005f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <range2_to_range1+0x50>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    change_freq(current_frequency);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <range2_to_range1+0x54>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff feb3 	bl	8000370 <change_freq>
  }
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40007000 	.word	0x40007000
 8000614:	200000e8 	.word	0x200000e8

08000618 <boost_mode>:

void boost_mode()
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <boost_mode+0x2c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000628:	d107      	bne.n	800063a <boost_mode+0x22>
  {
    CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <boost_mode+0x2c>)
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <boost_mode+0x2c>)
 8000632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000636:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40007000 	.word	0x40007000

08000648 <disable_pll>:

void disable_pll()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  pll_on = 0;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <disable_pll+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  /* -1- Select HSI as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000664:	2301      	movs	r3, #1
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2301      	movs	r3, #1
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fb42 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <disable_pll+0x3a>
  {
    /* Initialization Error */
    Error();
 800067e:	f7ff fe3d 	bl	80002fc <Error>
  }
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2238      	movs	r2, #56	; 0x38
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f95d 	bl	8002948 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f819 	bl	80016cc <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <disable_pll+0x5c>
  {
    /* Initialization Error */
    Error();
 80006a0:	f7ff fe2c 	bl	80002fc <Error>
  }

}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000ec 	.word	0x200000ec

080006b0 <tested_code>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tested_code()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0

  int nb_ex = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	603b      	str	r3, [r7, #0]

  //CACHE ON PREFETCH OFF CODE FLASH
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006ba:	4b80      	ldr	r3, [pc, #512]	; (80008bc <tested_code+0x20c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <tested_code+0x20c>)
 80006c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006c4:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <tested_code+0x20c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a7c      	ldr	r2, [pc, #496]	; (80008bc <tested_code+0x20c>)
 80006cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d0:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 80006d2:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <tested_code+0x20c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a79      	ldr	r2, [pc, #484]	; (80008bc <tested_code+0x20c>)
 80006d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006dc:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	e00a      	b.n	80006fa <tested_code+0x4a>
  {
    init_tab();
 80006e4:	f7ff fdf8 	bl	80002d8 <init_tab>
    bubble_main();
 80006e8:	f7ff fdec 	bl	80002c4 <bubble_main>
    Sleep(10, &hrtc);
 80006ec:	4974      	ldr	r1, [pc, #464]	; (80008c0 <tested_code+0x210>)
 80006ee:	200a      	movs	r0, #10
 80006f0:	f7ff fe0a 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	dbf0      	blt.n	80006e4 <tested_code+0x34>
  }


  //CACHE OFF PREFETCH OFF CODE FLASH
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000702:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <tested_code+0x20c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a6d      	ldr	r2, [pc, #436]	; (80008bc <tested_code+0x20c>)
 8000708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800070c:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800070e:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <tested_code+0x20c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a6a      	ldr	r2, [pc, #424]	; (80008bc <tested_code+0x20c>)
 8000714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000718:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 800071a:	4b68      	ldr	r3, [pc, #416]	; (80008bc <tested_code+0x20c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <tested_code+0x20c>)
 8000720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000724:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	e00a      	b.n	8000742 <tested_code+0x92>
  {
    init_tab();
 800072c:	f7ff fdd4 	bl	80002d8 <init_tab>
    bubble_main();
 8000730:	f7ff fdc8 	bl	80002c4 <bubble_main>
    Sleep(10, &hrtc);
 8000734:	4962      	ldr	r1, [pc, #392]	; (80008c0 <tested_code+0x210>)
 8000736:	200a      	movs	r0, #10
 8000738:	f7ff fde6 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	3301      	adds	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	429a      	cmp	r2, r3
 8000748:	dbf0      	blt.n	800072c <tested_code+0x7c>
  }


  //CACHE OFF PREFETCH ON CODE FLASH
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800074a:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <tested_code+0x20c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a5b      	ldr	r2, [pc, #364]	; (80008bc <tested_code+0x20c>)
 8000750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000754:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000756:	4b59      	ldr	r3, [pc, #356]	; (80008bc <tested_code+0x20c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a58      	ldr	r2, [pc, #352]	; (80008bc <tested_code+0x20c>)
 800075c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000760:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000762:	4b56      	ldr	r3, [pc, #344]	; (80008bc <tested_code+0x20c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a55      	ldr	r2, [pc, #340]	; (80008bc <tested_code+0x20c>)
 8000768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076c:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	e00a      	b.n	800078a <tested_code+0xda>
  {
    init_tab();
 8000774:	f7ff fdb0 	bl	80002d8 <init_tab>
    bubble_main();
 8000778:	f7ff fda4 	bl	80002c4 <bubble_main>
    Sleep(10, &hrtc);
 800077c:	4950      	ldr	r1, [pc, #320]	; (80008c0 <tested_code+0x210>)
 800077e:	200a      	movs	r0, #10
 8000780:	f7ff fdc2 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	dbf0      	blt.n	8000774 <tested_code+0xc4>
  }


  //CACHE ON PREFETCH ON CODE FLASH
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000792:	4b4a      	ldr	r3, [pc, #296]	; (80008bc <tested_code+0x20c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a49      	ldr	r2, [pc, #292]	; (80008bc <tested_code+0x20c>)
 8000798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079c:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <tested_code+0x20c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a46      	ldr	r2, [pc, #280]	; (80008bc <tested_code+0x20c>)
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007aa:	4b44      	ldr	r3, [pc, #272]	; (80008bc <tested_code+0x20c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a43      	ldr	r2, [pc, #268]	; (80008bc <tested_code+0x20c>)
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	e00a      	b.n	80007d2 <tested_code+0x122>
  {
    init_tab();
 80007bc:	f7ff fd8c 	bl	80002d8 <init_tab>
    bubble_main();
 80007c0:	f7ff fd80 	bl	80002c4 <bubble_main>
    Sleep(10, &hrtc);
 80007c4:	493e      	ldr	r1, [pc, #248]	; (80008c0 <tested_code+0x210>)
 80007c6:	200a      	movs	r0, #10
 80007c8:	f7ff fd9e 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbf0      	blt.n	80007bc <tested_code+0x10c>
  }



  //CACHE OFF PREFETCH OFF CODE CCM
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <tested_code+0x20c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a37      	ldr	r2, [pc, #220]	; (80008bc <tested_code+0x20c>)
 80007e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007e4:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <tested_code+0x20c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a34      	ldr	r2, [pc, #208]	; (80008bc <tested_code+0x20c>)
 80007ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007f0:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <tested_code+0x20c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a31      	ldr	r2, [pc, #196]	; (80008bc <tested_code+0x20c>)
 80007f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007fc:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e00a      	b.n	800081a <tested_code+0x16a>
  {
    init_tab();
 8000804:	f7ff fd68 	bl	80002d8 <init_tab>
    bubble_main_ccm();
 8000808:	f002 f8ea 	bl	80029e0 <__bubble_main_ccm_veneer>
    Sleep(10, &hrtc);
 800080c:	492c      	ldr	r1, [pc, #176]	; (80008c0 <tested_code+0x210>)
 800080e:	200a      	movs	r0, #10
 8000810:	f7ff fd7a 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	dbf0      	blt.n	8000804 <tested_code+0x154>
  }


  //CACHE OFF PREFETCH OFF CODE SRAM1
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <tested_code+0x20c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <tested_code+0x20c>)
 8000828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800082c:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <tested_code+0x20c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <tested_code+0x20c>)
 8000834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000838:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <tested_code+0x20c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <tested_code+0x20c>)
 8000840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000844:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	e00a      	b.n	8000862 <tested_code+0x1b2>
  {
    init_tab();
 800084c:	f7ff fd44 	bl	80002d8 <init_tab>
    bubble_main_ram();
 8000850:	f002 f8c2 	bl	80029d8 <__bubble_main_ram_veneer>
    Sleep(10, &hrtc);
 8000854:	491a      	ldr	r1, [pc, #104]	; (80008c0 <tested_code+0x210>)
 8000856:	200a      	movs	r0, #10
 8000858:	f7ff fd56 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbf0      	blt.n	800084c <tested_code+0x19c>
  }


  //CACHE OFF PREFETCH OFF CODE SRAM2
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <tested_code+0x20c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <tested_code+0x20c>)
 8000870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000874:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <tested_code+0x20c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <tested_code+0x20c>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <tested_code+0x20c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <tested_code+0x20c>)
 8000888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800088c:	6013      	str	r3, [r2, #0]
  for (int i = 0; i<nb_ex; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e00a      	b.n	80008aa <tested_code+0x1fa>
  {
    init_tab();
 8000894:	f7ff fd20 	bl	80002d8 <init_tab>
    bubble_main_ram2();
 8000898:	f002 f8a6 	bl	80029e8 <__bubble_main_ram2_veneer>
    Sleep(10, &hrtc);
 800089c:	4908      	ldr	r1, [pc, #32]	; (80008c0 <tested_code+0x210>)
 800089e:	200a      	movs	r0, #10
 80008a0:	f7ff fd32 	bl	8000308 <Sleep>
  for (int i = 0; i<nb_ex; i++)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbf0      	blt.n	8000894 <tested_code+0x1e4>
  }
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40022000 	.word	0x40022000
 80008c0:	200000f0 	.word	0x200000f0

080008c4 <empty_cache>:

void empty_cache()
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <empty_cache+0x70>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <empty_cache+0x70>)
 80008ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <empty_cache+0x70>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <empty_cache+0x70>)
 80008da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008de:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <empty_cache+0x70>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <empty_cache+0x70>)
 80008e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <empty_cache+0x70>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <empty_cache+0x70>)
 80008f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008f6:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <empty_cache+0x70>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <empty_cache+0x70>)
 80008fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <empty_cache+0x70>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <empty_cache+0x70>)
 800090a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800090e:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <empty_cache+0x70>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <empty_cache+0x70>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <empty_cache+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <empty_cache+0x70>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000

08000938 <init_cache>:

void init_cache()
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <init_cache+0x34>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <init_cache+0x34>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <init_cache+0x34>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <init_cache+0x34>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <init_cache+0x34>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <init_cache+0x34>)
 800095a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800095e:	6013      	str	r3, [r2, #0]

}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b092      	sub	sp, #72	; 0x48
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fa74 	bl	8000e62 <HAL_Init>

  /* USER CODE BEGIN Init */

  int f_table[NF] = {0,16,26,16,26,30,60,90,120,150,170,150,170};
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <main+0xc8>)
 800097c:	1d3c      	adds	r4, r7, #4
 800097e:	461d      	mov	r5, r3
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	6023      	str	r3, [r4, #0]
  int nb_range2 = 3; //the n first are in range 2
 8000990:	2303      	movs	r3, #3
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  int nb_boost = 2; //the n last are in boost mode
 8000994:	2302      	movs	r3, #2
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  SET_BIT(FLASH->OPTR, FLASH_OPTR_CCMSRAM_RST);
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <main+0xcc>)
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <main+0xcc>)
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a2:	6213      	str	r3, [r2, #32]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f84e 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f8d0 	bl	8000b4c <MX_GPIO_Init>
  MX_RTC_Init();
 80009ac:	f000 f898 	bl	8000ae0 <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int f;
  range1_to_range2();
 80009b0:	f7ff fdc6 	bl	8000540 <range1_to_range2>
  for (int i =0; i < NF; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
 80009b8:	e02e      	b.n	8000a18 <main+0xa8>
  {
    empty_cache();
 80009ba:	f7ff ff83 	bl	80008c4 <empty_cache>
    if (i == nb_range2 )
 80009be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d101      	bne.n	80009ca <main+0x5a>
    {
      range2_to_range1();
 80009c6:	f7ff fdfb 	bl	80005c0 <range2_to_range1>
    }
    if (i == NF-nb_boost)
 80009ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009cc:	f1c3 030d 	rsb	r3, r3, #13
 80009d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d101      	bne.n	80009da <main+0x6a>
    {
      boost_mode();
 80009d6:	f7ff fe1f 	bl	8000618 <boost_mode>
    }
    f = f_table[i];
 80009da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3348      	adds	r3, #72	; 0x48
 80009e0:	443b      	add	r3, r7
 80009e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (f == 0)
 80009e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d102      	bne.n	80009f4 <main+0x84>
    {
      disable_pll();
 80009ee:	f7ff fe2b 	bl	8000648 <disable_pll>
 80009f2:	e002      	b.n	80009fa <main+0x8a>
    }
    else
    {
      change_freq(f);
 80009f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80009f6:	f7ff fcbb 	bl	8000370 <change_freq>
    }
    init_cache();
 80009fa:	f7ff ff9d 	bl	8000938 <init_cache>
    Sleep(20, &hrtc);
 80009fe:	4910      	ldr	r1, [pc, #64]	; (8000a40 <main+0xd0>)
 8000a00:	2014      	movs	r0, #20
 8000a02:	f7ff fc81 	bl	8000308 <Sleep>
    tested_code();
 8000a06:	f7ff fe53 	bl	80006b0 <tested_code>
    Sleep(20, &hrtc);
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <main+0xd0>)
 8000a0c:	2014      	movs	r0, #20
 8000a0e:	f7ff fc7b 	bl	8000308 <Sleep>
  for (int i =0; i < NF; i++)
 8000a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a14:	3301      	adds	r3, #1
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
 8000a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	ddcd      	ble.n	80009ba <main+0x4a>
  }
  HAL_SuspendTick();
 8000a1e:	f000 fa91 	bl	8000f44 <HAL_SuspendTick>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000a22:	2101      	movs	r1, #1
 8000a24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a28:	f000 fd3e 	bl	80014a8 <HAL_PWR_EnterSTOPMode>
 8000a2c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3748      	adds	r7, #72	; 0x48
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bdb0      	pop	{r4, r5, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08002a40 	.word	0x08002a40
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	200000f0 	.word	0x200000f0

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	2238      	movs	r2, #56	; 0x38
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 ff78 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a6a:	f000 fd35 	bl	80014d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fe13 	bl	80016cc <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000aac:	f000 f8da 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f917 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad4:	f000 f8c6 	bl	8000c64 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	; 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_RTC_Init+0x64>)
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <MX_RTC_Init+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_RTC_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_RTC_Init+0x64>)
 8000af2:	227f      	movs	r2, #127	; 0x7f
 8000af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_RTC_Init+0x64>)
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_RTC_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b1e:	f001 fcf3 	bl	8002508 <HAL_RTC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 f89c 	bl	8000c64 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_RTC_Init+0x64>)
 8000b32:	f001 fdfd 	bl	8002730 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b3c:	f000 f892 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	40002800 	.word	0x40002800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_GPIO_Init+0x108>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_GPIO_Init+0x10c>)
 8000bd6:	f000 fae5 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <MX_GPIO_Init+0x110>)
 8000bf0:	f000 fad8 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000bf4:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000bf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 faca 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c10:	230c      	movs	r3, #12
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 fab9 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000c32:	f240 13f1 	movw	r3, #497	; 0x1f1
 8000c36:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_GPIO_Init+0x114>)
 8000c48:	f000 faac 	bl	80011a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48001400 	.word	0x48001400
 8000c5c:	48001800 	.word	0x48001800
 8000c60:	48000400 	.word	0x48000400

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	; 0x50
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2244      	movs	r2, #68	; 0x44
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fe3d 	bl	8002948 <memset>
  if(hrtc->Instance==RTC)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_RTC_MspInit+0x80>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d12b      	bne.n	8000d30 <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fa1d 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000cf4:	f7ff ffb6 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_RTC_MspInit+0x84>)
 8000cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <HAL_RTC_MspInit+0x84>)
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_RTC_MspInit+0x84>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_RTC_MspInit+0x84>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6593      	str	r3, [r2, #88]	; 0x58
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_RTC_MspInit+0x84>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 fa08 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 fa1f 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3750      	adds	r7, #80	; 0x50
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40002800 	.word	0x40002800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8bc 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <RTC_WKUP_IRQHandler+0x10>)
 8000d9a:	f001 fdab 	bl	80028f4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000f0 	.word	0x200000f0

08000da8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	4818      	ldr	r0, [pc, #96]	; (8000e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	4919      	ldr	r1, [pc, #100]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>


/* Copy from flash to CCMRAM */
 ldr r0, =_sccmram
 8000de6:	4816      	ldr	r0, [pc, #88]	; (8000e40 <LoopForever+0x12>)
 ldr r1, =_eccmram
 8000de8:	4916      	ldr	r1, [pc, #88]	; (8000e44 <LoopForever+0x16>)
 ldr r2, =_siccmram
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <LoopForever+0x1a>)
 movs r3, #0
 8000dec:	2300      	movs	r3, #0
 b LoopCopyCcmInit
 8000dee:	e002      	b.n	8000df6 <LoopCopyCcmInit>

08000df0 <CopyCcmInit>:
CopyCcmInit:
 ldr r4, [r2, r3]
 8000df0:	58d4      	ldr	r4, [r2, r3]
 str r4, [r0, r3]
 8000df2:	50c4      	str	r4, [r0, r3]
 adds r3, r3, #4
 8000df4:	3304      	adds	r3, #4

08000df6 <LoopCopyCcmInit>:
LoopCopyCcmInit:
 adds r4, r0, r3
 8000df6:	18c4      	adds	r4, r0, r3
 cmp r4, r1
 8000df8:	428c      	cmp	r4, r1
 bcc CopyCcmInit
 8000dfa:	d3f9      	bcc.n	8000df0 <CopyCcmInit>
/* End of copy to CCMRAM */


/*Copy from flash to RAM2*/
 ldr r0, =_sram2
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <LoopForever+0x1e>)
 ldr r1, =_eram2
 8000dfe:	4914      	ldr	r1, [pc, #80]	; (8000e50 <LoopForever+0x22>)
 ldr r2, =_siram2
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <LoopForever+0x26>)
 movs r3, #0
 8000e02:	2300      	movs	r3, #0
 b LoopCopyRam2Init
 8000e04:	e002      	b.n	8000e0c <LoopCopyRam2Init>

08000e06 <CopyRam2Init>:
CopyRam2Init:
 ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
 str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
 adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyRam2Init>:
LoopCopyRam2Init:
 adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
 cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
 bcc CopyRam2Init
 8000e10:	d3f9      	bcc.n	8000e06 <CopyRam2Init>
/* End of copy to RAM2 */

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e14:	4c11      	ldr	r4, [pc, #68]	; (8000e5c <LoopForever+0x2e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e22:	f7ff ffc1 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fd97 	bl	8002958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fda1 	bl	8000970 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   r0, =_estack
 8000e30:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000e3c:	08003a2c 	.word	0x08003a2c
 ldr r0, =_sccmram
 8000e40:	10000000 	.word	0x10000000
 ldr r1, =_eccmram
 8000e44:	100000c0 	.word	0x100000c0
 ldr r2, =_siccmram
 8000e48:	10000000 	.word	0x10000000
 ldr r0, =_sram2
 8000e4c:	20004000 	.word	0x20004000
 ldr r1, =_eram2
 8000e50:	20005060 	.word	0x20005060
 ldr r2, =_siram2
 8000e54:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 8000e58:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000e5c:	2000011c 	.word	0x2000011c

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>

08000e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f959 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f80e 	bl	8000e94 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e001      	b.n	8000e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e84:	f7ff fef4 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e88:	79fb      	ldrb	r3, [r7, #7]

}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_InitTick+0x68>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d022      	beq.n	8000eee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_InitTick+0x6c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_InitTick+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f964 	bl	800118a <HAL_SYSTICK_Config>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10f      	bne.n	8000ee8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d809      	bhi.n	8000ee2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed6:	f000 f930 	bl	800113a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0x70>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e004      	b.n	8000ef2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x20>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f18:	6013      	str	r3, [r2, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000118 	.word	0x20000118
 8000f28:	20000008 	.word	0x20000008

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000118 	.word	0x20000118

08000f44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_SuspendTick+0x1c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_SuspendTick+0x1c>)
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_ResumeTick+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_ResumeTick+0x1c>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff40 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff90 	bl	8001078 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5f 	bl	8001024 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff33 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa4 	bl	80010e0 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011b2:	e15a      	b.n	800146a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 814c 	beq.w	8001464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0203 	and.w	r2, r3, #3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80a6 	beq.w	8001464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6613      	str	r3, [r2, #96]	; 0x60
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001330:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_GPIO_Init+0x2e8>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800135a:	d01f      	beq.n	800139c <HAL_GPIO_Init+0x1f8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2ec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d019      	beq.n	8001398 <HAL_GPIO_Init+0x1f4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1f0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <HAL_GPIO_Init+0x2f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a49      	ldr	r2, [pc, #292]	; (800149c <HAL_GPIO_Init+0x2f8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2fc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001384:	2305      	movs	r3, #5
 8001386:	e00a      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001388:	2306      	movs	r3, #6
 800138a:	e008      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 800138c:	2304      	movs	r3, #4
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001390:	2303      	movs	r3, #3
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001394:	2302      	movs	r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 800139c:	2300      	movs	r3, #0
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ae:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_GPIO_Init+0x2e8>)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f ae9d 	bne.w	80011b4 <HAL_GPIO_Init+0x10>
  }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	40010400 	.word	0x40010400

080014a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ba:	d104      	bne.n	80014c6 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f8d8 	bl	8001674 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f8a9 	bl	8001620 <HAL_PWREx_EnterSTOP0Mode>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d141      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d131      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fa:	4a46      	ldr	r2, [pc, #280]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2232      	movs	r2, #50	; 0x32
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a3f      	ldr	r2, [pc, #252]	; (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	3301      	adds	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152a:	e002      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3b01      	subs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d102      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f2      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d158      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e057      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001568:	e04d      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001570:	d141      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157e:	d131      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001586:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2232      	movs	r2, #50	; 0x32
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	e002      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ca:	d102      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f2      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	d112      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e011      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015f4:	e007      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001604:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40007000 	.word	0x40007000
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83

08001620 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001630:	f023 0307 	bic.w	r3, r3, #7
 8001634:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001648:	bf30      	wfi
 800164a:	e002      	b.n	8001652 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800164c:	bf40      	sev
    __WFE();
 800164e:	bf20      	wfe
    __WFE();
 8001650:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	6113      	str	r3, [r2, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0307 	bic.w	r3, r3, #7
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80016a0:	bf30      	wfi
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80016a4:	bf40      	sev
    __WFE();
 80016a6:	bf20      	wfe
    __WFE();
 80016a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6113      	str	r3, [r2, #16]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e306      	b.n	8001cec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d075      	beq.n	80017d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ea:	4b97      	ldr	r3, [pc, #604]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f4:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0x3e>
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d002      	beq.n	8001710 <HAL_RCC_OscConfig+0x44>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d10b      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	4b8d      	ldr	r3, [pc, #564]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d05b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d157      	bne.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e2e1      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x74>
 8001732:	4b85      	ldr	r3, [pc, #532]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a84      	ldr	r2, [pc, #528]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7e      	ldr	r2, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7b      	ldr	r2, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fbd2 	bl	8000f2c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fbce 	bl	8000f2c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e2a6      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xc0>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbbe 	bl	8000f2c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fbba 	bl	8000f2c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e292      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d075      	beq.n	80018ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ec:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x136>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d002      	beq.n	8001808 <HAL_RCC_OscConfig+0x13c>
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d11f      	bne.n	8001848 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x154>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e265      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b49      	ldr	r3, [pc, #292]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	4946      	ldr	r1, [pc, #280]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001834:	4b45      	ldr	r3, [pc, #276]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb2b 	bl	8000e94 <HAL_InitTick>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d043      	beq.n	80018cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e251      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d023      	beq.n	8001898 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fb66 	bl	8000f2c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fb62 	bl	8000f2c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e23a      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	492d      	ldr	r1, [pc, #180]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e01a      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800189e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb42 	bl	8000f2c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fb3e 	bl	8000f2c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e216      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1e0>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d041      	beq.n	800195e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01c      	beq.n	800191c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb1b 	bl	8000f2c <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fb17 	bl	8000f2c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1ef      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ef      	beq.n	80018fa <HAL_RCC_OscConfig+0x22e>
 800191a:	e020      	b.n	800195e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fafe 	bl	8000f2c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001932:	e00d      	b.n	8001950 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fafa 	bl	8000f2c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d906      	bls.n	8001950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1d2      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ea      	bne.n	8001934 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a6 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x2b4>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x2b6>
 8001980:	2300      	movs	r3, #0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_RCC_OscConfig+0x4bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x4bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4bc>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fab7 	bl	8000f2c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fab3 	bl	8000f2c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e18b      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b6c      	ldr	r3, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x4bc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_RCC_OscConfig+0x32e>
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f8:	e024      	b.n	8001a44 <HAL_RCC_OscConfig+0x378>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d110      	bne.n	8001a24 <HAL_RCC_OscConfig+0x358>
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	4a5e      	ldr	r2, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a22:	e00f      	b.n	8001a44 <HAL_RCC_OscConfig+0x378>
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d016      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa6e 	bl	8000f2c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fa6a 	bl	8000f2c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e140      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ed      	beq.n	8001a54 <HAL_RCC_OscConfig+0x388>
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fa57 	bl	8000f2c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fa53 	bl	8000f2c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e129      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ed      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a34      	ldr	r2, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa26 	bl	8000f2c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae4:	f7ff fa22 	bl	8000f2c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0fa      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ef      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x418>
 8001b04:	e01b      	b.n	8001b3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff fa09 	bl	8000f2c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1e:	f7ff fa05 	bl	8000f2c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0dd      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ef      	bne.n	8001b1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80d1 	beq.w	8001cea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	f000 808b 	beq.w	8001c6c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d15e      	bne.n	8001c1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f9df 	bl	8000f2c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f9db 	bl	8000f2c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d905      	bls.n	8001b8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b3      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ec      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_OscConfig+0x62c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6a11      	ldr	r1, [r2, #32]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bb2:	0212      	lsls	r2, r2, #8
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bba:	0852      	lsrs	r2, r2, #1
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0552      	lsls	r2, r2, #21
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0652      	lsls	r2, r2, #25
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bd2:	06d2      	lsls	r2, r2, #27
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4947      	ldr	r1, [pc, #284]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f99a 	bl	8000f2c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f996 	bl	8000f2c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e06e      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x530>
 8001c1a:	e066      	b.n	8001cea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a34      	ldr	r2, [pc, #208]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a31      	ldr	r2, [pc, #196]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f972 	bl	8000f2c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f96e 	bl	8000f2c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e046      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x580>
 8001c6a:	e03e      	b.n	8001cea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e039      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d12c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	3b01      	subs	r3, #1
 8001c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d123      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d11b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d113      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	019f800c 	.word	0x019f800c

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e11e      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	498c      	ldr	r1, [pc, #560]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b8a      	ldr	r3, [pc, #552]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e106      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d073      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d129      	bne.n	8001dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0f4      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d68:	f000 f998 	bl	800209c <RCC_GetSysClockFreqFromPLLSource>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a7c      	ldr	r2, [pc, #496]	; (8001f64 <HAL_RCC_ClockConfig+0x268>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d93f      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d76:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d033      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d12f      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9e:	4a70      	ldr	r2, [pc, #448]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e024      	b.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0c6      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0be      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dd4:	f000 f8ce 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <HAL_RCC_ClockConfig+0x268>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d909      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dea:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4957      	ldr	r1, [pc, #348]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7ff f890 	bl	8000f2c <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff f88c 	bl	8000f2c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e095      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e70:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4936      	ldr	r1, [pc, #216]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b80      	cmp	r3, #128	; 0x80
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d21d      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 020f 	bic.w	r2, r3, #15
 8001eb4:	4929      	ldr	r1, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff f836 	bl	8000f2c <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7ff f832 	bl	8000f2c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e03b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1ed      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4917      	ldr	r1, [pc, #92]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490f      	ldr	r1, [pc, #60]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f26:	f000 f825 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490c      	ldr	r1, [pc, #48]	; (8001f68 <HAL_RCC_ClockConfig+0x26c>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x270>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ffa2 	bl	8000e94 <HAL_InitTick>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	04c4b400 	.word	0x04c4b400
 8001f68:	08003a14 	.word	0x08003a14
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e047      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e03e      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d136      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	68d2      	ldr	r2, [r2, #12]
 8001fd4:	0a12      	lsrs	r2, r2, #8
 8001fd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
      break;
 8001fe0:	e00c      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	0a12      	lsrs	r2, r2, #8
 8001ff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0e5b      	lsrs	r3, r3, #25
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	e001      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800201c:	693b      	ldr	r3, [r7, #16]
}
 800201e:	4618      	mov	r0, r3
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	220f      	movs	r2, #15
 8002046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_GetClockConfig+0x5c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_GetClockConfig+0x60>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40022000 	.word	0x40022000

0800209c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d10c      	bne.n	80020da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ca:	68d2      	ldr	r2, [r2, #12]
 80020cc:	0a12      	lsrs	r2, r2, #8
 80020ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
    break;
 80020d8:	e00c      	b.n	80020f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e4:	68d2      	ldr	r2, [r2, #12]
 80020e6:	0a12      	lsrs	r2, r2, #8
 80020e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    break;
 80020f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0e5b      	lsrs	r3, r3, #25
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000
 8002120:	007a1200 	.word	0x007a1200
 8002124:	00f42400 	.word	0x00f42400

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002130:	2300      	movs	r3, #0
 8002132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002134:	2300      	movs	r3, #0
 8002136:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8098 	beq.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	4a3f      	ldr	r2, [pc, #252]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	6593      	str	r3, [r2, #88]	; 0x58
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800217e:	f7fe fed5 	bl	8000f2c <HAL_GetTick>
 8002182:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002184:	e009      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7fe fed1 	bl	8000f2c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d902      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	74fb      	strb	r3, [r7, #19]
        break;
 8002198:	e005      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ef      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d159      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01e      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d019      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe fe91 	bl	8000f2c <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220c:	e00b      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe fe8d 	bl	8000f2c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d902      	bls.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	74fb      	strb	r3, [r7, #19]
            break;
 8002224:	e006      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ec      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4903      	ldr	r1, [pc, #12]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002250:	e008      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	74bb      	strb	r3, [r7, #18]
 8002256:	e005      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002264:	7c7b      	ldrb	r3, [r7, #17]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4ba6      	ldr	r3, [pc, #664]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4aa5      	ldr	r2, [pc, #660]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002282:	4ba0      	ldr	r3, [pc, #640]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 0203 	bic.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	499c      	ldr	r1, [pc, #624]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a4:	4b97      	ldr	r3, [pc, #604]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 020c 	bic.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4994      	ldr	r1, [pc, #592]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c6:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	498b      	ldr	r1, [pc, #556]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022e8:	4b86      	ldr	r3, [pc, #536]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	4983      	ldr	r1, [pc, #524]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800230a:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	497a      	ldr	r1, [pc, #488]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232c:	4b75      	ldr	r3, [pc, #468]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4972      	ldr	r1, [pc, #456]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4969      	ldr	r1, [pc, #420]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002370:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4961      	ldr	r1, [pc, #388]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002392:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	4958      	ldr	r1, [pc, #352]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	4950      	ldr	r1, [pc, #320]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d2:	d105      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023ec:	4b45      	ldr	r3, [pc, #276]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	4942      	ldr	r1, [pc, #264]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002424:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002442:	d105      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	4926      	ldr	r1, [pc, #152]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247a:	d105      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a20      	ldr	r2, [pc, #128]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002486:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4918      	ldr	r1, [pc, #96]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b2:	d105      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ea:	d105      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d066      	beq.n	80025e8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fbc2 	bl	8000cb8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	22ca      	movs	r2, #202	; 0xca
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2253      	movs	r2, #83	; 0x53
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f876 	bl	800263e <RTC_EnterInitMode>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d13a      	bne.n	80025d2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	041a      	lsls	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f882 	bl	80026aa <RTC_ExitInitMode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d110      	bne.n	80025d2 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	22ff      	movs	r2, #255	; 0xff
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0220 	bic.w	r2, r2, #32
 8002608:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800260a:	f7fe fc8f 	bl	8000f2c <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002610:	e009      	b.n	8002626 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002612:	f7fe fc8b 	bl	8000f2c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002620:	d901      	bls.n	8002626 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e007      	b.n	8002636 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ee      	beq.n	8002612 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d123      	bne.n	80026a0 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002666:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002668:	f7fe fc60 	bl	8000f2c <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800266e:	e00d      	b.n	800268c <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002670:	f7fe fc5c 	bl	8000f2c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267e:	d905      	bls.n	800268c <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <RTC_EnterInitMode+0x62>
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d1e7      	bne.n	8002670 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10c      	bne.n	80026ee <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff8c 	bl	80025f2 <HAL_RTC_WaitForSynchro>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d022      	beq.n	8002726 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2203      	movs	r2, #3
 80026e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e01b      	b.n	8002726 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0220 	bic.w	r2, r2, #32
 80026fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff77 	bl	80025f2 <HAL_RTC_WaitForSynchro>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002746:	2302      	movs	r3, #2
 8002748:	e072      	b.n	8002830 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	22ca      	movs	r2, #202	; 0xca
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2253      	movs	r2, #83	; 0x53
 8002768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d120      	bne.n	80027d2 <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
  {
    tickstart = HAL_GetTick();
 8002790:	f7fe fbcc 	bl	8000f2c <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002796:	e015      	b.n	80027c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002798:	f7fe fbc8 	bl	8000f2c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a6:	d90d      	bls.n	80027c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	22ff      	movs	r2, #255	; 0xff
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2203      	movs	r2, #3
 80027b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e035      	b.n	8002830 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0e2      	beq.n	8002798 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f023 0107 	bic.w	r1, r3, #7
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80027f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002804:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(hrtc->Instance->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 4288 	orr.w	r2, r2, #17408	; 0x4400
 8002814:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	22ff      	movs	r2, #255	; 0xff
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800284e:	2302      	movs	r3, #2
 8002850:	e049      	b.n	80028e6 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	22ca      	movs	r2, #202	; 0xca
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2253      	movs	r2, #83	; 0x53
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4288 	bic.w	r2, r2, #17408	; 0x4400
 8002880:	619a      	str	r2, [r3, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>)
 8002884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002888:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 800288a:	f7fe fb4f 	bl	8000f2c <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002890:	e015      	b.n	80028be <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002892:	f7fe fb4b 	bl	8000f2c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a0:	d90d      	bls.n	80028be <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e013      	b.n	80028e6 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0e2      	beq.n	8002892 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(hrtc->Instance->SR, RTC_SR_WUTF) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CWUTF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2204      	movs	r2, #4
 8002910:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8002914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002918:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f80a 	bl	8002934 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4d0d      	ldr	r5, [pc, #52]	; (8002990 <__libc_init_array+0x38>)
 800295c:	4c0d      	ldr	r4, [pc, #52]	; (8002994 <__libc_init_array+0x3c>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	2600      	movs	r6, #0
 8002964:	42a6      	cmp	r6, r4
 8002966:	d109      	bne.n	800297c <__libc_init_array+0x24>
 8002968:	4d0b      	ldr	r5, [pc, #44]	; (8002998 <__libc_init_array+0x40>)
 800296a:	4c0c      	ldr	r4, [pc, #48]	; (800299c <__libc_init_array+0x44>)
 800296c:	f000 f826 	bl	80029bc <_init>
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	2600      	movs	r6, #0
 8002976:	42a6      	cmp	r6, r4
 8002978:	d105      	bne.n	8002986 <__libc_init_array+0x2e>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002980:	4798      	blx	r3
 8002982:	3601      	adds	r6, #1
 8002984:	e7ee      	b.n	8002964 <__libc_init_array+0xc>
 8002986:	f855 3b04 	ldr.w	r3, [r5], #4
 800298a:	4798      	blx	r3
 800298c:	3601      	adds	r6, #1
 800298e:	e7f2      	b.n	8002976 <__libc_init_array+0x1e>
 8002990:	08003a24 	.word	0x08003a24
 8002994:	08003a24 	.word	0x08003a24
 8002998:	08003a24 	.word	0x08003a24
 800299c:	08003a28 	.word	0x08003a28

080029a0 <memcpy>:
 80029a0:	440a      	add	r2, r1
 80029a2:	4291      	cmp	r1, r2
 80029a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80029a8:	d100      	bne.n	80029ac <memcpy+0xc>
 80029aa:	4770      	bx	lr
 80029ac:	b510      	push	{r4, lr}
 80029ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029b6:	4291      	cmp	r1, r2
 80029b8:	d1f9      	bne.n	80029ae <memcpy+0xe>
 80029ba:	bd10      	pop	{r4, pc}

080029bc <_init>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

080029c8 <_fini>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	bf00      	nop
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr
 80029d4:	0000      	movs	r0, r0
	...

080029d8 <__bubble_main_ram_veneer>:
 80029d8:	f85f f000 	ldr.w	pc, [pc]	; 80029dc <__bubble_main_ram_veneer+0x4>
 80029dc:	200000b9 	.word	0x200000b9

080029e0 <__bubble_main_ccm_veneer>:
 80029e0:	f85f f000 	ldr.w	pc, [pc]	; 80029e4 <__bubble_main_ccm_veneer+0x4>
 80029e4:	100000ad 	.word	0x100000ad

080029e8 <__bubble_main_ram2_veneer>:
 80029e8:	f85f f000 	ldr.w	pc, [pc]	; 80029ec <__bubble_main_ram2_veneer+0x4>
 80029ec:	200040ad 	.word	0x200040ad

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000010                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <BubbleSortRAM>:
{
2000000c:	b480      	push	{r7}
2000000e:	b087      	sub	sp, #28
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
20000014:	2300      	movs	r3, #0
20000016:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
20000018:	2301      	movs	r3, #1
2000001a:	60fb      	str	r3, [r7, #12]
2000001c:	e040      	b.n	200000a0 <BubbleSortRAM+0x94>
      Sorted = TRUE;
2000001e:	2301      	movs	r3, #1
20000020:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20000022:	2300      	movs	r3, #0
20000024:	613b      	str	r3, [r7, #16]
20000026:	e02f      	b.n	20000088 <BubbleSortRAM+0x7c>
         if (Index > NUMELEMS-i)
20000028:	68fb      	ldr	r3, [r7, #12]
2000002a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
2000002e:	693a      	ldr	r2, [r7, #16]
20000030:	429a      	cmp	r2, r3
20000032:	dc2e      	bgt.n	20000092 <BubbleSortRAM+0x86>
         if (Array[Index] > Array[Index + 1])
20000034:	693b      	ldr	r3, [r7, #16]
20000036:	009b      	lsls	r3, r3, #2
20000038:	687a      	ldr	r2, [r7, #4]
2000003a:	4413      	add	r3, r2
2000003c:	681a      	ldr	r2, [r3, #0]
2000003e:	693b      	ldr	r3, [r7, #16]
20000040:	3301      	adds	r3, #1
20000042:	009b      	lsls	r3, r3, #2
20000044:	6879      	ldr	r1, [r7, #4]
20000046:	440b      	add	r3, r1
20000048:	681b      	ldr	r3, [r3, #0]
2000004a:	429a      	cmp	r2, r3
2000004c:	dd19      	ble.n	20000082 <BubbleSortRAM+0x76>
            Temp = Array[Index];
2000004e:	693b      	ldr	r3, [r7, #16]
20000050:	009b      	lsls	r3, r3, #2
20000052:	687a      	ldr	r2, [r7, #4]
20000054:	4413      	add	r3, r2
20000056:	681b      	ldr	r3, [r3, #0]
20000058:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
2000005a:	693b      	ldr	r3, [r7, #16]
2000005c:	3301      	adds	r3, #1
2000005e:	009b      	lsls	r3, r3, #2
20000060:	687a      	ldr	r2, [r7, #4]
20000062:	441a      	add	r2, r3
20000064:	693b      	ldr	r3, [r7, #16]
20000066:	009b      	lsls	r3, r3, #2
20000068:	6879      	ldr	r1, [r7, #4]
2000006a:	440b      	add	r3, r1
2000006c:	6812      	ldr	r2, [r2, #0]
2000006e:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
20000070:	693b      	ldr	r3, [r7, #16]
20000072:	3301      	adds	r3, #1
20000074:	009b      	lsls	r3, r3, #2
20000076:	687a      	ldr	r2, [r7, #4]
20000078:	4413      	add	r3, r2
2000007a:	68ba      	ldr	r2, [r7, #8]
2000007c:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
2000007e:	2300      	movs	r3, #0
20000080:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20000082:	693b      	ldr	r3, [r7, #16]
20000084:	3301      	adds	r3, #1
20000086:	613b      	str	r3, [r7, #16]
20000088:	693b      	ldr	r3, [r7, #16]
2000008a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000008e:	dbcb      	blt.n	20000028 <BubbleSortRAM+0x1c>
20000090:	e000      	b.n	20000094 <BubbleSortRAM+0x88>
           break;
20000092:	bf00      	nop
      if (Sorted)
20000094:	697b      	ldr	r3, [r7, #20]
20000096:	2b00      	cmp	r3, #0
20000098:	d107      	bne.n	200000aa <BubbleSortRAM+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
2000009a:	68fb      	ldr	r3, [r7, #12]
2000009c:	3301      	adds	r3, #1
2000009e:	60fb      	str	r3, [r7, #12]
200000a0:	68fb      	ldr	r3, [r7, #12]
200000a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200000a6:	dbba      	blt.n	2000001e <BubbleSortRAM+0x12>
}
200000a8:	e000      	b.n	200000ac <BubbleSortRAM+0xa0>
         break;
200000aa:	bf00      	nop
}
200000ac:	bf00      	nop
200000ae:	371c      	adds	r7, #28
200000b0:	46bd      	mov	sp, r7
200000b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200000b6:	4770      	bx	lr

200000b8 <bubble_main_ram>:
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  BubbleSortRAM(srcArrayInRAM);
200000bc:	4802      	ldr	r0, [pc, #8]	; (200000c8 <bubble_main_ram+0x10>)
200000be:	f7ff ffa5 	bl	2000000c <BubbleSortRAM>
}
200000c2:	bf00      	nop
200000c4:	bd80      	pop	{r7, pc}
200000c6:	bf00      	nop
200000c8:	200040c0 	.word	0x200040c0

Disassembly of section .ram2:

20004000 <BubbleSortRAM2>:
{
20004000:	b480      	push	{r7}
20004002:	b087      	sub	sp, #28
20004004:	af00      	add	r7, sp, #0
20004006:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
20004008:	2300      	movs	r3, #0
2000400a:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
2000400c:	2301      	movs	r3, #1
2000400e:	60fb      	str	r3, [r7, #12]
20004010:	e040      	b.n	20004094 <BubbleSortRAM2+0x94>
      Sorted = TRUE;
20004012:	2301      	movs	r3, #1
20004014:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20004016:	2300      	movs	r3, #0
20004018:	613b      	str	r3, [r7, #16]
2000401a:	e02f      	b.n	2000407c <BubbleSortRAM2+0x7c>
         if (Index > NUMELEMS-i)
2000401c:	68fb      	ldr	r3, [r7, #12]
2000401e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
20004022:	693a      	ldr	r2, [r7, #16]
20004024:	429a      	cmp	r2, r3
20004026:	dc2e      	bgt.n	20004086 <BubbleSortRAM2+0x86>
         if (Array[Index] > Array[Index + 1])
20004028:	693b      	ldr	r3, [r7, #16]
2000402a:	009b      	lsls	r3, r3, #2
2000402c:	687a      	ldr	r2, [r7, #4]
2000402e:	4413      	add	r3, r2
20004030:	681a      	ldr	r2, [r3, #0]
20004032:	693b      	ldr	r3, [r7, #16]
20004034:	3301      	adds	r3, #1
20004036:	009b      	lsls	r3, r3, #2
20004038:	6879      	ldr	r1, [r7, #4]
2000403a:	440b      	add	r3, r1
2000403c:	681b      	ldr	r3, [r3, #0]
2000403e:	429a      	cmp	r2, r3
20004040:	dd19      	ble.n	20004076 <BubbleSortRAM2+0x76>
            Temp = Array[Index];
20004042:	693b      	ldr	r3, [r7, #16]
20004044:	009b      	lsls	r3, r3, #2
20004046:	687a      	ldr	r2, [r7, #4]
20004048:	4413      	add	r3, r2
2000404a:	681b      	ldr	r3, [r3, #0]
2000404c:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
2000404e:	693b      	ldr	r3, [r7, #16]
20004050:	3301      	adds	r3, #1
20004052:	009b      	lsls	r3, r3, #2
20004054:	687a      	ldr	r2, [r7, #4]
20004056:	441a      	add	r2, r3
20004058:	693b      	ldr	r3, [r7, #16]
2000405a:	009b      	lsls	r3, r3, #2
2000405c:	6879      	ldr	r1, [r7, #4]
2000405e:	440b      	add	r3, r1
20004060:	6812      	ldr	r2, [r2, #0]
20004062:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
20004064:	693b      	ldr	r3, [r7, #16]
20004066:	3301      	adds	r3, #1
20004068:	009b      	lsls	r3, r3, #2
2000406a:	687a      	ldr	r2, [r7, #4]
2000406c:	4413      	add	r3, r2
2000406e:	68ba      	ldr	r2, [r7, #8]
20004070:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
20004072:	2300      	movs	r3, #0
20004074:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
20004076:	693b      	ldr	r3, [r7, #16]
20004078:	3301      	adds	r3, #1
2000407a:	613b      	str	r3, [r7, #16]
2000407c:	693b      	ldr	r3, [r7, #16]
2000407e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20004082:	dbcb      	blt.n	2000401c <BubbleSortRAM2+0x1c>
20004084:	e000      	b.n	20004088 <BubbleSortRAM2+0x88>
           break;
20004086:	bf00      	nop
      if (Sorted)
20004088:	697b      	ldr	r3, [r7, #20]
2000408a:	2b00      	cmp	r3, #0
2000408c:	d107      	bne.n	2000409e <BubbleSortRAM2+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
2000408e:	68fb      	ldr	r3, [r7, #12]
20004090:	3301      	adds	r3, #1
20004092:	60fb      	str	r3, [r7, #12]
20004094:	68fb      	ldr	r3, [r7, #12]
20004096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000409a:	dbba      	blt.n	20004012 <BubbleSortRAM2+0x12>
}
2000409c:	e000      	b.n	200040a0 <BubbleSortRAM2+0xa0>
         break;
2000409e:	bf00      	nop
}
200040a0:	bf00      	nop
200040a2:	371c      	adds	r7, #28
200040a4:	46bd      	mov	sp, r7
200040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200040aa:	4770      	bx	lr

200040ac <bubble_main_ram2>:
{
200040ac:	b580      	push	{r7, lr}
200040ae:	af00      	add	r7, sp, #0
  BubbleSortRAM2(srcArrayInRAM);
200040b0:	4802      	ldr	r0, [pc, #8]	; (200040bc <bubble_main_ram2+0x10>)
200040b2:	f7ff ffa5 	bl	20004000 <BubbleSortRAM2>
}
200040b6:	bf00      	nop
200040b8:	bd80      	pop	{r7, pc}
200040ba:	bf00      	nop
200040bc:	200040c0 	.word	0x200040c0

200040c0 <srcArrayInRAM>:
	...

Disassembly of section .ccmram:

10000000 <BubbleSortCCM>:
{
10000000:	b480      	push	{r7}
10000002:	b087      	sub	sp, #28
10000004:	af00      	add	r7, sp, #0
10000006:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
10000008:	2300      	movs	r3, #0
1000000a:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
1000000c:	2301      	movs	r3, #1
1000000e:	60fb      	str	r3, [r7, #12]
10000010:	e040      	b.n	10000094 <BubbleSortCCM+0x94>
      Sorted = TRUE;
10000012:	2301      	movs	r3, #1
10000014:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000016:	2300      	movs	r3, #0
10000018:	613b      	str	r3, [r7, #16]
1000001a:	e02f      	b.n	1000007c <BubbleSortCCM+0x7c>
         if (Index > NUMELEMS-i)
1000001c:	68fb      	ldr	r3, [r7, #12]
1000001e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
10000022:	693a      	ldr	r2, [r7, #16]
10000024:	429a      	cmp	r2, r3
10000026:	dc2e      	bgt.n	10000086 <BubbleSortCCM+0x86>
         if (Array[Index] > Array[Index + 1])
10000028:	693b      	ldr	r3, [r7, #16]
1000002a:	009b      	lsls	r3, r3, #2
1000002c:	687a      	ldr	r2, [r7, #4]
1000002e:	4413      	add	r3, r2
10000030:	681a      	ldr	r2, [r3, #0]
10000032:	693b      	ldr	r3, [r7, #16]
10000034:	3301      	adds	r3, #1
10000036:	009b      	lsls	r3, r3, #2
10000038:	6879      	ldr	r1, [r7, #4]
1000003a:	440b      	add	r3, r1
1000003c:	681b      	ldr	r3, [r3, #0]
1000003e:	429a      	cmp	r2, r3
10000040:	dd19      	ble.n	10000076 <BubbleSortCCM+0x76>
            Temp = Array[Index];
10000042:	693b      	ldr	r3, [r7, #16]
10000044:	009b      	lsls	r3, r3, #2
10000046:	687a      	ldr	r2, [r7, #4]
10000048:	4413      	add	r3, r2
1000004a:	681b      	ldr	r3, [r3, #0]
1000004c:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
1000004e:	693b      	ldr	r3, [r7, #16]
10000050:	3301      	adds	r3, #1
10000052:	009b      	lsls	r3, r3, #2
10000054:	687a      	ldr	r2, [r7, #4]
10000056:	441a      	add	r2, r3
10000058:	693b      	ldr	r3, [r7, #16]
1000005a:	009b      	lsls	r3, r3, #2
1000005c:	6879      	ldr	r1, [r7, #4]
1000005e:	440b      	add	r3, r1
10000060:	6812      	ldr	r2, [r2, #0]
10000062:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
10000064:	693b      	ldr	r3, [r7, #16]
10000066:	3301      	adds	r3, #1
10000068:	009b      	lsls	r3, r3, #2
1000006a:	687a      	ldr	r2, [r7, #4]
1000006c:	4413      	add	r3, r2
1000006e:	68ba      	ldr	r2, [r7, #8]
10000070:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
10000072:	2300      	movs	r3, #0
10000074:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000076:	693b      	ldr	r3, [r7, #16]
10000078:	3301      	adds	r3, #1
1000007a:	613b      	str	r3, [r7, #16]
1000007c:	693b      	ldr	r3, [r7, #16]
1000007e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10000082:	dbcb      	blt.n	1000001c <BubbleSortCCM+0x1c>
10000084:	e000      	b.n	10000088 <BubbleSortCCM+0x88>
           break;
10000086:	bf00      	nop
      if (Sorted)
10000088:	697b      	ldr	r3, [r7, #20]
1000008a:	2b00      	cmp	r3, #0
1000008c:	d107      	bne.n	1000009e <BubbleSortCCM+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
1000008e:	68fb      	ldr	r3, [r7, #12]
10000090:	3301      	adds	r3, #1
10000092:	60fb      	str	r3, [r7, #12]
10000094:	68fb      	ldr	r3, [r7, #12]
10000096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000009a:	dbba      	blt.n	10000012 <BubbleSortCCM+0x12>
}
1000009c:	e000      	b.n	100000a0 <BubbleSortCCM+0xa0>
         break;
1000009e:	bf00      	nop
}
100000a0:	bf00      	nop
100000a2:	371c      	adds	r7, #28
100000a4:	46bd      	mov	sp, r7
100000a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100000aa:	4770      	bx	lr

100000ac <bubble_main_ccm>:
{
100000ac:	b580      	push	{r7, lr}
100000ae:	af00      	add	r7, sp, #0
  BubbleSortCCM(srcArrayInRAM);
100000b0:	4802      	ldr	r0, [pc, #8]	; (100000bc <bubble_main_ccm+0x10>)
100000b2:	f7ff ffa5 	bl	10000000 <BubbleSortCCM>
}
100000b6:	bf00      	nop
100000b8:	bd80      	pop	{r7, pc}
100000ba:	bf00      	nop
100000bc:	200040c0 	.word	0x200040c0
