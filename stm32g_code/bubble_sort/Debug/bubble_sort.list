
bubble_sort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  000300c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003868  08003868  000300c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003868  08003868  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fac  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000000c0  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .ccmramdata   00000000  100000c0  100000c0  000300c0  2**0
                  CONTENTS
 11 .bss          0000004c  20000fac  20000fac  00030fac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000ff8  20000ff8  00030fac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00008a87  00000000  00000000  00030133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001cca  00000000  00000000  00038bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009c8  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000074a  00000000  00000000  0003b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d1d0  00000000  00000000  0003b99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000a5c1  00000000  00000000  00058b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b6c7f  00000000  00000000  0006312b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000261c  00000000  00000000  00119dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  0011c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000fac 	.word	0x20000fac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002818 	.word	0x08002818

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000fb0 	.word	0x20000fb0
 8000214:	08002818 	.word	0x08002818

08000218 <BubbleSort>:
}
void BubbleSort(int Array[])
/*
 * Sorts an array of integers of size NUMELEMS in ascending order.
 */
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]
   int Temp, Index, i;
   for (i = 1; i <= NUMELEMS-1; i++)
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e040      	b.n	80002ac <BubbleSort+0x94>
   {
      Sorted = TRUE;
 800022a:	2301      	movs	r3, #1
 800022c:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	e02f      	b.n	8000294 <BubbleSort+0x7c>
         if (Index > NUMELEMS-i)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800023a:	693a      	ldr	r2, [r7, #16]
 800023c:	429a      	cmp	r2, r3
 800023e:	dc2e      	bgt.n	800029e <BubbleSort+0x86>
         {
           break;
         }
         if (Array[Index] > Array[Index + 1])
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	3301      	adds	r3, #1
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	440b      	add	r3, r1
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	429a      	cmp	r2, r3
 8000258:	dd19      	ble.n	800028e <BubbleSort+0x76>
         {
            Temp = Array[Index];
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	441a      	add	r2, r3
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	6879      	ldr	r1, [r7, #4]
 8000276:	440b      	add	r3, r1
 8000278:	6812      	ldr	r2, [r2, #0]
 800027a:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	3301      	adds	r3, #1
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	3301      	adds	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800029a:	dbcb      	blt.n	8000234 <BubbleSort+0x1c>
 800029c:	e000      	b.n	80002a0 <BubbleSort+0x88>
           break;
 800029e:	bf00      	nop
         }
      }

      if (Sorted)
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d107      	bne.n	80002b6 <BubbleSort+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b2:	dbba      	blt.n	800022a <BubbleSort+0x12>
      {
         break;
      }
   }
}
 80002b4:	e000      	b.n	80002b8 <BubbleSort+0xa0>
         break;
 80002b6:	bf00      	nop
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <bubble_main>:
{
  BubbleSortCCM(srcArrayInRAM);
}

void bubble_main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  BubbleSort(srcArrayInRAM);
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <bubble_main+0x10>)
 80002ca:	f7ff ffa5 	bl	8000218 <BubbleSort>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000

080002d8 <init_tab>:
void init_tab()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  memcpy(srcArrayInRAM, srcArrayInFlash, NUMELEMS*sizeof(int));
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <init_tab+0x1c>)
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <init_tab+0x20>)
 80002e0:	4610      	mov	r0, r2
 80002e2:	4619      	mov	r1, r3
 80002e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80002e8:	461a      	mov	r2, r3
 80002ea:	f002 fa87 	bl	80027fc <memcpy>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000000 	.word	0x20000000
 80002f8:	080028b8 	.word	0x080028b8

080002fc <tested_code>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int current_frequency;
void tested_code()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  //CACHE ON PREFETCH OFF CODE FLASH
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000300:	4b53      	ldr	r3, [pc, #332]	; (8000450 <tested_code+0x154>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a52      	ldr	r2, [pc, #328]	; (8000450 <tested_code+0x154>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800030c:	4b50      	ldr	r3, [pc, #320]	; (8000450 <tested_code+0x154>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a4f      	ldr	r2, [pc, #316]	; (8000450 <tested_code+0x154>)
 8000312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000316:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8000318:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <tested_code+0x154>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a4c      	ldr	r2, [pc, #304]	; (8000450 <tested_code+0x154>)
 800031e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000322:	6013      	str	r3, [r2, #0]
  init_tab();
 8000324:	f7ff ffd8 	bl	80002d8 <init_tab>
  Sleep(10);
 8000328:	200a      	movs	r0, #10
 800032a:	f000 fa59 	bl	80007e0 <Sleep>
  bubble_main();
 800032e:	f7ff ffc9 	bl	80002c4 <bubble_main>
  Sleep(10);
 8000332:	200a      	movs	r0, #10
 8000334:	f000 fa54 	bl	80007e0 <Sleep>

  //CACHE ON PREFETCH OFF CODE CCM
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000338:	4b45      	ldr	r3, [pc, #276]	; (8000450 <tested_code+0x154>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a44      	ldr	r2, [pc, #272]	; (8000450 <tested_code+0x154>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000344:	4b42      	ldr	r3, [pc, #264]	; (8000450 <tested_code+0x154>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a41      	ldr	r2, [pc, #260]	; (8000450 <tested_code+0x154>)
 800034a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800034e:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8000350:	4b3f      	ldr	r3, [pc, #252]	; (8000450 <tested_code+0x154>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a3e      	ldr	r2, [pc, #248]	; (8000450 <tested_code+0x154>)
 8000356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800035a:	6013      	str	r3, [r2, #0]
  init_tab();
 800035c:	f7ff ffbc 	bl	80002d8 <init_tab>
  Sleep(10);
 8000360:	200a      	movs	r0, #10
 8000362:	f000 fa3d 	bl	80007e0 <Sleep>
  bubble_main_ccm();
 8000366:	f002 fa63 	bl	8002830 <__bubble_main_ccm_veneer>
  Sleep(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fa38 	bl	80007e0 <Sleep>

  //CACHE OFF PREFETCH OFF CODE CCM
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <tested_code+0x154>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a36      	ldr	r2, [pc, #216]	; (8000450 <tested_code+0x154>)
 8000376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800037a:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <tested_code+0x154>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a33      	ldr	r2, [pc, #204]	; (8000450 <tested_code+0x154>)
 8000382:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000386:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <tested_code+0x154>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a30      	ldr	r2, [pc, #192]	; (8000450 <tested_code+0x154>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6013      	str	r3, [r2, #0]
  init_tab();
 8000394:	f7ff ffa0 	bl	80002d8 <init_tab>
  Sleep(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f000 fa21 	bl	80007e0 <Sleep>
  bubble_main_ccm();
 800039e:	f002 fa47 	bl	8002830 <__bubble_main_ccm_veneer>
  Sleep(10);
 80003a2:	200a      	movs	r0, #10
 80003a4:	f000 fa1c 	bl	80007e0 <Sleep>

  //CACHE OFF PREFETCH OFF CODE FLASH
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <tested_code+0x154>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a28      	ldr	r2, [pc, #160]	; (8000450 <tested_code+0x154>)
 80003ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003b2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <tested_code+0x154>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a25      	ldr	r2, [pc, #148]	; (8000450 <tested_code+0x154>)
 80003ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003be:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <tested_code+0x154>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a22      	ldr	r2, [pc, #136]	; (8000450 <tested_code+0x154>)
 80003c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003ca:	6013      	str	r3, [r2, #0]
  init_tab();
 80003cc:	f7ff ff84 	bl	80002d8 <init_tab>
  Sleep(10);
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fa05 	bl	80007e0 <Sleep>
  bubble_main();
 80003d6:	f7ff ff75 	bl	80002c4 <bubble_main>
  Sleep(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f000 fa00 	bl	80007e0 <Sleep>


  //CACHE OFF PREFETCH ON CODE FLASH
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <tested_code+0x154>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <tested_code+0x154>)
 80003e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003ea:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <tested_code+0x154>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <tested_code+0x154>)
 80003f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003f6:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <tested_code+0x154>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <tested_code+0x154>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6013      	str	r3, [r2, #0]
  init_tab();
 8000404:	f7ff ff68 	bl	80002d8 <init_tab>
  Sleep(10);
 8000408:	200a      	movs	r0, #10
 800040a:	f000 f9e9 	bl	80007e0 <Sleep>
  bubble_main();
 800040e:	f7ff ff59 	bl	80002c4 <bubble_main>
  Sleep(10);
 8000412:	200a      	movs	r0, #10
 8000414:	f000 f9e4 	bl	80007e0 <Sleep>

  //CACHE ON PREFETCH ON CODE FLASH
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <tested_code+0x154>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0c      	ldr	r2, [pc, #48]	; (8000450 <tested_code+0x154>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <tested_code+0x154>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <tested_code+0x154>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <tested_code+0x154>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <tested_code+0x154>)
 8000436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800043a:	6013      	str	r3, [r2, #0]
  init_tab();
 800043c:	f7ff ff4c 	bl	80002d8 <init_tab>
  Sleep(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f000 f9cd 	bl	80007e0 <Sleep>
  bubble_main();
 8000446:	f7ff ff3d 	bl	80002c4 <bubble_main>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40022000 	.word	0x40022000

08000454 <empty_cache>:

void empty_cache()
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <empty_cache+0x70>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <empty_cache+0x70>)
 800045e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000462:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <empty_cache+0x70>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <empty_cache+0x70>)
 800046a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800046e:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <empty_cache+0x70>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <empty_cache+0x70>)
 8000476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047a:	6013      	str	r3, [r2, #0]
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <empty_cache+0x70>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <empty_cache+0x70>)
 8000482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000486:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <empty_cache+0x70>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <empty_cache+0x70>)
 800048e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000492:	6013      	str	r3, [r2, #0]
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <empty_cache+0x70>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <empty_cache+0x70>)
 800049a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800049e:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <empty_cache+0x70>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <empty_cache+0x70>)
 80004a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004aa:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <empty_cache+0x70>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <empty_cache+0x70>)
 80004b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <init_cache>:

void init_cache()
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <init_cache+0x34>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <init_cache+0x34>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <init_cache+0x34>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <init_cache+0x34>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <init_cache+0x34>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <init_cache+0x34>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40022000 	.word	0x40022000

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b090      	sub	sp, #64	; 0x40
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fbda 	bl	8000cbe <HAL_Init>

  /* USER CODE BEGIN Init */

  int f_table[NF] = {16,26,16,26,30,60,90,120,150,170,150,170};
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <main+0xb8>)
 800050c:	463c      	mov	r4, r7
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800051c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int nb_range2 = 2; //the n first are in range 2
 8000520:	2302      	movs	r3, #2
 8000522:	63bb      	str	r3, [r7, #56]	; 0x38
  int nb_boost = 2; //the n last are in boost mode
 8000524:	2302      	movs	r3, #2
 8000526:	637b      	str	r3, [r7, #52]	; 0x34
  SET_BIT(FLASH->OPTR, FLASH_OPTR_CCMSRAM_RST);
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <main+0xbc>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a23      	ldr	r2, [pc, #140]	; (80005bc <main+0xbc>)
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	6213      	str	r3, [r2, #32]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f844 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f8c6 	bl	80006c8 <MX_GPIO_Init>
  MX_RTC_Init();
 800053c:	f000 f88e 	bl	800065c <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int f;
  range1_to_range2();
 8000540:	f000 fa5c 	bl	80009fc <range1_to_range2>
  for (int i =0; i < NF; i++)
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000548:	e026      	b.n	8000598 <main+0x98>
  {
    empty_cache();
 800054a:	f7ff ff83 	bl	8000454 <empty_cache>
    if (i == nb_range2 )
 800054e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000552:	429a      	cmp	r2, r3
 8000554:	d101      	bne.n	800055a <main+0x5a>
    {
      range2_to_range1();
 8000556:	f000 fa91 	bl	8000a7c <range2_to_range1>
    }
    if (i == NF-nb_boost)
 800055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800055c:	f1c3 030c 	rsb	r3, r3, #12
 8000560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000562:	429a      	cmp	r2, r3
 8000564:	d101      	bne.n	800056a <main+0x6a>
    {
      boost_mode();
 8000566:	f000 fab5 	bl	8000ad4 <boost_mode>
    }
    f = f_table[i];
 800056a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3340      	adds	r3, #64	; 0x40
 8000570:	443b      	add	r3, r7
 8000572:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
    change_freq(f);
 8000578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800057a:	f000 f95d 	bl	8000838 <change_freq>
    init_cache();
 800057e:	f7ff ffa3 	bl	80004c8 <init_cache>
    Sleep(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f000 f92c 	bl	80007e0 <Sleep>
    tested_code();
 8000588:	f7ff feb8 	bl	80002fc <tested_code>
    Sleep(200);
 800058c:	20c8      	movs	r0, #200	; 0xc8
 800058e:	f000 f927 	bl	80007e0 <Sleep>
  for (int i =0; i < NF; i++)
 8000592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000594:	3301      	adds	r3, #1
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800059a:	2b0b      	cmp	r3, #11
 800059c:	ddd5      	ble.n	800054a <main+0x4a>
  }
  HAL_SuspendTick();
 800059e:	f000 fbff 	bl	8000da0 <HAL_SuspendTick>
  /* Enter sleep or stop mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80005a2:	2101      	movs	r1, #1
 80005a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005a8:	f000 feac 	bl	8001304 <HAL_PWR_EnterSTOPMode>
 80005ac:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3740      	adds	r7, #64	; 0x40
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bdb0      	pop	{r4, r5, r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08002838 	.word	0x08002838
 80005bc:	40022000 	.word	0x40022000

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	2238      	movs	r2, #56	; 0x38
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f8e8 	bl	80027a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e6:	f000 fea5 	bl	8001334 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ea:	230a      	movs	r3, #10
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000604:	2301      	movs	r3, #1
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000608:	230f      	movs	r3, #15
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff83 	bl	8001528 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000628:	f000 fa6c 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2103      	movs	r1, #3
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fa87 	bl	8001b58 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 fa58 	bl	8000b04 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_RTC_Init+0x64>)
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_RTC_Init+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_RTC_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_RTC_Init+0x64>)
 800066e:	227f      	movs	r2, #127	; 0x7f
 8000670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_RTC_Init+0x64>)
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_RTC_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_RTC_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_RTC_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_RTC_Init+0x64>)
 800068c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000690:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_RTC_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_RTC_Init+0x64>)
 800069a:	f001 fe63 	bl	8002364 <HAL_RTC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 fa2e 	bl	8000b04 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_RTC_Init+0x64>)
 80006ae:	f001 ff6d 	bl	800258c <HAL_RTCEx_SetWakeUpTimer_IT>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80006b8:	f000 fa24 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000fc8 	.word	0x20000fc8
 80006c4:	40002800 	.word	0x40002800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_GPIO_Init+0x108>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a3b      	ldr	r2, [pc, #236]	; (80007d0 <MX_GPIO_Init+0x108>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <MX_GPIO_Init+0x108>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <MX_GPIO_Init+0x108>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a35      	ldr	r2, [pc, #212]	; (80007d0 <MX_GPIO_Init+0x108>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0x108>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <MX_GPIO_Init+0x108>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800073e:	2303      	movs	r3, #3
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4820      	ldr	r0, [pc, #128]	; (80007d4 <MX_GPIO_Init+0x10c>)
 8000752:	f000 fc55 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	481b      	ldr	r0, [pc, #108]	; (80007d8 <MX_GPIO_Init+0x110>)
 800076c:	f000 fc48 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000770:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000774:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f000 fc3a 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800078c:	230c      	movs	r3, #12
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079c:	2307      	movs	r3, #7
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 fc29 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007ae:	f240 13f1 	movw	r3, #497	; 0x1f1
 80007b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b4:	2303      	movs	r3, #3
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_GPIO_Init+0x114>)
 80007c4:	f000 fc1c 	bl	8001000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48001400 	.word	0x48001400
 80007d8:	48001800 	.word	0x48001800
 80007dc:	48000400 	.word	0x48000400

080007e0 <Sleep>:

/* USER CODE BEGIN 4 */
void Sleep(int time)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t counter = (uint32_t) ((float) time*2);/*divide by (16/32)*/
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007fa:	ee17 3a90 	vmov	r3, s15
 80007fe:	60fb      	str	r3, [r7, #12]

  HAL_SuspendTick();
 8000800:	f000 face 	bl	8000da0 <HAL_SuspendTick>

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000804:	2200      	movs	r2, #0
 8000806:	68f9      	ldr	r1, [r7, #12]
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <Sleep+0x50>)
 800080a:	f001 febf 	bl	800258c <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Enter sleep or stop mode */
  //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fe5e 	bl	80014d0 <HAL_PWREx_EnterSTOP1Mode>
  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* Wake up*/
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <Sleep+0x50>)
 8000816:	f001 ff3f 	bl	8002698 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 800081a:	f000 fad1 	bl	8000dc0 <HAL_ResumeTick>
  //When wake up from STOP Sysclk source is HSI
  change_freq(current_frequency);
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Sleep+0x54>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f808 	bl	8000838 <change_freq>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000fc8 	.word	0x20000fc8
 8000834:	20000ff0 	.word	0x20000ff0

08000838 <change_freq>:
void change_freq(int f)
{
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b0ae      	sub	sp, #184	; 0xb8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  int latency = FLASH_LATENCY_4;
 8000840:	2304      	movs	r3, #4
 8000842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  int latency_tab[5] = {FLASH_LATENCY_0,FLASH_LATENCY_1,FLASH_LATENCY_2,FLASH_LATENCY_3,FLASH_LATENCY_4};
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <change_freq+0x1ac>)
 8000848:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	6023      	str	r3, [r4, #0]
  int freq_scale_boost[5] = {34,68,102,136,85};
 8000856:	4b64      	ldr	r3, [pc, #400]	; (80009e8 <change_freq+0x1b0>)
 8000858:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800085c:	461d      	mov	r5, r3
 800085e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	6023      	str	r3, [r4, #0]
  int freq_scale_normal[5] = {30,60,90,120,150};
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <change_freq+0x1b4>)
 8000868:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800086c:	461d      	mov	r5, r3
 800086e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	6023      	str	r3, [r4, #0]
  int freq_scale_low[5] = {12,24,26,26,26};
 8000876:	4b5e      	ldr	r3, [pc, #376]	; (80009f0 <change_freq+0x1b8>)
 8000878:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800087c:	461d      	mov	r5, r3
 800087e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000882:	682b      	ldr	r3, [r5, #0]
 8000884:	6023      	str	r3, [r4, #0]
  //if we are in boost mode there is not the same wait states
  int* selector;
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000886:	4b5b      	ldr	r3, [pc, #364]	; (80009f4 <change_freq+0x1bc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800088e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000892:	d10a      	bne.n	80008aa <change_freq+0x72>
  {
    if (f <= 26)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b1a      	cmp	r3, #26
 8000898:	dc04      	bgt.n	80008a4 <change_freq+0x6c>
    {
      selector = freq_scale_low;
 800089a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800089e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80008a2:	e012      	b.n	80008ca <change_freq+0x92>
    }
    else
    {
      Error_Handler();
 80008a4:	f000 f92e 	bl	8000b04 <Error_Handler>
 80008a8:	e00f      	b.n	80008ca <change_freq+0x92>
    }
  }

  else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE))
 80008aa:	4b52      	ldr	r3, [pc, #328]	; (80009f4 <change_freq+0x1bc>)
 80008ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d004      	beq.n	80008c2 <change_freq+0x8a>
  {
    selector = freq_scale_normal;
 80008b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80008c0:	e003      	b.n	80008ca <change_freq+0x92>
  }
  else
  {
    selector = freq_scale_boost;
 80008c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  }

  int mul = f/2;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	0fda      	lsrs	r2, r3, #31
 80008ce:	4413      	add	r3, r2
 80008d0:	105b      	asrs	r3, r3, #1
 80008d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2238      	movs	r2, #56	; 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 ff58 	bl	80027a4 <memset>
  for (int i = 4; i >= 0; i--)
 80008f4:	2304      	movs	r3, #4
 80008f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80008fa:	e018      	b.n	800092e <change_freq+0xf6>
  {
    if (mul <= selector[i])
 80008fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000906:	4413      	add	r3, r2
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800090e:	429a      	cmp	r2, r3
 8000910:	dc08      	bgt.n	8000924 <change_freq+0xec>
    {
      latency = latency_tab[i];
 8000912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	33b8      	adds	r3, #184	; 0xb8
 800091a:	443b      	add	r3, r7
 800091c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  for (int i = 4; i >= 0; i--)
 8000924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000928:	3b01      	subs	r3, #1
 800092a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800092e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000932:	2b00      	cmp	r3, #0
 8000934:	dae2      	bge.n	80008fc <change_freq+0xc4>
    }
  }

  /* -1- Select HSE as system clock source to allow modification of the PLL configuration */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000936:	2301      	movs	r3, #1
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093a:	2301      	movs	r3, #1
 800093c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 800093e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000942:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f001 f905 	bl	8001b58 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <change_freq+0x120>
  {
    /* Initialization Error */
    Error_Handler();
 8000954:	f000 f8d6 	bl	8000b04 <Error_Handler>
  }
  /* -2- Enable HSE  Oscillator, select it as PLL source and finally activate the PLL */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096a:	2302      	movs	r3, #2
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (f <= 42)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b2a      	cmp	r3, #42	; 0x2a
 8000972:	dc04      	bgt.n	800097e <change_freq+0x146>
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000978:	2301      	movs	r3, #1
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
 800097c:	e003      	b.n	8000986 <change_freq+0x14e>
  }
  else
  {
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  }
  RCC_OscInitStruct.PLL.PLLN = mul;
 8000986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fdc5 	bl	8001528 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <change_freq+0x170>
  {
    /* Initialization Error */
    Error_Handler();
 80009a4:	f000 f8ae 	bl	8000b04 <Error_Handler>
  }

  /* -3- Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2303      	movs	r3, #3
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, latency) != HAL_OK)
 80009bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80009c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f8c6 	bl	8001b58 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <change_freq+0x19e>
  {
    /* Initialization Error */
    Error_Handler();
 80009d2:	f000 f897 	bl	8000b04 <Error_Handler>
  }
  current_frequency = f;
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <change_freq+0x1c0>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	37b8      	adds	r7, #184	; 0xb8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bdb0      	pop	{r4, r5, r7, pc}
 80009e4:	08002868 	.word	0x08002868
 80009e8:	0800287c 	.word	0x0800287c
 80009ec:	08002890 	.word	0x08002890
 80009f0:	080028a4 	.word	0x080028a4
 80009f4:	40007000 	.word	0x40007000
 80009f8:	20000ff0 	.word	0x20000ff0

080009fc <range1_to_range2>:

void range1_to_range2()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <range1_to_range2+0x7c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a0e:	d02e      	beq.n	8000a6e <range1_to_range2+0x72>
  {
    //Reduce the system frequency to a value lower than 26 MHz
    change_freq(26);
 8000a10:	201a      	movs	r0, #26
 8000a12:	f7ff ff11 	bl	8000838 <change_freq>
    //the system clock must be divided by 2 using the AHB prescaler
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_0 );
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fa33 	bl	8001e94 <HAL_RCC_GetClockConfig>
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	60fb      	str	r3, [r7, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 f88e 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <range1_to_range2+0x4a>
    {
      /* Initialization Error */
      Error_Handler();
 8000a42:	f000 f85f 	bl	8000b04 <Error_Handler>
    }
    //Program the VOS bits to “10�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <range1_to_range2+0x7c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <range1_to_range2+0x7c>)
 8000a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a54:	6013      	str	r3, [r2, #0]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
    //Adjust number of wait states according new frequency target in Range 2
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f87a 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <range1_to_range2+0x72>
    {
      /* Initialization Error */
      Error_Handler();
 8000a6a:	f000 f84b 	bl	8000b04 <Error_Handler>
    }
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40007000 	.word	0x40007000

08000a7c <range2_to_range1>:

void range2_to_range1()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <range2_to_range1+0x50>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8c:	d11b      	bne.n	8000ac6 <range2_to_range1+0x4a>
  {
    //Program the VOS bits to “01�? in the PWR_CR1 register
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <range2_to_range1+0x50>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <range2_to_range1+0x50>)
 8000a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9c:	6013      	str	r3, [r2, #0]
    //Wait until the VOSF flag is cleared in the PWR_SR2 register
    while (READ_BIT(PWR->SR2, PWR_SR2_VOSF))
 8000a9e:	bf00      	nop
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <range2_to_range1+0x50>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f9      	bne.n	8000aa0 <range2_to_range1+0x24>
    {
      ;
    }
    //Adjust number of wait states according new frequency target in Range 1
    SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <range2_to_range1+0x50>)
 8000aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <range2_to_range1+0x50>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    change_freq(current_frequency);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <range2_to_range1+0x54>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff feb9 	bl	8000838 <change_freq>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	20000ff0 	.word	0x20000ff0

08000ad4 <boost_mode>:

void boost_mode()
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <boost_mode+0x2c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae4:	d107      	bne.n	8000af6 <boost_mode+0x22>
  {
    CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <boost_mode+0x2c>)
 8000ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <boost_mode+0x2c>)
 8000aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000af2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40007000 	.word	0x40007000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2244      	movs	r2, #68	; 0x44
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fe1b 	bl	80027a4 <memset>
  if(hrtc->Instance==RTC)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_RTC_MspInit+0x80>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d12b      	bne.n	8000bd0 <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f9fb 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b94:	f7ff ffb6 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f9e6 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f9fd 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	; 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40002800 	.word	0x40002800
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f89a 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <RTC_WKUP_IRQHandler+0x10>)
 8000c3a:	f001 fd89 	bl	8002750 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000fc8 	.word	0x20000fc8

08000c48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c96:	f7ff ffd7 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f001 fd8b 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc2f 	bl	8000500 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   r0, =_estack
 8000ca4:	20005800 	.word	0x20005800
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000fac 	.word	0x20000fac
  ldr r2, =_sidata
 8000cb0:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 8000cb4:	20000fac 	.word	0x20000fac
  ldr r4, =_ebss
 8000cb8:	20000ff8 	.word	0x20000ff8

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f959 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff ff16 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_InitTick+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d022      	beq.n	8000d4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_InitTick+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f964 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d809      	bhi.n	8000d3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	f000 f930 	bl	8000f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x70>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e004      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e001      	b.n	8000d4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000fa8 	.word	0x20000fa8
 8000d5c:	20000fa0 	.word	0x20000fa0
 8000d60:	20000fa4 	.word	0x20000fa4

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000ff4 	.word	0x20000ff4
 8000d84:	20000fa8 	.word	0x20000fa8

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000ff4 	.word	0x20000ff4

08000da0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_SuspendTick+0x1c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_SuspendTick+0x1c>)
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_ResumeTick+0x1c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_ResumeTick+0x1c>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff40 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff33 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa4 	bl	8000f3c <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800100e:	e15a      	b.n	80012c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 814c 	beq.w	80012c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d005      	beq.n	8001040 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800103c:	2b02      	cmp	r3, #2
 800103e:	d130      	bne.n	80010a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001076:	2201      	movs	r2, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	f003 0201 	and.w	r2, r3, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d017      	beq.n	80010de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d123      	bne.n	8001132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	6939      	ldr	r1, [r7, #16]
 800112e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0203 	and.w	r2, r3, #3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80a6 	beq.w	80012c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001178:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6613      	str	r3, [r2, #96]	; 0x60
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118c:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x2e8>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b6:	d01f      	beq.n	80011f8 <HAL_GPIO_Init+0x1f8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2ec>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d019      	beq.n	80011f4 <HAL_GPIO_Init+0x1f4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1f0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_GPIO_Init+0x2f4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1ec>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a49      	ldr	r2, [pc, #292]	; (80012f8 <HAL_GPIO_Init+0x2f8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1e8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a48      	ldr	r2, [pc, #288]	; (80012fc <HAL_GPIO_Init+0x2fc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1e4>
 80011e0:	2305      	movs	r3, #5
 80011e2:	e00a      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011e4:	2306      	movs	r3, #6
 80011e6:	e008      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_GPIO_Init+0x2e8>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_GPIO_Init+0x300>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a30      	ldr	r2, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x300>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x300>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x300>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f ae9d 	bne.w	8001010 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001316:	d104      	bne.n	8001322 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f8d8 	bl	80014d0 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001320:	e003      	b.n	800132a <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8a9 	bl	800147c <HAL_PWREx_EnterSTOP0Mode>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d141      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001342:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134e:	d131      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001356:	4a46      	ldr	r2, [pc, #280]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800135c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001368:	4a41      	ldr	r2, [pc, #260]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001370:	4b40      	ldr	r3, [pc, #256]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2232      	movs	r2, #50	; 0x32
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a3f      	ldr	r2, [pc, #252]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9b      	lsrs	r3, r3, #18
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001386:	e002      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3b01      	subs	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d102      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f2      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d158      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e057      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013c4:	e04d      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013cc:	d141      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013da:	d131      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2232      	movs	r2, #50	; 0x32
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001412:	e002      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b01      	subs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d102      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f2      	bne.n	8001414 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d112      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e011      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001450:	e007      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001460:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40007000 	.word	0x40007000
 8001474:	20000fa0 	.word	0x20000fa0
 8001478:	431bde83 	.word	0x431bde83

0800147c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800148c:	f023 0307 	bic.w	r3, r3, #7
 8001490:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80014a4:	bf30      	wfi
 80014a6:	e002      	b.n	80014ae <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80014a8:	bf40      	sev
    __WFE();
 80014aa:	bf20      	wfe
    __WFE();
 80014ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6113      	str	r3, [r2, #16]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80014fc:	bf30      	wfi
 80014fe:	e002      	b.n	8001506 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001500:	bf40      	sev
    __WFE();
 8001502:	bf20      	wfe
    __WFE();
 8001504:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6113      	str	r3, [r2, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e306      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d075      	beq.n	8001632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001546:	4b97      	ldr	r3, [pc, #604]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001550:	4b94      	ldr	r3, [pc, #592]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x3e>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d002      	beq.n	800156c <HAL_RCC_OscConfig+0x44>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b08      	cmp	r3, #8
 800156a:	d10b      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	4b8d      	ldr	r3, [pc, #564]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d05b      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d157      	bne.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e2e1      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x74>
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a84      	ldr	r2, [pc, #528]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7e      	ldr	r2, [pc, #504]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b7c      	ldr	r3, [pc, #496]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7b      	ldr	r2, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a74      	ldr	r2, [pc, #464]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fbd2 	bl	8000d88 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbce 	bl	8000d88 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2a6      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fa:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xc0>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fbbe 	bl	8000d88 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fbba 	bl	8000d88 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e292      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001622:	4b60      	ldr	r3, [pc, #384]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0xe8>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x136>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d002      	beq.n	8001664 <HAL_RCC_OscConfig+0x13c>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d11f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x154>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e265      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	4946      	ldr	r1, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001690:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb2b 	bl	8000cf0 <HAL_InitTick>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e251      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a3c      	ldr	r2, [pc, #240]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb66 	bl	8000d88 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fb62 	bl	8000d88 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e23a      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	061b      	lsls	r3, r3, #24
 80016ec:	492d      	ldr	r1, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
 80016f2:	e01a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb42 	bl	8000d88 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fb3e 	bl	8000d88 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e216      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1e0>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d041      	beq.n	80017ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01c      	beq.n	8001778 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb1b 	bl	8000d88 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb17 	bl	8000d88 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1ef      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ef      	beq.n	8001756 <HAL_RCC_OscConfig+0x22e>
 8001776:	e020      	b.n	80017ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fafe 	bl	8000d88 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178e:	e00d      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fafa 	bl	8000d88 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d906      	bls.n	80017ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1d2      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	20000fa4 	.word	0x20000fa4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ea      	bne.n	8001790 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80a6 	beq.w	8001914 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017cc:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_OscConfig+0x2b4>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x2b6>
 80017dc:	2300      	movs	r3, #0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a7e      	ldr	r2, [pc, #504]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b7c      	ldr	r3, [pc, #496]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fe:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <HAL_RCC_OscConfig+0x4bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x4bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x4bc>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fab7 	bl	8000d88 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fab3 	bl	8000d88 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e18b      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	4b6c      	ldr	r3, [pc, #432]	; (80019e4 <HAL_RCC_OscConfig+0x4bc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_RCC_OscConfig+0x32e>
 8001844:	4b66      	ldr	r3, [pc, #408]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	e024      	b.n	80018a0 <HAL_RCC_OscConfig+0x378>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d110      	bne.n	8001880 <HAL_RCC_OscConfig+0x358>
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a5a      	ldr	r2, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x378>
 8001880:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d016      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fa6e 	bl	8000d88 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fa6a 	bl	8000d88 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e140      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ed      	beq.n	80018b0 <HAL_RCC_OscConfig+0x388>
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fa57 	bl	8000d88 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fa53 	bl	8000d88 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e129      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ed      	bne.n	80018de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa26 	bl	8000d88 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001940:	f7ff fa22 	bl	8000d88 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0fa      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x418>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa09 	bl	8000d88 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff fa05 	bl	8000d88 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0dd      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80d1 	beq.w	8001b46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	f000 808b 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d15e      	bne.n	8001a78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f9df 	bl	8000d88 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e00c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff f9db 	bl	8000d88 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d905      	bls.n	80019e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0b3      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ec      	bne.n	80019ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x62c>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6a11      	ldr	r1, [r2, #32]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a0e:	0212      	lsls	r2, r2, #8
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a16:	0852      	lsrs	r2, r2, #1
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	0552      	lsls	r2, r2, #21
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a22:	0852      	lsrs	r2, r2, #1
 8001a24:	3a01      	subs	r2, #1
 8001a26:	0652      	lsls	r2, r2, #25
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a2e:	06d2      	lsls	r2, r2, #27
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4947      	ldr	r1, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a44      	ldr	r2, [pc, #272]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f99a 	bl	8000d88 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f996 	bl	8000d88 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e06e      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x530>
 8001a76:	e066      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f972 	bl	8000d88 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f96e 	bl	8000d88 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e046      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x580>
 8001ac6:	e03e      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e039      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d12c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	3b01      	subs	r3, #1
 8001af4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d123      	bne.n	8001b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d11b      	bne.n	8001b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d113      	bne.n	8001b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	3b01      	subs	r3, #1
 8001b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	019f800c 	.word	0x019f800c

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e11e      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	498c      	ldr	r1, [pc, #560]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e106      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d073      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d129      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0f4      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bc4:	f000 f998 	bl	8001ef8 <RCC_GetSysClockFreqFromPLLSource>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4a7c      	ldr	r2, [pc, #496]	; (8001dc0 <HAL_RCC_ClockConfig+0x268>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d93f      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d033      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12f      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfa:	4a70      	ldr	r2, [pc, #448]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e024      	b.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c6      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0be      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c30:	f000 f8ce 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4a61      	ldr	r2, [pc, #388]	; (8001dc0 <HAL_RCC_ClockConfig+0x268>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d909      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4957      	ldr	r1, [pc, #348]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7ff f890 	bl	8000d88 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f88c 	bl	8000d88 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e095      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4936      	ldr	r1, [pc, #216]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b80      	cmp	r3, #128	; 0x80
 8001cec:	d105      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d21d      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 020f 	bic.w	r2, r3, #15
 8001d10:	4929      	ldr	r1, [pc, #164]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d18:	f7ff f836 	bl	8000d88 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f832 	bl	8000d88 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e03b      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1ed      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4917      	ldr	r1, [pc, #92]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490f      	ldr	r1, [pc, #60]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x26c>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ffa2 	bl	8000cf0 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	04c4b400 	.word	0x04c4b400
 8001dc4:	08003858 	.word	0x08003858
 8001dc8:	20000fa0 	.word	0x20000fa0
 8001dcc:	20000fa4 	.word	0x20000fa4

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e047      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e03e      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d136      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2e:	68d2      	ldr	r2, [r2, #12]
 8001e30:	0a12      	lsrs	r2, r2, #8
 8001e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
      break;
 8001e3c:	e00c      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e48:	68d2      	ldr	r2, [r2, #12]
 8001e4a:	0a12      	lsrs	r2, r2, #8
 8001e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0e5b      	lsrs	r3, r3, #25
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e001      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e78:	693b      	ldr	r3, [r7, #16]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCC_GetClockConfig+0x60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d10c      	bne.n	8001f36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f26:	68d2      	ldr	r2, [r2, #12]
 8001f28:	0a12      	lsrs	r2, r2, #8
 8001f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
    break;
 8001f34:	e00c      	b.n	8001f50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	0a12      	lsrs	r2, r2, #8
 8001f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    break;
 8001f4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0e5b      	lsrs	r3, r3, #25
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f6a:	687b      	ldr	r3, [r7, #4]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	00f42400 	.word	0x00f42400

08001f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8098 	beq.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fce:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fda:	f7fe fed5 	bl	8000d88 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe0:	e009      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7fe fed1 	bl	8000d88 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d902      	bls.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ff4:	e005      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ef      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d159      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01e      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d019      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe fe91 	bl	8000d88 <HAL_GetTick>
 8002066:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002068:	e00b      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fe8d 	bl	8000d88 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d902      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	74fb      	strb	r3, [r7, #19]
            break;
 8002080:	e006      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ec      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020ac:	e008      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	74bb      	strb	r3, [r7, #18]
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c0:	7c7b      	ldrb	r3, [r7, #17]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4ba6      	ldr	r3, [pc, #664]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4aa5      	ldr	r2, [pc, #660]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020de:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	499c      	ldr	r1, [pc, #624]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002100:	4b97      	ldr	r3, [pc, #604]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f023 020c 	bic.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4994      	ldr	r1, [pc, #592]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	498b      	ldr	r1, [pc, #556]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002144:	4b86      	ldr	r3, [pc, #536]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	4983      	ldr	r1, [pc, #524]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002166:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	497a      	ldr	r1, [pc, #488]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4972      	ldr	r1, [pc, #456]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	4969      	ldr	r1, [pc, #420]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021cc:	4b64      	ldr	r3, [pc, #400]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4961      	ldr	r1, [pc, #388]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ee:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	4958      	ldr	r1, [pc, #352]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	4950      	ldr	r1, [pc, #320]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002248:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	4942      	ldr	r1, [pc, #264]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4934      	ldr	r1, [pc, #208]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4918      	ldr	r1, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	490a      	ldr	r1, [pc, #40]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002354:	7cbb      	ldrb	r3, [r7, #18]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d066      	beq.n	8002444 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fbe4 	bl	8000b58 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	22ca      	movs	r2, #202	; 0xca
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2253      	movs	r2, #83	; 0x53
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f876 	bl	800249a <RTC_EnterInitMode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13a      	bne.n	800242e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ca:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6999      	ldr	r1, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f882 	bl	8002506 <RTC_ExitInitMode>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d110      	bne.n	800242e <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0220 	bic.w	r2, r2, #32
 8002464:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002466:	f7fe fc8f 	bl	8000d88 <HAL_GetTick>
 800246a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800246c:	e009      	b.n	8002482 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800246e:	f7fe fc8b 	bl	8000d88 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247c:	d901      	bls.n	8002482 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e007      	b.n	8002492 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d123      	bne.n	80024fc <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024c4:	f7fe fc60 	bl	8000d88 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024ca:	e00d      	b.n	80024e8 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024cc:	f7fe fc5c 	bl	8000d88 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024da:	d905      	bls.n	80024e8 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2203      	movs	r2, #3
 80024e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <RTC_EnterInitMode+0x62>
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d1e7      	bne.n	80024cc <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002520:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10c      	bne.n	800254a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff8c 	bl	800244e <HAL_RTC_WaitForSynchro>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d022      	beq.n	8002582 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e01b      	b.n	8002582 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0220 	bic.w	r2, r2, #32
 8002558:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff77 	bl	800244e <HAL_RTC_WaitForSynchro>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2203      	movs	r2, #3
 800256a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e072      	b.n	800268c <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	22ca      	movs	r2, #202	; 0xca
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2253      	movs	r2, #83	; 0x53
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2204      	movs	r2, #4
 80025dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d120      	bne.n	800262e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
  {
    tickstart = HAL_GetTick();
 80025ec:	f7fe fbcc 	bl	8000d88 <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80025f2:	e015      	b.n	8002620 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025f4:	f7fe fbc8 	bl	8000d88 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	d90d      	bls.n	8002620 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e035      	b.n	800268c <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0e2      	beq.n	80025f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f023 0107 	bic.w	r1, r3, #7
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	430a      	orrs	r2, r1
 8002648:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002654:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002660:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(hrtc->Instance->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4288 	orr.w	r2, r2, #17408	; 0x4400
 8002670:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	22ff      	movs	r2, #255	; 0xff
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e049      	b.n	8002742 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	22ca      	movs	r2, #202	; 0xca
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2253      	movs	r2, #83	; 0x53
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4288 	bic.w	r2, r2, #17408	; 0x4400
 80026dc:	619a      	str	r2, [r3, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>)
 80026e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026e4:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 80026e6:	f7fe fb4f 	bl	8000d88 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80026ec:	e015      	b.n	800271a <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026ee:	f7fe fb4b 	bl	8000d88 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026fc:	d90d      	bls.n	800271a <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	22ff      	movs	r2, #255	; 0xff
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e013      	b.n	8002742 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0e2      	beq.n	80026ee <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(hrtc->Instance->SR, RTC_SR_WUTF) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CWUTF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8002770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002774:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f80a 	bl	8002790 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4d0d      	ldr	r5, [pc, #52]	; (80027ec <__libc_init_array+0x38>)
 80027b8:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027ba:	1b64      	subs	r4, r4, r5
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	2600      	movs	r6, #0
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	4d0b      	ldr	r5, [pc, #44]	; (80027f4 <__libc_init_array+0x40>)
 80027c6:	4c0c      	ldr	r4, [pc, #48]	; (80027f8 <__libc_init_array+0x44>)
 80027c8:	f000 f826 	bl	8002818 <_init>
 80027cc:	1b64      	subs	r4, r4, r5
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	2600      	movs	r6, #0
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08003868 	.word	0x08003868
 80027f0:	08003868 	.word	0x08003868
 80027f4:	08003868 	.word	0x08003868
 80027f8:	0800386c 	.word	0x0800386c

080027fc <memcpy>:
 80027fc:	440a      	add	r2, r1
 80027fe:	4291      	cmp	r1, r2
 8002800:	f100 33ff 	add.w	r3, r0, #4294967295
 8002804:	d100      	bne.n	8002808 <memcpy+0xc>
 8002806:	4770      	bx	lr
 8002808:	b510      	push	{r4, lr}
 800280a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800280e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002812:	4291      	cmp	r1, r2
 8002814:	d1f9      	bne.n	800280a <memcpy+0xe>
 8002816:	bd10      	pop	{r4, pc}

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr

08002830 <__bubble_main_ccm_veneer>:
 8002830:	f85f f000 	ldr.w	pc, [pc]	; 8002834 <__bubble_main_ccm_veneer+0x4>
 8002834:	100000ad 	.word	0x100000ad

Disassembly of section .ccmram:

10000000 <BubbleSortCCM>:
{
10000000:	b480      	push	{r7}
10000002:	b087      	sub	sp, #28
10000004:	af00      	add	r7, sp, #0
10000006:	6078      	str	r0, [r7, #4]
   int Sorted = FALSE;
10000008:	2300      	movs	r3, #0
1000000a:	617b      	str	r3, [r7, #20]
   for (i = 1; i <= NUMELEMS-1; i++)
1000000c:	2301      	movs	r3, #1
1000000e:	60fb      	str	r3, [r7, #12]
10000010:	e040      	b.n	10000094 <BubbleSortCCM+0x94>
      Sorted = TRUE;
10000012:	2301      	movs	r3, #1
10000014:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000016:	2300      	movs	r3, #0
10000018:	613b      	str	r3, [r7, #16]
1000001a:	e02f      	b.n	1000007c <BubbleSortCCM+0x7c>
         if (Index > NUMELEMS-i)
1000001c:	68fb      	ldr	r3, [r7, #12]
1000001e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
10000022:	693a      	ldr	r2, [r7, #16]
10000024:	429a      	cmp	r2, r3
10000026:	dc2e      	bgt.n	10000086 <BubbleSortCCM+0x86>
         if (Array[Index] > Array[Index + 1])
10000028:	693b      	ldr	r3, [r7, #16]
1000002a:	009b      	lsls	r3, r3, #2
1000002c:	687a      	ldr	r2, [r7, #4]
1000002e:	4413      	add	r3, r2
10000030:	681a      	ldr	r2, [r3, #0]
10000032:	693b      	ldr	r3, [r7, #16]
10000034:	3301      	adds	r3, #1
10000036:	009b      	lsls	r3, r3, #2
10000038:	6879      	ldr	r1, [r7, #4]
1000003a:	440b      	add	r3, r1
1000003c:	681b      	ldr	r3, [r3, #0]
1000003e:	429a      	cmp	r2, r3
10000040:	dd19      	ble.n	10000076 <BubbleSortCCM+0x76>
            Temp = Array[Index];
10000042:	693b      	ldr	r3, [r7, #16]
10000044:	009b      	lsls	r3, r3, #2
10000046:	687a      	ldr	r2, [r7, #4]
10000048:	4413      	add	r3, r2
1000004a:	681b      	ldr	r3, [r3, #0]
1000004c:	60bb      	str	r3, [r7, #8]
            Array[Index] = Array[Index+1];
1000004e:	693b      	ldr	r3, [r7, #16]
10000050:	3301      	adds	r3, #1
10000052:	009b      	lsls	r3, r3, #2
10000054:	687a      	ldr	r2, [r7, #4]
10000056:	441a      	add	r2, r3
10000058:	693b      	ldr	r3, [r7, #16]
1000005a:	009b      	lsls	r3, r3, #2
1000005c:	6879      	ldr	r1, [r7, #4]
1000005e:	440b      	add	r3, r1
10000060:	6812      	ldr	r2, [r2, #0]
10000062:	601a      	str	r2, [r3, #0]
            Array[Index+1] = Temp;
10000064:	693b      	ldr	r3, [r7, #16]
10000066:	3301      	adds	r3, #1
10000068:	009b      	lsls	r3, r3, #2
1000006a:	687a      	ldr	r2, [r7, #4]
1000006c:	4413      	add	r3, r2
1000006e:	68ba      	ldr	r2, [r7, #8]
10000070:	601a      	str	r2, [r3, #0]
            Sorted = FALSE;
10000072:	2300      	movs	r3, #0
10000074:	617b      	str	r3, [r7, #20]
      for (Index = 0; Index <= NUMELEMS-1; Index ++) {
10000076:	693b      	ldr	r3, [r7, #16]
10000078:	3301      	adds	r3, #1
1000007a:	613b      	str	r3, [r7, #16]
1000007c:	693b      	ldr	r3, [r7, #16]
1000007e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10000082:	dbcb      	blt.n	1000001c <BubbleSortCCM+0x1c>
10000084:	e000      	b.n	10000088 <BubbleSortCCM+0x88>
           break;
10000086:	bf00      	nop
      if (Sorted)
10000088:	697b      	ldr	r3, [r7, #20]
1000008a:	2b00      	cmp	r3, #0
1000008c:	d107      	bne.n	1000009e <BubbleSortCCM+0x9e>
   for (i = 1; i <= NUMELEMS-1; i++)
1000008e:	68fb      	ldr	r3, [r7, #12]
10000090:	3301      	adds	r3, #1
10000092:	60fb      	str	r3, [r7, #12]
10000094:	68fb      	ldr	r3, [r7, #12]
10000096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000009a:	dbba      	blt.n	10000012 <BubbleSortCCM+0x12>
}
1000009c:	e000      	b.n	100000a0 <BubbleSortCCM+0xa0>
         break;
1000009e:	bf00      	nop
}
100000a0:	bf00      	nop
100000a2:	371c      	adds	r7, #28
100000a4:	46bd      	mov	sp, r7
100000a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100000aa:	4770      	bx	lr

100000ac <bubble_main_ccm>:
{
100000ac:	b580      	push	{r7, lr}
100000ae:	af00      	add	r7, sp, #0
  BubbleSortCCM(srcArrayInRAM);
100000b0:	4802      	ldr	r0, [pc, #8]	; (100000bc <bubble_main_ccm+0x10>)
100000b2:	f7ff ffa5 	bl	10000000 <BubbleSortCCM>
}
100000b6:	bf00      	nop
100000b8:	bd80      	pop	{r7, pc}
100000ba:	bf00      	nop
100000bc:	20000000 	.word	0x20000000
